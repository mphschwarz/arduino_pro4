
dojo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000007f0  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800112  00800112  00000896  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000669b  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015d4  00000000  00000000  00007233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001889  00000000  00000000  00008807  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000768  00000000  00000000  0000a090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000216a  00000000  00000000  0000a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003236  00000000  00000000  0000c962  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000fb98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_3>
  10:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_3>
  14:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_3>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_16>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	a6 00       	.word	0x00a6	; ????

000000c4 <__ctors_end>:
  c4:	ad 00       	.word	0x00ad	; ????

000000c6 <__dtors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	e0 ef       	ldi	r30, 0xF0	; 240
  da:	f7 e0       	ldi	r31, 0x07	; 7
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a2 31       	cpi	r26, 0x12	; 18
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	a2 e1       	ldi	r26, 0x12	; 18
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	ae 37       	cpi	r26, 0x7E	; 126
  f4:	b2 07       	cpc	r27, r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	c2 e6       	ldi	r28, 0x62	; 98
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
 100:	21 97       	sbiw	r28, 0x01	; 1
 102:	fe 01       	movw	r30, r28
 104:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__tablejump2__>
 108:	c1 36       	cpi	r28, 0x61	; 97
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
 10e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <main>
 112:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__do_global_dtors>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <setup>:
#define LEDPORT PORTD
#define LEDDDR DDRD

SoftwareSerial mySerial = SoftwareSerial(0,1);
void setup() {
  LEDDDR = 0xFF;
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	08 95       	ret

00000120 <loop>:
}

void loop() {
// LED 
LEDPORT = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	84 e3       	ldi	r24, 0x34	; 52
 128:	9c e0       	ldi	r25, 0x0C	; 12
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <loop+0xa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <loop+0x14>
 134:	00 00       	nop
_delay_ms(500);
LEDPORT = 0x00;
 136:	1b b8       	out	0x0b, r1	; 11
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	84 e3       	ldi	r24, 0x34	; 52
 13c:	9c e0       	ldi	r25, 0x0C	; 12
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <loop+0x1e>
 146:	00 c0       	rjmp	.+0      	; 0x148 <loop+0x28>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <_GLOBAL__sub_I_mySerial>:
#include <Arduino.h>
#include <SoftwareSerial.h>
#define LEDPORT PORTD
#define LEDDDR DDRD

SoftwareSerial mySerial = SoftwareSerial(0,1);
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	82 e1       	ldi	r24, 0x12	; 18
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0c 94 3f 02 	jmp	0x47e	; 0x47e <_ZN14SoftwareSerialC1Ehhb>

0000015a <_GLOBAL__sub_D_mySerial>:
 15a:	82 e1       	ldi	r24, 0x12	; 18
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_ZN14SoftwareSerialD1Ev>

00000162 <_ZN5Print17availableForWriteEv>:
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
}
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret

00000168 <_ZN14SoftwareSerial4readEv>:
 168:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <_ZN14SoftwareSerial13active_objectE>
 16c:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <_ZN14SoftwareSerial13active_objectE+0x1>
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	b9 f4       	brne	.+46     	; 0x1a4 <_ZN14SoftwareSerial4readEv+0x3c>
 176:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_ZN14SoftwareSerial20_receive_buffer_headE>
 17a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 17e:	98 17       	cp	r25, r24
 180:	89 f0       	breq	.+34     	; 0x1a4 <_ZN14SoftwareSerial4readEv+0x3c>
 182:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <_ZN14SoftwareSerial20_receive_buffer_headE>
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ed 5c       	subi	r30, 0xCD	; 205
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	80 81       	ld	r24, Z
 18e:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <_ZN14SoftwareSerial20_receive_buffer_headE>
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	2f 5f       	subi	r18, 0xFF	; 255
 196:	3f 4f       	sbci	r19, 0xFF	; 255
 198:	2f 73       	andi	r18, 0x3F	; 63
 19a:	33 27       	eor	r19, r19
 19c:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <_ZN14SoftwareSerial20_receive_buffer_headE>
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	08 95       	ret
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	9f ef       	ldi	r25, 0xFF	; 255
 1a8:	08 95       	ret

000001aa <_ZN14SoftwareSerial5writeEh>:
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	dc 01       	movw	r26, r24
 1b2:	5c 96       	adiw	r26, 0x1c	; 28
 1b4:	8d 91       	ld	r24, X+
 1b6:	9c 91       	ld	r25, X
 1b8:	5d 97       	sbiw	r26, 0x1d	; 29
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	39 f4       	brne	.+14     	; 0x1cc <_ZN14SoftwareSerial5writeEh+0x22>
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	13 96       	adiw	r26, 0x03	; 3
 1c4:	3c 93       	st	X, r19
 1c6:	2e 93       	st	-X, r18
 1c8:	12 97       	sbiw	r26, 0x02	; 2
 1ca:	3b c0       	rjmp	.+118    	; 0x242 <_ZN14SoftwareSerial5writeEh+0x98>
 1cc:	51 96       	adiw	r26, 0x11	; 17
 1ce:	ed 91       	ld	r30, X+
 1d0:	fc 91       	ld	r31, X
 1d2:	52 97       	sbiw	r26, 0x12	; 18
 1d4:	50 96       	adiw	r26, 0x10	; 16
 1d6:	2c 91       	ld	r18, X
 1d8:	50 97       	sbiw	r26, 0x10	; 16
 1da:	32 2f       	mov	r19, r18
 1dc:	30 95       	com	r19
 1de:	1f b7       	in	r17, 0x3f	; 63
 1e0:	5e 96       	adiw	r26, 0x1e	; 30
 1e2:	4c 91       	ld	r20, X
 1e4:	5e 97       	sbiw	r26, 0x1e	; 30
 1e6:	74 2f       	mov	r23, r20
 1e8:	72 70       	andi	r23, 0x02	; 2
 1ea:	41 fd       	sbrc	r20, 1
 1ec:	60 95       	com	r22
 1ee:	f8 94       	cli
 1f0:	40 81       	ld	r20, Z
 1f2:	77 23       	and	r23, r23
 1f4:	11 f0       	breq	.+4      	; 0x1fa <_ZN14SoftwareSerial5writeEh+0x50>
 1f6:	42 2b       	or	r20, r18
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <_ZN14SoftwareSerial5writeEh+0x52>
 1fa:	43 23       	and	r20, r19
 1fc:	40 83       	st	Z, r20
 1fe:	ec 01       	movw	r28, r24
 200:	21 97       	sbiw	r28, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <_ZN14SoftwareSerial5writeEh+0x56>
 204:	48 e0       	ldi	r20, 0x08	; 8
 206:	50 81       	ld	r21, Z
 208:	60 ff       	sbrs	r22, 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <_ZN14SoftwareSerial5writeEh+0x66>
 20c:	52 2b       	or	r21, r18
 20e:	01 c0       	rjmp	.+2      	; 0x212 <_ZN14SoftwareSerial5writeEh+0x68>
 210:	53 23       	and	r21, r19
 212:	50 83       	st	Z, r21
 214:	ec 01       	movw	r28, r24
 216:	21 97       	sbiw	r28, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <_ZN14SoftwareSerial5writeEh+0x6c>
 21a:	66 95       	lsr	r22
 21c:	41 50       	subi	r20, 0x01	; 1
 21e:	99 f7       	brne	.-26     	; 0x206 <_ZN14SoftwareSerial5writeEh+0x5c>
 220:	80 81       	ld	r24, Z
 222:	77 23       	and	r23, r23
 224:	19 f0       	breq	.+6      	; 0x22c <_ZN14SoftwareSerial5writeEh+0x82>
 226:	83 23       	and	r24, r19
 228:	80 83       	st	Z, r24
 22a:	02 c0       	rjmp	.+4      	; 0x230 <_ZN14SoftwareSerial5writeEh+0x86>
 22c:	28 2b       	or	r18, r24
 22e:	20 83       	st	Z, r18
 230:	1f bf       	out	0x3f, r17	; 63
 232:	5c 96       	adiw	r26, 0x1c	; 28
 234:	8d 91       	ld	r24, X+
 236:	9c 91       	ld	r25, X
 238:	5d 97       	sbiw	r26, 0x1d	; 29
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <_ZN14SoftwareSerial5writeEh+0x90>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	08 95       	ret

0000024a <_ZN14SoftwareSerial5flushEv>:
 24a:	08 95       	ret

0000024c <_ZN14SoftwareSerial4peekEv>:
 24c:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <_ZN14SoftwareSerial13active_objectE>
 250:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <_ZN14SoftwareSerial13active_objectE+0x1>
 254:	28 17       	cp	r18, r24
 256:	39 07       	cpc	r19, r25
 258:	71 f4       	brne	.+28     	; 0x276 <_ZN14SoftwareSerial4peekEv+0x2a>
 25a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <_ZN14SoftwareSerial20_receive_buffer_headE>
 25e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 262:	98 17       	cp	r25, r24
 264:	41 f0       	breq	.+16     	; 0x276 <_ZN14SoftwareSerial4peekEv+0x2a>
 266:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <_ZN14SoftwareSerial20_receive_buffer_headE>
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	ed 5c       	subi	r30, 0xCD	; 205
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	80 81       	ld	r24, Z
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	08 95       	ret
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	9f ef       	ldi	r25, 0xFF	; 255
 27a:	08 95       	ret

0000027c <_ZN14SoftwareSerial9availableEv>:
 27c:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <_ZN14SoftwareSerial13active_objectE>
 280:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <_ZN14SoftwareSerial13active_objectE+0x1>
 284:	28 17       	cp	r18, r24
 286:	39 07       	cpc	r19, r25
 288:	71 f4       	brne	.+28     	; 0x2a6 <_ZN14SoftwareSerial9availableEv+0x2a>
 28a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 28e:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <_ZN14SoftwareSerial20_receive_buffer_headE>
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	80 5c       	subi	r24, 0xC0	; 192
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	82 1b       	sub	r24, r18
 29a:	91 09       	sbc	r25, r1
 29c:	60 e4       	ldi	r22, 0x40	; 64
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__divmodhi4>
 2a4:	08 95       	ret
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	08 95       	ret

000002ac <_ZN14SoftwareSerial13stopListeningEv>:
 2ac:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <_ZN14SoftwareSerial13active_objectE>
 2b0:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <_ZN14SoftwareSerial13active_objectE+0x1>
 2b4:	e8 17       	cp	r30, r24
 2b6:	f9 07       	cpc	r31, r25
 2b8:	69 f4       	brne	.+26     	; 0x2d4 <_ZN14SoftwareSerial13stopListeningEv+0x28>
 2ba:	a3 89       	ldd	r26, Z+19	; 0x13
 2bc:	b4 89       	ldd	r27, Z+20	; 0x14
 2be:	9c 91       	ld	r25, X
 2c0:	85 89       	ldd	r24, Z+21	; 0x15
 2c2:	80 95       	com	r24
 2c4:	89 23       	and	r24, r25
 2c6:	8c 93       	st	X, r24
 2c8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <_ZN14SoftwareSerial13active_objectE+0x1>
 2cc:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <_ZN14SoftwareSerial13active_objectE>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret

000002d8 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
 2d8:	1f 92       	push	r1
 2da:	0f 92       	push	r0
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	0f 92       	push	r0
 2e0:	11 24       	eor	r1, r1
 2e2:	2f 93       	push	r18
 2e4:	3f 93       	push	r19
 2e6:	4f 93       	push	r20
 2e8:	5f 93       	push	r21
 2ea:	6f 93       	push	r22
 2ec:	7f 93       	push	r23
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	af 93       	push	r26
 2f4:	bf 93       	push	r27
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
 2fa:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <_ZN14SoftwareSerial13active_objectE>
 2fe:	f0 91 74 01 	lds	r31, 0x0174	; 0x800174 <_ZN14SoftwareSerial13active_objectE+0x1>
 302:	30 97       	sbiw	r30, 0x00	; 0
 304:	09 f4       	brne	.+2      	; 0x308 <__vector_3+0x30>
 306:	51 c0       	rjmp	.+162    	; 0x3aa <__vector_3+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 308:	96 8d       	ldd	r25, Z+30	; 0x1e
 30a:	a6 85       	ldd	r26, Z+14	; 0x0e
 30c:	b7 85       	ldd	r27, Z+15	; 0x0f
 30e:	85 85       	ldd	r24, Z+13	; 0x0d
 310:	91 ff       	sbrs	r25, 1
 312:	04 c0       	rjmp	.+8      	; 0x31c <__vector_3+0x44>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 314:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 316:	89 23       	and	r24, r25
 318:	29 f4       	brne	.+10     	; 0x324 <__vector_3+0x4c>
 31a:	47 c0       	rjmp	.+142    	; 0x3aa <__vector_3+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 31c:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 31e:	89 23       	and	r24, r25
 320:	09 f0       	breq	.+2      	; 0x324 <__vector_3+0x4c>
 322:	43 c0       	rjmp	.+134    	; 0x3aa <__vector_3+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
 324:	a3 89       	ldd	r26, Z+19	; 0x13
 326:	b4 89       	ldd	r27, Z+20	; 0x14
 328:	9c 91       	ld	r25, X
 32a:	85 89       	ldd	r24, Z+21	; 0x15
 32c:	80 95       	com	r24
 32e:	89 23       	and	r24, r25
 330:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 332:	86 89       	ldd	r24, Z+22	; 0x16
 334:	97 89       	ldd	r25, Z+23	; 0x17
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <__vector_3+0x5e>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
 33a:	60 8d       	ldd	r22, Z+24	; 0x18
 33c:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 33e:	a6 85       	ldd	r26, Z+14	; 0x0e
 340:	b7 85       	ldd	r27, Z+15	; 0x0f
 342:	55 85       	ldd	r21, Z+13	; 0x0d
 344:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	cb 01       	movw	r24, r22
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <__vector_3+0x72>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
 34e:	82 2f       	mov	r24, r18
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	95 95       	asr	r25
 354:	87 95       	ror	r24
 356:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 358:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
 35a:	45 23       	and	r20, r21
 35c:	09 f0       	breq	.+2      	; 0x360 <__vector_3+0x88>
        d |= 0x80;
 35e:	20 68       	ori	r18, 0x80	; 128
 360:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
 362:	91 f7       	brne	.-28     	; 0x348 <__vector_3+0x70>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
 364:	86 8d       	ldd	r24, Z+30	; 0x1e
 366:	81 fd       	sbrc	r24, 1
      d = ~d;
 368:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
 36a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	8f 73       	andi	r24, 0x3F	; 63
 374:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
 376:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <_ZN14SoftwareSerial20_receive_buffer_headE>
 37a:	38 17       	cp	r19, r24
 37c:	49 f0       	breq	.+18     	; 0x390 <__vector_3+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
 37e:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	ad 5c       	subi	r26, 0xCD	; 205
 386:	be 4f       	sbci	r27, 0xFE	; 254
 388:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
 38a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 38e:	03 c0       	rjmp	.+6      	; 0x396 <__vector_3+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
 390:	86 8d       	ldd	r24, Z+30	; 0x1e
 392:	81 60       	ori	r24, 0x01	; 1
 394:	86 8f       	std	Z+30, r24	; 0x1e
 396:	82 8d       	ldd	r24, Z+26	; 0x1a
 398:	93 8d       	ldd	r25, Z+27	; 0x1b
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <__vector_3+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
 39e:	a3 89       	ldd	r26, Z+19	; 0x13
 3a0:	b4 89       	ldd	r27, Z+20	; 0x14
 3a2:	9c 91       	ld	r25, X
 3a4:	85 89       	ldd	r24, Z+21	; 0x15
 3a6:	89 2b       	or	r24, r25
 3a8:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
 3cc:	24 e0       	ldi	r18, 0x04	; 4
 3ce:	31 e0       	ldi	r19, 0x01	; 1
 3d0:	fc 01       	movw	r30, r24
 3d2:	31 83       	std	Z+1, r19	; 0x01
 3d4:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
 3d6:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_ZN14SoftwareSerial13stopListeningEv>

000003da <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
 3e2:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output high. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
 3e4:	6e 8d       	ldd	r22, Y+30	; 0x1e
 3e6:	66 95       	lsr	r22
 3e8:	61 70       	andi	r22, 0x01	; 1
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	68 27       	eor	r22, r24
 3ee:	81 2f       	mov	r24, r17
 3f0:	0e 94 8e 03 	call	0x71c	; 0x71c <digitalWrite>
  pinMode(tx, OUTPUT);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	81 2f       	mov	r24, r17
 3f8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
 3fc:	81 2f       	mov	r24, r17
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	fc 01       	movw	r30, r24
 402:	e4 58       	subi	r30, 0x84	; 132
 404:	ff 4f       	sbci	r31, 0xFF	; 255
 406:	e4 91       	lpm	r30, Z
 408:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
 40a:	fc 01       	movw	r30, r24
 40c:	e0 57       	subi	r30, 0x70	; 112
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	e2 55       	subi	r30, 0x52	; 82
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	85 91       	lpm	r24, Z+
 41e:	94 91       	lpm	r25, Z
 420:	9a 8b       	std	Y+18, r25	; 0x12
 422:	89 8b       	std	Y+17, r24	; 0x11
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	08 95       	ret

0000042c <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	ec 01       	movw	r28, r24
 434:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	81 2f       	mov	r24, r17
 43a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <pinMode>
  if (!_inverse_logic)
 43e:	8e 8d       	ldd	r24, Y+30	; 0x1e
 440:	81 fd       	sbrc	r24, 1
 442:	04 c0       	rjmp	.+8      	; 0x44c <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	81 2f       	mov	r24, r17
 448:	0e 94 8e 03 	call	0x71c	; 0x71c <digitalWrite>
  _receivePin = rx;
 44c:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
 44e:	81 2f       	mov	r24, r17
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	e4 58       	subi	r30, 0x84	; 132
 456:	ff 4f       	sbci	r31, 0xFF	; 255
 458:	e4 91       	lpm	r30, Z
 45a:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
 45c:	fc 01       	movw	r30, r24
 45e:	e0 57       	subi	r30, 0x70	; 112
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	ec 55       	subi	r30, 0x5C	; 92
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
 46e:	85 91       	lpm	r24, Z+
 470:	94 91       	lpm	r25, Z
 472:	9f 87       	std	Y+15, r25	; 0x0f
 474:	8e 87       	std	Y+14, r24	; 0x0e
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	08 95       	ret

0000047e <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
 486:	16 2f       	mov	r17, r22
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 488:	1b 82       	std	Y+3, r1	; 0x03
 48a:	1a 82       	std	Y+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 48c:	88 ee       	ldi	r24, 0xE8	; 232
 48e:	93 e0       	ldi	r25, 0x03	; 3
 490:	a0 e0       	ldi	r26, 0x00	; 0
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	8c 83       	std	Y+4, r24	; 0x04
 496:	9d 83       	std	Y+5, r25	; 0x05
 498:	ae 83       	std	Y+6, r26	; 0x06
 49a:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
 49c:	84 e0       	ldi	r24, 0x04	; 4
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	99 83       	std	Y+1, r25	; 0x01
 4a2:	88 83       	st	Y, r24
 4a4:	1f 8a       	std	Y+23, r1	; 0x17
 4a6:	1e 8a       	std	Y+22, r1	; 0x16
 4a8:	19 8e       	std	Y+25, r1	; 0x19
 4aa:	18 8e       	std	Y+24, r1	; 0x18
 4ac:	1b 8e       	std	Y+27, r1	; 0x1b
 4ae:	1a 8e       	std	Y+26, r1	; 0x1a
 4b0:	1d 8e       	std	Y+29, r1	; 0x1d
 4b2:	1c 8e       	std	Y+28, r1	; 0x1c
 4b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
 4b6:	8e 7f       	andi	r24, 0xFE	; 254
 4b8:	20 fb       	bst	r18, 0
 4ba:	81 f9       	bld	r24, 1
 4bc:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
 4be:	64 2f       	mov	r22, r20
 4c0:	ce 01       	movw	r24, r28
 4c2:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
 4c6:	61 2f       	mov	r22, r17
 4c8:	ce 01       	movw	r24, r28
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
{
  setTX(transmitPin);
  setRX(receivePin);
 4d0:	0c 94 16 02 	jmp	0x42c	; 0x42c <_ZN14SoftwareSerial5setRXEh>

000004d4 <initVariant>:
 4d4:	08 95       	ret

000004d6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 4d6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <init>

	initVariant();
 4da:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 4de:	0e 94 8d 00 	call	0x11a	; 0x11a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 4e2:	c0 e0       	ldi	r28, 0x00	; 0
 4e4:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 4e6:	0e 94 90 00 	call	0x120	; 0x120 <loop>
		if (serialEventRun) serialEventRun();
 4ea:	20 97       	sbiw	r28, 0x00	; 0
 4ec:	e1 f3       	breq	.-8      	; 0x4e6 <main+0x10>
 4ee:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4f2:	f9 cf       	rjmp	.-14     	; 0x4e6 <main+0x10>

000004f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 4f4:	cf 92       	push	r12
 4f6:	df 92       	push	r13
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	6c 01       	movw	r12, r24
 506:	7a 01       	movw	r14, r20
 508:	8b 01       	movw	r16, r22
  size_t n = 0;
 50a:	c0 e0       	ldi	r28, 0x00	; 0
 50c:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 50e:	ce 15       	cp	r28, r14
 510:	df 05       	cpc	r29, r15
 512:	81 f0       	breq	.+32     	; 0x534 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 514:	d8 01       	movw	r26, r16
 516:	6d 91       	ld	r22, X+
 518:	8d 01       	movw	r16, r26
 51a:	d6 01       	movw	r26, r12
 51c:	ed 91       	ld	r30, X+
 51e:	fc 91       	ld	r31, X
 520:	01 90       	ld	r0, Z+
 522:	f0 81       	ld	r31, Z
 524:	e0 2d       	mov	r30, r0
 526:	c6 01       	movw	r24, r12
 528:	09 95       	icall
 52a:	89 2b       	or	r24, r25
 52c:	11 f0       	breq	.+4      	; 0x532 <_ZN5Print5writeEPKhj+0x3e>
 52e:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 530:	ee cf       	rjmp	.-36     	; 0x50e <_ZN5Print5writeEPKhj+0x1a>
 532:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 534:	c7 01       	movw	r24, r14
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	df 90       	pop	r13
 544:	cf 90       	pop	r12
 546:	08 95       	ret

00000548 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 548:	1f 92       	push	r1
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	0f 92       	push	r0
 550:	11 24       	eor	r1, r1
 552:	2f 93       	push	r18
 554:	3f 93       	push	r19
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <timer0_millis>
 562:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <timer0_millis+0x1>
 566:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <timer0_millis+0x2>
 56a:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <timer0_millis+0x3>
 56e:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <timer0_fract>
 572:	23 e0       	ldi	r18, 0x03	; 3
 574:	23 0f       	add	r18, r19
 576:	2d 37       	cpi	r18, 0x7D	; 125
 578:	20 f4       	brcc	.+8      	; 0x582 <__vector_16+0x3a>
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	a1 1d       	adc	r26, r1
 57e:	b1 1d       	adc	r27, r1
 580:	05 c0       	rjmp	.+10     	; 0x58c <__vector_16+0x44>
 582:	26 e8       	ldi	r18, 0x86	; 134
 584:	23 0f       	add	r18, r19
 586:	02 96       	adiw	r24, 0x02	; 2
 588:	a1 1d       	adc	r26, r1
 58a:	b1 1d       	adc	r27, r1
 58c:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <timer0_fract>
 590:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <timer0_millis>
 594:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <timer0_millis+0x1>
 598:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <timer0_millis+0x2>
 59c:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <timer0_millis+0x3>
 5a0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <timer0_overflow_count>
 5a4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <timer0_overflow_count+0x1>
 5a8:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <timer0_overflow_count+0x2>
 5ac:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <timer0_overflow_count+0x3>
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	a1 1d       	adc	r26, r1
 5b4:	b1 1d       	adc	r27, r1
 5b6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <timer0_overflow_count>
 5ba:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <timer0_overflow_count+0x1>
 5be:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <timer0_overflow_count+0x2>
 5c2:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <timer0_overflow_count+0x3>
 5c6:	bf 91       	pop	r27
 5c8:	af 91       	pop	r26
 5ca:	9f 91       	pop	r25
 5cc:	8f 91       	pop	r24
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 5dc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 5de:	84 b5       	in	r24, 0x24	; 36
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 5e4:	84 b5       	in	r24, 0x24	; 36
 5e6:	81 60       	ori	r24, 0x01	; 1
 5e8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 5ea:	85 b5       	in	r24, 0x25	; 37
 5ec:	82 60       	ori	r24, 0x02	; 2
 5ee:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 5f0:	85 b5       	in	r24, 0x25	; 37
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 5f6:	ee e6       	ldi	r30, 0x6E	; 110
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	81 60       	ori	r24, 0x01	; 1
 5fe:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 600:	e1 e8       	ldi	r30, 0x81	; 129
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 606:	80 81       	ld	r24, Z
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 60c:	80 81       	ld	r24, Z
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 612:	e0 e8       	ldi	r30, 0x80	; 128
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	81 60       	ori	r24, 0x01	; 1
 61a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 61c:	e1 eb       	ldi	r30, 0xB1	; 177
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	84 60       	ori	r24, 0x04	; 4
 624:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 626:	e0 eb       	ldi	r30, 0xB0	; 176
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 630:	ea e7       	ldi	r30, 0x7A	; 122
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	84 60       	ori	r24, 0x04	; 4
 638:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 63a:	80 81       	ld	r24, Z
 63c:	82 60       	ori	r24, 0x02	; 2
 63e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 640:	80 81       	ld	r24, Z
 642:	81 60       	ori	r24, 0x01	; 1
 644:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 646:	80 81       	ld	r24, Z
 648:	80 68       	ori	r24, 0x80	; 128
 64a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 64c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 650:	08 95       	ret

00000652 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 652:	83 30       	cpi	r24, 0x03	; 3
 654:	81 f0       	breq	.+32     	; 0x676 <turnOffPWM+0x24>
 656:	28 f4       	brcc	.+10     	; 0x662 <turnOffPWM+0x10>
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	99 f0       	breq	.+38     	; 0x682 <turnOffPWM+0x30>
 65c:	82 30       	cpi	r24, 0x02	; 2
 65e:	a1 f0       	breq	.+40     	; 0x688 <turnOffPWM+0x36>
 660:	08 95       	ret
 662:	87 30       	cpi	r24, 0x07	; 7
 664:	a9 f0       	breq	.+42     	; 0x690 <turnOffPWM+0x3e>
 666:	88 30       	cpi	r24, 0x08	; 8
 668:	b9 f0       	breq	.+46     	; 0x698 <turnOffPWM+0x46>
 66a:	84 30       	cpi	r24, 0x04	; 4
 66c:	d1 f4       	brne	.+52     	; 0x6a2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 66e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 672:	8f 7d       	andi	r24, 0xDF	; 223
 674:	03 c0       	rjmp	.+6      	; 0x67c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 676:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 67a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 67c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 680:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 682:	84 b5       	in	r24, 0x24	; 36
 684:	8f 77       	andi	r24, 0x7F	; 127
 686:	02 c0       	rjmp	.+4      	; 0x68c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 688:	84 b5       	in	r24, 0x24	; 36
 68a:	8f 7d       	andi	r24, 0xDF	; 223
 68c:	84 bd       	out	0x24, r24	; 36
 68e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 690:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 694:	8f 77       	andi	r24, 0x7F	; 127
 696:	03 c0       	rjmp	.+6      	; 0x69e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 698:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 69c:	8f 7d       	andi	r24, 0xDF	; 223
 69e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 6a2:	08 95       	ret

000006a4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	fc 01       	movw	r30, r24
 6ac:	e4 58       	subi	r30, 0x84	; 132
 6ae:	ff 4f       	sbci	r31, 0xFF	; 255
 6b0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 6b2:	fc 01       	movw	r30, r24
 6b4:	e0 57       	subi	r30, 0x70	; 112
 6b6:	ff 4f       	sbci	r31, 0xFF	; 255
 6b8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 6ba:	88 23       	and	r24, r24
 6bc:	61 f1       	breq	.+88     	; 0x716 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	fc 01       	movw	r30, r24
 6c6:	e8 54       	subi	r30, 0x48	; 72
 6c8:	ff 4f       	sbci	r31, 0xFF	; 255
 6ca:	c5 91       	lpm	r28, Z+
 6cc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 6ce:	fc 01       	movw	r30, r24
 6d0:	e2 55       	subi	r30, 0x52	; 82
 6d2:	ff 4f       	sbci	r31, 0xFF	; 255
 6d4:	a5 91       	lpm	r26, Z+
 6d6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 6d8:	61 11       	cpse	r22, r1
 6da:	09 c0       	rjmp	.+18     	; 0x6ee <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 6dc:	9f b7       	in	r25, 0x3f	; 63
                cli();
 6de:	f8 94       	cli
		*reg &= ~bit;
 6e0:	88 81       	ld	r24, Y
 6e2:	20 95       	com	r18
 6e4:	82 23       	and	r24, r18
 6e6:	88 83       	st	Y, r24
		*out &= ~bit;
 6e8:	ec 91       	ld	r30, X
 6ea:	2e 23       	and	r18, r30
 6ec:	0b c0       	rjmp	.+22     	; 0x704 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 6ee:	62 30       	cpi	r22, 0x02	; 2
 6f0:	61 f4       	brne	.+24     	; 0x70a <pinMode+0x66>
		uint8_t oldSREG = SREG;
 6f2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 6f4:	f8 94       	cli
		*reg &= ~bit;
 6f6:	88 81       	ld	r24, Y
 6f8:	32 2f       	mov	r19, r18
 6fa:	30 95       	com	r19
 6fc:	83 23       	and	r24, r19
 6fe:	88 83       	st	Y, r24
		*out |= bit;
 700:	ec 91       	ld	r30, X
 702:	2e 2b       	or	r18, r30
 704:	2c 93       	st	X, r18
		SREG = oldSREG;
 706:	9f bf       	out	0x3f, r25	; 63
 708:	06 c0       	rjmp	.+12     	; 0x716 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 70a:	8f b7       	in	r24, 0x3f	; 63
                cli();
 70c:	f8 94       	cli
		*reg |= bit;
 70e:	e8 81       	ld	r30, Y
 710:	2e 2b       	or	r18, r30
 712:	28 83       	st	Y, r18
		SREG = oldSREG;
 714:	8f bf       	out	0x3f, r24	; 63
	}
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 71c:	1f 93       	push	r17
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	f9 01       	movw	r30, r18
 728:	e8 59       	subi	r30, 0x98	; 152
 72a:	ff 4f       	sbci	r31, 0xFF	; 255
 72c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 72e:	f9 01       	movw	r30, r18
 730:	e4 58       	subi	r30, 0x84	; 132
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 736:	f9 01       	movw	r30, r18
 738:	e0 57       	subi	r30, 0x70	; 112
 73a:	ff 4f       	sbci	r31, 0xFF	; 255
 73c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 73e:	cc 23       	and	r28, r28
 740:	c1 f0       	breq	.+48     	; 0x772 <digitalWrite+0x56>
 742:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 744:	81 11       	cpse	r24, r1
 746:	0e 94 29 03 	call	0x652	; 0x652 <turnOffPWM>

	out = portOutputRegister(port);
 74a:	ec 2f       	mov	r30, r28
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	ee 0f       	add	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	e2 55       	subi	r30, 0x52	; 82
 754:	ff 4f       	sbci	r31, 0xFF	; 255
 756:	a5 91       	lpm	r26, Z+
 758:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 75a:	9f b7       	in	r25, 0x3f	; 63
	cli();
 75c:	f8 94       	cli

	if (val == LOW) {
 75e:	11 11       	cpse	r17, r1
 760:	04 c0       	rjmp	.+8      	; 0x76a <digitalWrite+0x4e>
		*out &= ~bit;
 762:	8c 91       	ld	r24, X
 764:	d0 95       	com	r29
 766:	d8 23       	and	r29, r24
 768:	02 c0       	rjmp	.+4      	; 0x76e <digitalWrite+0x52>
	} else {
		*out |= bit;
 76a:	ec 91       	ld	r30, X
 76c:	de 2b       	or	r29, r30
 76e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 770:	9f bf       	out	0x3f, r25	; 63
}
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	08 95       	ret

0000077a <__divmodhi4>:
 77a:	97 fb       	bst	r25, 7
 77c:	07 2e       	mov	r0, r23
 77e:	16 f4       	brtc	.+4      	; 0x784 <__divmodhi4+0xa>
 780:	00 94       	com	r0
 782:	07 d0       	rcall	.+14     	; 0x792 <__divmodhi4_neg1>
 784:	77 fd       	sbrc	r23, 7
 786:	09 d0       	rcall	.+18     	; 0x79a <__divmodhi4_neg2>
 788:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__udivmodhi4>
 78c:	07 fc       	sbrc	r0, 7
 78e:	05 d0       	rcall	.+10     	; 0x79a <__divmodhi4_neg2>
 790:	3e f4       	brtc	.+14     	; 0x7a0 <__divmodhi4_exit>

00000792 <__divmodhi4_neg1>:
 792:	90 95       	com	r25
 794:	81 95       	neg	r24
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	08 95       	ret

0000079a <__divmodhi4_neg2>:
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255

000007a0 <__divmodhi4_exit>:
 7a0:	08 95       	ret

000007a2 <__udivmodhi4>:
 7a2:	aa 1b       	sub	r26, r26
 7a4:	bb 1b       	sub	r27, r27
 7a6:	51 e1       	ldi	r21, 0x11	; 17
 7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <__udivmodhi4_ep>

000007aa <__udivmodhi4_loop>:
 7aa:	aa 1f       	adc	r26, r26
 7ac:	bb 1f       	adc	r27, r27
 7ae:	a6 17       	cp	r26, r22
 7b0:	b7 07       	cpc	r27, r23
 7b2:	10 f0       	brcs	.+4      	; 0x7b8 <__udivmodhi4_ep>
 7b4:	a6 1b       	sub	r26, r22
 7b6:	b7 0b       	sbc	r27, r23

000007b8 <__udivmodhi4_ep>:
 7b8:	88 1f       	adc	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	5a 95       	dec	r21
 7be:	a9 f7       	brne	.-22     	; 0x7aa <__udivmodhi4_loop>
 7c0:	80 95       	com	r24
 7c2:	90 95       	com	r25
 7c4:	bc 01       	movw	r22, r24
 7c6:	cd 01       	movw	r24, r26
 7c8:	08 95       	ret

000007ca <__tablejump2__>:
 7ca:	ee 0f       	add	r30, r30
 7cc:	ff 1f       	adc	r31, r31
 7ce:	05 90       	lpm	r0, Z+
 7d0:	f4 91       	lpm	r31, Z
 7d2:	e0 2d       	mov	r30, r0
 7d4:	09 94       	ijmp

000007d6 <__do_global_dtors>:
 7d6:	10 e0       	ldi	r17, 0x00	; 0
 7d8:	c2 e6       	ldi	r28, 0x62	; 98
 7da:	d0 e0       	ldi	r29, 0x00	; 0
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <__do_global_dtors+0x10>
 7de:	fe 01       	movw	r30, r28
 7e0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__tablejump2__>
 7e4:	21 96       	adiw	r28, 0x01	; 1
 7e6:	c3 36       	cpi	r28, 0x63	; 99
 7e8:	d1 07       	cpc	r29, r17
 7ea:	c9 f7       	brne	.-14     	; 0x7de <__do_global_dtors+0x8>
 7ec:	f8 94       	cli

000007ee <__stop_program>:
 7ee:	ff cf       	rjmp	.-2      	; 0x7ee <__stop_program>
