
dojo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00001144  000011d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001144  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000131  0080017e  0080017e  00001256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b06a  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021f1  00000000  00000000  0000c71a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025fd  00000000  00000000  0000e90b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b48  00000000  00000000  00010f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028c5  00000000  00000000  00011a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000409a  00000000  00000000  00014315  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  000183af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_3>
      10:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_3>
      14:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_18>
      4c:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	c4 00       	.word	0x00c4	; ????
      c4:	38 05       	cpc	r19, r8

000000c6 <__ctors_end>:
      c6:	d2 00       	.word	0x00d2	; ????

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e4 e4       	ldi	r30, 0x44	; 68
      dc:	f1 e1       	ldi	r31, 0x11	; 17
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ae 37       	cpi	r26, 0x7E	; 126
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	ae e7       	ldi	r26, 0x7E	; 126
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	af 3a       	cpi	r26, 0xAF	; 175
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 8f 08 	call	0x111e	; 0x111e <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 66 05 	call	0xacc	; 0xacc <main>
     114:	0c 94 95 08 	jmp	0x112a	; 0x112a <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:

// state init
void setup()
{
	// all Baudrates to 9600 of UART-Connection
	mySerial.begin(9600);
     11c:	40 e8       	ldi	r20, 0x80	; 128
     11e:	55 e2       	ldi	r21, 0x25	; 37
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	8d e9       	ldi	r24, 0x9D	; 157
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 48 04 	call	0x890	; 0x890 <_ZN14SoftwareSerial5beginEl>
	BTSerial.begin(9600);	
     12c:	40 e8       	ldi	r20, 0x80	; 128
     12e:	55 e2       	ldi	r21, 0x25	; 37
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	8e e7       	ldi	r24, 0x7E	; 126
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 48 04 	call	0x890	; 0x890 <_ZN14SoftwareSerial5beginEl>
	// Mux- and Vibro Ports to output
	DDRC = 0xff;	
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	87 b9       	out	0x07, r24	; 7
	// For WTV setting ports individual
	DDRB |= 0b00111011;	
     140:	84 b1       	in	r24, 0x04	; 4
     142:	8b 63       	ori	r24, 0x3B	; 59
     144:	84 b9       	out	0x04, r24	; 4
	// buttons as inputs
	DDRD |= 0b00010000;
     146:	54 9a       	sbi	0x0a, 4	; 10
	multiplexController(FTDI_PATH);	
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z19multiplexControlleri>
	pinSetupWTV();		
     150:	0e 94 23 01 	call	0x246	; 0x246 <_Z11pinSetupWTVv>
	//Setup LED Power on
	digitalWrite(STATUS_LED, LOW);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	84 e0       	ldi	r24, 0x04	; 4
     158:	0e 94 22 07 	call	0xe44	; 0xe44 <digitalWrite>
	// get first response from the hm-11
	firstResponse();
     15c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_Z13firstResponsev>

00000160 <_Z17dojo_statemachinev>:
	static enum State state = SCAN;
	
	switch (state)
	{
	case SCAN:
		scan();
     160:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_Z4scanv>

00000164 <loop>:
}

void loop()
{
// 	vibroController(true);
	mySerial.println("passed");
     164:	6a e0       	ldi	r22, 0x0A	; 10
     166:	71 e0       	ldi	r23, 0x01	; 1
     168:	8d e9       	ldi	r24, 0x9D	; 157
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	0e 94 b8 05 	call	0xb70	; 0xb70 <_ZN5Print7printlnEPKc>
 	dojo_statemachine();
     170:	0e 94 b0 00 	call	0x160	; 0x160 <_Z17dojo_statemachinev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     174:	2f ef       	ldi	r18, 0xFF	; 255
     176:	81 e1       	ldi	r24, 0x11	; 17
     178:	9a e7       	ldi	r25, 0x7A	; 122
     17a:	21 50       	subi	r18, 0x01	; 1
     17c:	80 40       	sbci	r24, 0x00	; 0
     17e:	90 40       	sbci	r25, 0x00	; 0
     180:	e1 f7       	brne	.-8      	; 0x17a <loop+0x16>
     182:	00 c0       	rjmp	.+0      	; 0x184 <loop+0x20>
     184:	00 00       	nop
     186:	08 95       	ret

00000188 <_GLOBAL__sub_I_mySerial>:
ï»¿#include "include/Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	8d e9       	ldi	r24, 0x9D	; 157
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 1d 04 	call	0x83a	; 0x83a <_ZN14SoftwareSerialC1Ehhb>
SoftwareSerial BTSerial(2,3);	//(RX | TX) - PINS
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	43 e0       	ldi	r20, 0x03	; 3
     19a:	62 e0       	ldi	r22, 0x02	; 2
     19c:	8e e7       	ldi	r24, 0x7E	; 126
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0c 94 1d 04 	jmp	0x83a	; 0x83a <_ZN14SoftwareSerialC1Ehhb>

000001a4 <_GLOBAL__sub_D_mySerial>:
     1a4:	8e e7       	ldi	r24, 0x7E	; 126
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN14SoftwareSerialD1Ev>
ï»¿#include "include/Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
     1ac:	8d e9       	ldi	r24, 0x9D	; 157
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	0c 94 c4 03 	jmp	0x788	; 0x788 <_ZN14SoftwareSerialD1Ev>

000001b4 <_Z19multiplexControlleri>:
     1b4:	98 b1       	in	r25, 0x08	; 8
     1b6:	18 b8       	out	0x08, r1	; 8
     1b8:	98 b1       	in	r25, 0x08	; 8
     1ba:	89 2b       	or	r24, r25
     1bc:	88 b9       	out	0x08, r24	; 8
     1be:	08 95       	ret

000001c0 <_Z15vibroControllerb>:
     1c0:	88 23       	and	r24, r24
     1c2:	51 f0       	breq	.+20     	; 0x1d8 <_Z15vibroControllerb+0x18>
     1c4:	45 9a       	sbi	0x08, 5	; 8
     1c6:	2f ef       	ldi	r18, 0xFF	; 255
     1c8:	84 e3       	ldi	r24, 0x34	; 52
     1ca:	9c e0       	ldi	r25, 0x0C	; 12
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	80 40       	sbci	r24, 0x00	; 0
     1d0:	90 40       	sbci	r25, 0x00	; 0
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <_Z15vibroControllerb+0xc>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z15vibroControllerb+0x16>
     1d6:	00 00       	nop
     1d8:	98 b1       	in	r25, 0x08	; 8
     1da:	80 e2       	ldi	r24, 0x20	; 32
     1dc:	89 27       	eor	r24, r25
     1de:	88 b9       	out	0x08, r24	; 8
     1e0:	08 95       	ret

000001e2 <_Z13testComparingj>:
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
     1e8:	4a e0       	ldi	r20, 0x0A	; 10
     1ea:	50 e0       	ldi	r21, 0x00	; 0
     1ec:	bc 01       	movw	r22, r24
     1ee:	8d e9       	ldi	r24, 0x9D	; 157
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN5Print7printlnEji>
     1f6:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_ZZ13testComparingjE7compare>
     1fa:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <_ZZ13testComparingjE7compare+0x1>
     1fe:	c8 17       	cp	r28, r24
     200:	d9 07       	cpc	r29, r25
     202:	f1 f0       	breq	.+60     	; 0x240 <_Z13testComparingj+0x5e>
     204:	20 97       	sbiw	r28, 0x00	; 0
     206:	e1 f0       	breq	.+56     	; 0x240 <_Z13testComparingj+0x5e>
     208:	d0 93 bd 01 	sts	0x01BD, r29	; 0x8001bd <_ZZ13testComparingjE7compare+0x1>
     20c:	c0 93 bc 01 	sts	0x01BC, r28	; 0x8001bc <_ZZ13testComparingjE7compare>
     210:	4a e0       	ldi	r20, 0x0A	; 10
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	be 01       	movw	r22, r28
     216:	8d e9       	ldi	r24, 0x9D	; 157
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN5Print7printlnEji>
     21e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <closest_Beacon+0x1>
     222:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <closest_Beacon>
     226:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <closest_Beacon+0x5>
     22a:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <closest_Beacon+0x4>
     22e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <closest_Beacon+0x3>
     232:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <closest_Beacon+0x2>
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_Z15vibroControllerb>
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <_Z11pinSetupWTVv>:
	_delay_ms(500);
}

void pinSetupWTV()
{
	pinMode(WTV_RESET, OUTPUT);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	89 e0       	ldi	r24, 0x09	; 9
     24a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
	digitalWrite(WTV_RESET, LOW);
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	89 e0       	ldi	r24, 0x09	; 9
     252:	0e 94 22 07 	call	0xe44	; 0xe44 <digitalWrite>
	pinMode(WTV_DOUT, OUTPUT);
     256:	61 e0       	ldi	r22, 0x01	; 1
     258:	8c e0       	ldi	r24, 0x0C	; 12
     25a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
	digitalWrite(WTV_DOUT, HIGH);
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	0e 94 22 07 	call	0xe44	; 0xe44 <digitalWrite>
	pinMode(WTV_CLK, OUTPUT);
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	8d e0       	ldi	r24, 0x0D	; 13
     26a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
	digitalWrite(WTV_CLK, HIGH);
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	8d e0       	ldi	r24, 0x0D	; 13
     272:	0c 94 22 07 	jmp	0xe44	; 0xe44 <digitalWrite>

00000276 <_Z11sendCommandi.part.2>:
	}
	firstBeacon = false;
	return closest_Beacon.UUID_value;
}

void sendCommand(int com)
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
	switch(com)
	{
		case 1:
		for(int i = 0; i < 2; i++)
		{
			BTSerial.write(command_AT[i]);
     27a:	c8 e0       	ldi	r28, 0x08	; 8
     27c:	d1 e0       	ldi	r29, 0x01	; 1
     27e:	68 81       	ld	r22, Y
     280:	8e e7       	ldi	r24, 0x7E	; 126
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN14SoftwareSerial5writeEh>
     288:	69 81       	ldd	r22, Y+1	; 0x01
     28a:	8e e7       	ldi	r24, 0x7E	; 126
     28c:	91 e0       	ldi	r25, 0x01	; 1
		break;
		default:
		//do nothing
		break;
	}
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
	switch(com)
	{
		case 1:
		for(int i = 0; i < 2; i++)
		{
			BTSerial.write(command_AT[i]);
     292:	0c 94 8a 02 	jmp	0x514	; 0x514 <_ZN14SoftwareSerial5writeEh>

00000296 <_Z11sendCommandi>:
	firstBeacon = false;
	return closest_Beacon.UUID_value;
}

void sendCommand(int com)
{
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
	switch(com)
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	91 05       	cpc	r25, r1
     29e:	29 f0       	breq	.+10     	; 0x2aa <_Z11sendCommandi+0x14>
     2a0:	02 97       	sbiw	r24, 0x02	; 2
     2a2:	81 f4       	brne	.+32     	; 0x2c4 <_Z11sendCommandi+0x2e>
     2a4:	c0 e0       	ldi	r28, 0x00	; 0
     2a6:	d1 e0       	ldi	r29, 0x01	; 1
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <_Z11sendCommandi+0x1c>
		break;
		default:
		//do nothing
		break;
	}
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	0c 94 3b 01 	jmp	0x276	; 0x276 <_Z11sendCommandi.part.2>
		}
		break;
		case 2:
		for(int i = 0; i < 8; i++)
		{
			BTSerial.write(command_ATDISI[i]);
     2b2:	69 91       	ld	r22, Y+
     2b4:	8e e7       	ldi	r24, 0x7E	; 126
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 8a 02 	call	0x514	; 0x514 <_ZN14SoftwareSerial5writeEh>
		{
			BTSerial.write(command_AT[i]);
		}
		break;
		case 2:
		for(int i = 0; i < 8; i++)
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	c8 30       	cpi	r28, 0x08	; 8
     2c0:	d8 07       	cpc	r29, r24
     2c2:	b9 f7       	brne	.-18     	; 0x2b2 <_Z11sendCommandi+0x1c>
		break;
		default:
		//do nothing
		break;
	}
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <_Z10readAnswerv>:

int readAnswer()
{
	int incomingByte;
	
	while(!BTSerial.available())
     2ca:	8e e7       	ldi	r24, 0x7E	; 126
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN14SoftwareSerial9availableEv>
     2d2:	89 2b       	or	r24, r25
     2d4:	d1 f3       	breq	.-12     	; 0x2ca <_Z10readAnswerv>
	{/*wait until datas are available to read*/}
	
	incomingByte = BTSerial.read();
     2d6:	8e e7       	ldi	r24, 0x7E	; 126
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_ZN14SoftwareSerial4readEv>

000002de <_Z13firstResponsev>:
char command_ATDISI[8] = {'A','T','+','D','I','S','I','?'};
char endString[8];

void firstResponse()
{
	while(!BTSerial.available())
     2de:	8e e7       	ldi	r24, 0x7E	; 126
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN14SoftwareSerial9availableEv>
     2e6:	89 2b       	or	r24, r25
     2e8:	99 f4       	brne	.+38     	; 0x310 <_Z13firstResponsev+0x32>
     2ea:	0e 94 3b 01 	call	0x276	; 0x276 <_Z11sendCommandi.part.2>
     2ee:	2f ef       	ldi	r18, 0xFF	; 255
     2f0:	88 e0       	ldi	r24, 0x08	; 8
     2f2:	9d e3       	ldi	r25, 0x3D	; 61
     2f4:	21 50       	subi	r18, 0x01	; 1
     2f6:	80 40       	sbci	r24, 0x00	; 0
     2f8:	90 40       	sbci	r25, 0x00	; 0
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <_Z13firstResponsev+0x16>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <_Z13firstResponsev+0x20>
     2fe:	00 00       	nop
     300:	ee cf       	rjmp	.-36     	; 0x2de <_Z13firstResponsev>
	
	while (1)
	{
		if (readAnswer() == 79)
		{
			if (readAnswer() == 75)
     302:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
     306:	8b 34       	cpi	r24, 0x4B	; 75
     308:	91 05       	cpc	r25, r1
     30a:	41 f0       	breq	.+16     	; 0x31c <_Z13firstResponsev+0x3e>
			{
				break;
			}
			else
			{
				firstResponse();
     30c:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z13firstResponsev>
		_delay_ms(2500);
	}
	
	while (1)
	{
		if (readAnswer() == 79)
     310:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
     314:	8f 34       	cpi	r24, 0x4F	; 79
     316:	91 05       	cpc	r25, r1
     318:	c9 f7       	brne	.-14     	; 0x30c <_Z13firstResponsev+0x2e>
     31a:	f3 cf       	rjmp	.-26     	; 0x302 <_Z13firstResponsev+0x24>
     31c:	08 95       	ret

0000031e <_Z12readValueDeci>:
	
	return beacon;
}

unsigned int readValueDec(int array_length)
{
     31e:	cf 92       	push	r12
     320:	df 92       	push	r13
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	6c 01       	movw	r12, r24
	unsigned int value = 0;
	
	for(int i = 0; i < array_length; i++)
     32e:	00 e0       	ldi	r16, 0x00	; 0
     330:	10 e0       	ldi	r17, 0x00	; 0
	return beacon;
}

unsigned int readValueDec(int array_length)
{
	unsigned int value = 0;
     332:	c0 e0       	ldi	r28, 0x00	; 0
     334:	d0 e0       	ldi	r29, 0x00	; 0
     336:	8a e0       	ldi	r24, 0x0A	; 10
     338:	f8 2e       	mov	r15, r24
	
	for(int i = 0; i < array_length; i++)
     33a:	0c 15       	cp	r16, r12
     33c:	1d 05       	cpc	r17, r13
     33e:	74 f4       	brge	.+28     	; 0x35c <_Z12readValueDeci+0x3e>
	{
		value = (value * 10) + (readAnswer() - '0');
     340:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
     344:	fc 9e       	mul	r15, r28
     346:	90 01       	movw	r18, r0
     348:	fd 9e       	mul	r15, r29
     34a:	30 0d       	add	r19, r0
     34c:	11 24       	eor	r1, r1
     34e:	e9 01       	movw	r28, r18
     350:	e0 97       	sbiw	r28, 0x30	; 48
     352:	c8 0f       	add	r28, r24
     354:	d9 1f       	adc	r29, r25

unsigned int readValueDec(int array_length)
{
	unsigned int value = 0;
	
	for(int i = 0; i < array_length; i++)
     356:	0f 5f       	subi	r16, 0xFF	; 255
     358:	1f 4f       	sbci	r17, 0xFF	; 255
     35a:	ef cf       	rjmp	.-34     	; 0x33a <_Z12readValueDeci+0x1c>
	{
		value = (value * 10) + (readAnswer() - '0');
	}
	
	return value;
}
     35c:	ce 01       	movw	r24, r28
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	df 90       	pop	r13
     36a:	cf 90       	pop	r12
     36c:	08 95       	ret

0000036e <_Z12getUUID_RSSIv>:
		closest_Beacon = buff;
	}
}

struct BEACON_VALUES_DEC getUUID_RSSI()
{
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
     37a:	00 d0       	rcall	.+0      	; 0x37c <_Z12getUUID_RSSIv+0xe>
     37c:	00 d0       	rcall	.+0      	; 0x37e <_Z12getUUID_RSSIv+0x10>
     37e:	00 d0       	rcall	.+0      	; 0x380 <_Z12getUUID_RSSIv+0x12>
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
	BEACON_VALUES_DEC beacon;
	
	while(readAnswer() != ':')
     384:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
     388:	ca 97       	sbiw	r24, 0x3a	; 58
     38a:	e1 f7       	brne	.-8      	; 0x384 <_Z12getUUID_RSSIv+0x16>
	{/*/wait until ':' is recived/*/}
	beacon.UUID_value = readValueDec(UUID_ARRAY_LENGTH);
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z12readValueDeci>
     394:	08 2f       	mov	r16, r24
     396:	e9 2e       	mov	r14, r25
	
	while (readAnswer() != ':')
     398:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
     39c:	ca 97       	sbiw	r24, 0x3a	; 58
     39e:	e1 f7       	brne	.-8      	; 0x398 <_Z12getUUID_RSSIv+0x2a>
	{/*/wait until ":" is recieved/*/}
	beacon.MAJOR_value = readValueDec(MAJOR_ARRAY_LENGTH);
     3a0:	84 e0       	ldi	r24, 0x04	; 4
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z12readValueDeci>
     3a8:	18 2f       	mov	r17, r24
     3aa:	f9 2e       	mov	r15, r25
	
	while(readAnswer() != '-')
     3ac:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
     3b0:	8d 97       	sbiw	r24, 0x2d	; 45
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <_Z12getUUID_RSSIv+0x3e>
	{/*/wait until '-' is recived/*/}
	beacon.RSSI_value = readValueDec(RSSI_ARRAY_LENGTH);
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 8f 01 	call	0x31e	; 0x31e <_Z12readValueDeci>
	
	return beacon;
     3bc:	20 2f       	mov	r18, r16
     3be:	3e 2d       	mov	r19, r14
     3c0:	ac 01       	movw	r20, r24
     3c2:	61 2f       	mov	r22, r17
     3c4:	7f 2d       	mov	r23, r15
}
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	26 96       	adiw	r28, 0x06	; 6
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	08 95       	ret

000003e4 <_Z13compareBeaconv>:
	
	return incomingByte;
}

void compareBeacon()
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <_Z13compareBeaconv+0x6>
     3ea:	00 d0       	rcall	.+0      	; 0x3ec <_Z13compareBeaconv+0x8>
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <_Z13compareBeaconv+0xa>
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	BEACON_VALUES_DEC buff = getUUID_RSSI();
     3f2:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z12getUUID_RSSIv>
     3f6:	29 83       	std	Y+1, r18	; 0x01
     3f8:	3a 83       	std	Y+2, r19	; 0x02
     3fa:	4b 83       	std	Y+3, r20	; 0x03
     3fc:	5c 83       	std	Y+4, r21	; 0x04
     3fe:	6d 83       	std	Y+5, r22	; 0x05
     400:	7e 83       	std	Y+6, r23	; 0x06
	
	if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && firstBeacon == false)
     402:	8d 81       	ldd	r24, Y+5	; 0x05
     404:	9e 81       	ldd	r25, Y+6	; 0x06
     406:	03 97       	sbiw	r24, 0x03	; 3
     408:	e9 f4       	brne	.+58     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	return incomingByte;
}

void compareBeacon()
{
	BEACON_VALUES_DEC buff = getUUID_RSSI();
     40a:	8b 81       	ldd	r24, Y+3	; 0x03
     40c:	9c 81       	ldd	r25, Y+4	; 0x04
	
	if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && firstBeacon == false)
     40e:	8b 35       	cpi	r24, 0x5B	; 91
     410:	91 05       	cpc	r25, r1
     412:	c0 f4       	brcc	.+48     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     414:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <firstBeacon>
     418:	21 11       	cpse	r18, r1
     41a:	04 c0       	rjmp	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		firstBeacon = true;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <firstBeacon>
     422:	07 c0       	rjmp	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		closest_Beacon = buff;
	}
	else if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && closest_Beacon.RSSI_value > buff.RSSI_value && firstBeacon == true)
     424:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <closest_Beacon+0x2>
     428:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <closest_Beacon+0x3>
     42c:	82 17       	cp	r24, r18
     42e:	93 07       	cpc	r25, r19
     430:	48 f4       	brcc	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	{
		closest_Beacon = buff;
     432:	86 e0       	ldi	r24, 0x06	; 6
     434:	fe 01       	movw	r30, r28
     436:	31 96       	adiw	r30, 0x01	; 1
     438:	ae eb       	ldi	r26, 0xBE	; 190
     43a:	b1 e0       	ldi	r27, 0x01	; 1
     43c:	01 90       	ld	r0, Z+
     43e:	0d 92       	st	X+, r0
     440:	8a 95       	dec	r24
     442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	}
}
     444:	26 96       	adiw	r28, 0x06	; 6
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_Z17scanClosestBeaconv>:
		}
	}
}

unsigned int scanClosestBeacon()
{
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
	int compare_koeff;
	sendCommand(2);
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 4b 01 	call	0x296	; 0x296 <_Z11sendCommandi>
	
	while(1)
	{
		compare_koeff = readAnswer();
     464:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
		
		if(compare_koeff == 58)
     468:	8a 33       	cpi	r24, 0x3A	; 58
     46a:	91 05       	cpc	r25, r1
     46c:	c1 f4       	brne	.+48     	; 0x49e <_Z17scanClosestBeaconv+0x48>
     46e:	c8 e0       	ldi	r28, 0x08	; 8
     470:	d0 e0       	ldi	r29, 0x00	; 0
     472:	11 e0       	ldi	r17, 0x01	; 1
		{
			boolean state_zero = true;
			
			for(int i = 0; i < 8; i++)			//search for !=0 in FactoryID
			{
				if(readAnswer() != 48)
     474:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
     478:	c0 97       	sbiw	r24, 0x30	; 48
     47a:	09 f0       	breq	.+2      	; 0x47e <_Z17scanClosestBeaconv+0x28>
				{
					state_zero = false;
     47c:	10 e0       	ldi	r17, 0x00	; 0
     47e:	21 97       	sbiw	r28, 0x01	; 1
		
		if(compare_koeff == 58)
		{
			boolean state_zero = true;
			
			for(int i = 0; i < 8; i++)			//search for !=0 in FactoryID
     480:	c9 f7       	brne	.-14     	; 0x474 <_Z17scanClosestBeaconv+0x1e>
				if(readAnswer() != 48)
				{
					state_zero = false;
				}
			}
			if(state_zero == false)
     482:	11 11       	cpse	r17, r1
     484:	03 c0       	rjmp	.+6      	; 0x48c <_Z17scanClosestBeaconv+0x36>
			{
				state_zero = true;
				compareBeacon();
     486:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z13compareBeaconv>
				continue;
     48a:	ec cf       	rjmp	.-40     	; 0x464 <_Z17scanClosestBeaconv+0xe>
     48c:	c4 e0       	ldi	r28, 0x04	; 4
     48e:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else
			{
				for(int i = 0; i < 4; i++)
				{
					while(readAnswer() != 58)
     490:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z10readAnswerv>
     494:	ca 97       	sbiw	r24, 0x3a	; 58
     496:	e1 f7       	brne	.-8      	; 0x490 <_Z17scanClosestBeaconv+0x3a>
     498:	21 97       	sbiw	r28, 0x01	; 1
				compareBeacon();
				continue;
			}
			else
			{
				for(int i = 0; i < 4; i++)
     49a:	d1 f7       	brne	.-12     	; 0x490 <_Z17scanClosestBeaconv+0x3a>
     49c:	e3 cf       	rjmp	.-58     	; 0x464 <_Z17scanClosestBeaconv+0xe>
					{/*wait until ':' is recived*/}
				}
				continue;
			}
		}
		else if (compare_koeff == 69)
     49e:	85 34       	cpi	r24, 0x45	; 69
     4a0:	91 05       	cpc	r25, r1
     4a2:	01 f7       	brne	.-64     	; 0x464 <_Z17scanClosestBeaconv+0xe>
		{
			// 			countBeacon = 1;
			break;
		}
	}
	firstBeacon = false;
     4a4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <firstBeacon>
	return closest_Beacon.UUID_value;
}
     4a8:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <closest_Beacon>
     4ac:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <closest_Beacon+0x1>
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	08 95       	ret

000004b8 <_Z4scanv>:
	}
}

void scan()
{
	testComparing(scanClosestBeacon());
     4b8:	0e 94 2b 02 	call	0x456	; 0x456 <_Z17scanClosestBeaconv>
     4bc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z13testComparingj>
	mySerial.println("passes testComparing");
     4c0:	65 e3       	ldi	r22, 0x35	; 53
     4c2:	71 e0       	ldi	r23, 0x01	; 1
     4c4:	8d e9       	ldi	r24, 0x9D	; 157
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <_ZN5Print7printlnEPKc>

000004cc <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 95       	ret

000004d2 <_ZN14SoftwareSerial4readEv>:
     4d2:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <_ZN14SoftwareSerial13active_objectE>
     4d6:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <_ZN14SoftwareSerial13active_objectE+0x1>
     4da:	28 17       	cp	r18, r24
     4dc:	39 07       	cpc	r19, r25
     4de:	b9 f4       	brne	.+46     	; 0x50e <_ZN14SoftwareSerial4readEv+0x3c>
     4e0:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     4e4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     4e8:	98 17       	cp	r25, r24
     4ea:	89 f0       	breq	.+34     	; 0x50e <_ZN14SoftwareSerial4readEv+0x3c>
     4ec:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	e9 53       	subi	r30, 0x39	; 57
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	80 81       	ld	r24, Z
     4f8:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	2f 5f       	subi	r18, 0xFF	; 255
     500:	3f 4f       	sbci	r19, 0xFF	; 255
     502:	2f 73       	andi	r18, 0x3F	; 63
     504:	33 27       	eor	r19, r19
     506:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	08 95       	ret
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	9f ef       	ldi	r25, 0xFF	; 255
     512:	08 95       	ret

00000514 <_ZN14SoftwareSerial5writeEh>:
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	dc 01       	movw	r26, r24
     51c:	5c 96       	adiw	r26, 0x1c	; 28
     51e:	8d 91       	ld	r24, X+
     520:	9c 91       	ld	r25, X
     522:	5d 97       	sbiw	r26, 0x1d	; 29
     524:	00 97       	sbiw	r24, 0x00	; 0
     526:	39 f4       	brne	.+14     	; 0x536 <_ZN14SoftwareSerial5writeEh+0x22>
     528:	21 e0       	ldi	r18, 0x01	; 1
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	13 96       	adiw	r26, 0x03	; 3
     52e:	3c 93       	st	X, r19
     530:	2e 93       	st	-X, r18
     532:	12 97       	sbiw	r26, 0x02	; 2
     534:	3b c0       	rjmp	.+118    	; 0x5ac <_ZN14SoftwareSerial5writeEh+0x98>
     536:	51 96       	adiw	r26, 0x11	; 17
     538:	ed 91       	ld	r30, X+
     53a:	fc 91       	ld	r31, X
     53c:	52 97       	sbiw	r26, 0x12	; 18
     53e:	50 96       	adiw	r26, 0x10	; 16
     540:	2c 91       	ld	r18, X
     542:	50 97       	sbiw	r26, 0x10	; 16
     544:	32 2f       	mov	r19, r18
     546:	30 95       	com	r19
     548:	1f b7       	in	r17, 0x3f	; 63
     54a:	5e 96       	adiw	r26, 0x1e	; 30
     54c:	4c 91       	ld	r20, X
     54e:	5e 97       	sbiw	r26, 0x1e	; 30
     550:	74 2f       	mov	r23, r20
     552:	72 70       	andi	r23, 0x02	; 2
     554:	41 fd       	sbrc	r20, 1
     556:	60 95       	com	r22
     558:	f8 94       	cli
     55a:	40 81       	ld	r20, Z
     55c:	77 23       	and	r23, r23
     55e:	11 f0       	breq	.+4      	; 0x564 <_ZN14SoftwareSerial5writeEh+0x50>
     560:	42 2b       	or	r20, r18
     562:	01 c0       	rjmp	.+2      	; 0x566 <_ZN14SoftwareSerial5writeEh+0x52>
     564:	43 23       	and	r20, r19
     566:	40 83       	st	Z, r20
     568:	ec 01       	movw	r28, r24
     56a:	21 97       	sbiw	r28, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <_ZN14SoftwareSerial5writeEh+0x56>
     56e:	48 e0       	ldi	r20, 0x08	; 8
     570:	50 81       	ld	r21, Z
     572:	60 ff       	sbrs	r22, 0
     574:	02 c0       	rjmp	.+4      	; 0x57a <_ZN14SoftwareSerial5writeEh+0x66>
     576:	52 2b       	or	r21, r18
     578:	01 c0       	rjmp	.+2      	; 0x57c <_ZN14SoftwareSerial5writeEh+0x68>
     57a:	53 23       	and	r21, r19
     57c:	50 83       	st	Z, r21
     57e:	ec 01       	movw	r28, r24
     580:	21 97       	sbiw	r28, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <_ZN14SoftwareSerial5writeEh+0x6c>
     584:	66 95       	lsr	r22
     586:	41 50       	subi	r20, 0x01	; 1
     588:	99 f7       	brne	.-26     	; 0x570 <_ZN14SoftwareSerial5writeEh+0x5c>
     58a:	80 81       	ld	r24, Z
     58c:	77 23       	and	r23, r23
     58e:	19 f0       	breq	.+6      	; 0x596 <_ZN14SoftwareSerial5writeEh+0x82>
     590:	83 23       	and	r24, r19
     592:	80 83       	st	Z, r24
     594:	02 c0       	rjmp	.+4      	; 0x59a <_ZN14SoftwareSerial5writeEh+0x86>
     596:	28 2b       	or	r18, r24
     598:	20 83       	st	Z, r18
     59a:	1f bf       	out	0x3f, r17	; 63
     59c:	5c 96       	adiw	r26, 0x1c	; 28
     59e:	8d 91       	ld	r24, X+
     5a0:	9c 91       	ld	r25, X
     5a2:	5d 97       	sbiw	r26, 0x1d	; 29
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <_ZN14SoftwareSerial5writeEh+0x90>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	08 95       	ret

000005b4 <_ZN14SoftwareSerial5flushEv>:
     5b4:	08 95       	ret

000005b6 <_ZN14SoftwareSerial4peekEv>:
     5b6:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <_ZN14SoftwareSerial13active_objectE>
     5ba:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <_ZN14SoftwareSerial13active_objectE+0x1>
     5be:	28 17       	cp	r18, r24
     5c0:	39 07       	cpc	r19, r25
     5c2:	71 f4       	brne	.+28     	; 0x5e0 <_ZN14SoftwareSerial4peekEv+0x2a>
     5c4:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     5c8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     5cc:	98 17       	cp	r25, r24
     5ce:	41 f0       	breq	.+16     	; 0x5e0 <_ZN14SoftwareSerial4peekEv+0x2a>
     5d0:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	e9 53       	subi	r30, 0x39	; 57
     5d8:	fe 4f       	sbci	r31, 0xFE	; 254
     5da:	80 81       	ld	r24, Z
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	08 95       	ret
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	9f ef       	ldi	r25, 0xFF	; 255
     5e4:	08 95       	ret

000005e6 <_ZN14SoftwareSerial9availableEv>:
     5e6:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <_ZN14SoftwareSerial13active_objectE>
     5ea:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <_ZN14SoftwareSerial13active_objectE+0x1>
     5ee:	28 17       	cp	r18, r24
     5f0:	39 07       	cpc	r19, r25
     5f2:	71 f4       	brne	.+28     	; 0x610 <_ZN14SoftwareSerial9availableEv+0x2a>
     5f4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     5f8:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	80 5c       	subi	r24, 0xC0	; 192
     600:	9f 4f       	sbci	r25, 0xFF	; 255
     602:	82 1b       	sub	r24, r18
     604:	91 09       	sbc	r25, r1
     606:	60 e4       	ldi	r22, 0x40	; 64
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	0e 94 26 08 	call	0x104c	; 0x104c <__divmodhi4>
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	08 95       	ret

00000616 <_ZN14SoftwareSerial13stopListeningEv>:
     616:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <_ZN14SoftwareSerial13active_objectE>
     61a:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <_ZN14SoftwareSerial13active_objectE+0x1>
     61e:	e8 17       	cp	r30, r24
     620:	f9 07       	cpc	r31, r25
     622:	69 f4       	brne	.+26     	; 0x63e <_ZN14SoftwareSerial13stopListeningEv+0x28>
     624:	a3 89       	ldd	r26, Z+19	; 0x13
     626:	b4 89       	ldd	r27, Z+20	; 0x14
     628:	9c 91       	ld	r25, X
     62a:	85 89       	ldd	r24, Z+21	; 0x15
     62c:	80 95       	com	r24
     62e:	89 23       	and	r24, r25
     630:	8c 93       	st	X, r24
     632:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <_ZN14SoftwareSerial13active_objectE+0x1>
     636:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <_ZN14SoftwareSerial13active_objectE>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	08 95       	ret
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	08 95       	ret

00000642 <_ZN14SoftwareSerial6listenEv>:
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
     648:	8a 8d       	ldd	r24, Y+26	; 0x1a
     64a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     64c:	89 2b       	or	r24, r25
     64e:	f1 f0       	breq	.+60     	; 0x68c <_ZN14SoftwareSerial6listenEv+0x4a>
     650:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZN14SoftwareSerial13active_objectE>
     654:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <_ZN14SoftwareSerial13active_objectE+0x1>
     658:	c8 17       	cp	r28, r24
     65a:	d9 07       	cpc	r29, r25
     65c:	b9 f0       	breq	.+46     	; 0x68c <_ZN14SoftwareSerial6listenEv+0x4a>
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	11 f0       	breq	.+4      	; 0x666 <_ZN14SoftwareSerial6listenEv+0x24>
     662:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN14SoftwareSerial13stopListeningEv>
     666:	8e 8d       	ldd	r24, Y+30	; 0x1e
     668:	8e 7f       	andi	r24, 0xFE	; 254
     66a:	8e 8f       	std	Y+30, r24	; 0x1e
     66c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     670:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     674:	d0 93 08 02 	sts	0x0208, r29	; 0x800208 <_ZN14SoftwareSerial13active_objectE+0x1>
     678:	c0 93 07 02 	sts	0x0207, r28	; 0x800207 <_ZN14SoftwareSerial13active_objectE>
     67c:	eb 89       	ldd	r30, Y+19	; 0x13
     67e:	fc 89       	ldd	r31, Y+20	; 0x14
     680:	90 81       	ld	r25, Z
     682:	8d 89       	ldd	r24, Y+21	; 0x15
     684:	89 2b       	or	r24, r25
     686:	80 83       	st	Z, r24
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	01 c0       	rjmp	.+2      	; 0x68e <_ZN14SoftwareSerial6listenEv+0x4c>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <__vector_3>:
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	2f 93       	push	r18
     6a0:	3f 93       	push	r19
     6a2:	4f 93       	push	r20
     6a4:	5f 93       	push	r21
     6a6:	6f 93       	push	r22
     6a8:	7f 93       	push	r23
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	af 93       	push	r26
     6b0:	bf 93       	push	r27
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
     6b6:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <_ZN14SoftwareSerial13active_objectE>
     6ba:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <_ZN14SoftwareSerial13active_objectE+0x1>
     6be:	30 97       	sbiw	r30, 0x00	; 0
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <__vector_3+0x30>
     6c2:	51 c0       	rjmp	.+162    	; 0x766 <__vector_3+0xd2>
     6c4:	96 8d       	ldd	r25, Z+30	; 0x1e
     6c6:	a6 85       	ldd	r26, Z+14	; 0x0e
     6c8:	b7 85       	ldd	r27, Z+15	; 0x0f
     6ca:	85 85       	ldd	r24, Z+13	; 0x0d
     6cc:	91 ff       	sbrs	r25, 1
     6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <__vector_3+0x44>
     6d0:	9c 91       	ld	r25, X
     6d2:	89 23       	and	r24, r25
     6d4:	29 f4       	brne	.+10     	; 0x6e0 <__vector_3+0x4c>
     6d6:	47 c0       	rjmp	.+142    	; 0x766 <__vector_3+0xd2>
     6d8:	9c 91       	ld	r25, X
     6da:	89 23       	and	r24, r25
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_3+0x4c>
     6de:	43 c0       	rjmp	.+134    	; 0x766 <__vector_3+0xd2>
     6e0:	a3 89       	ldd	r26, Z+19	; 0x13
     6e2:	b4 89       	ldd	r27, Z+20	; 0x14
     6e4:	9c 91       	ld	r25, X
     6e6:	85 89       	ldd	r24, Z+21	; 0x15
     6e8:	80 95       	com	r24
     6ea:	89 23       	and	r24, r25
     6ec:	8c 93       	st	X, r24
     6ee:	86 89       	ldd	r24, Z+22	; 0x16
     6f0:	97 89       	ldd	r25, Z+23	; 0x17
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <__vector_3+0x5e>
     6f6:	60 8d       	ldd	r22, Z+24	; 0x18
     6f8:	71 8d       	ldd	r23, Z+25	; 0x19
     6fa:	a6 85       	ldd	r26, Z+14	; 0x0e
     6fc:	b7 85       	ldd	r27, Z+15	; 0x0f
     6fe:	55 85       	ldd	r21, Z+13	; 0x0d
     700:	38 e0       	ldi	r19, 0x08	; 8
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	cb 01       	movw	r24, r22
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <__vector_3+0x72>
     70a:	82 2f       	mov	r24, r18
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	95 95       	asr	r25
     710:	87 95       	ror	r24
     712:	28 2f       	mov	r18, r24
     714:	4c 91       	ld	r20, X
     716:	45 23       	and	r20, r21
     718:	09 f0       	breq	.+2      	; 0x71c <__vector_3+0x88>
     71a:	20 68       	ori	r18, 0x80	; 128
     71c:	31 50       	subi	r19, 0x01	; 1
     71e:	91 f7       	brne	.-28     	; 0x704 <__vector_3+0x70>
     720:	86 8d       	ldd	r24, Z+30	; 0x1e
     722:	81 fd       	sbrc	r24, 1
     724:	20 95       	com	r18
     726:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	8f 73       	andi	r24, 0x3F	; 63
     730:	99 27       	eor	r25, r25
     732:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <_ZN14SoftwareSerial20_receive_buffer_headE>
     736:	38 17       	cp	r19, r24
     738:	49 f0       	breq	.+18     	; 0x74c <__vector_3+0xb8>
     73a:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	a9 53       	subi	r26, 0x39	; 57
     742:	be 4f       	sbci	r27, 0xFE	; 254
     744:	2c 93       	st	X, r18
     746:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     74a:	03 c0       	rjmp	.+6      	; 0x752 <__vector_3+0xbe>
     74c:	86 8d       	ldd	r24, Z+30	; 0x1e
     74e:	81 60       	ori	r24, 0x01	; 1
     750:	86 8f       	std	Z+30, r24	; 0x1e
     752:	82 8d       	ldd	r24, Z+26	; 0x1a
     754:	93 8d       	ldd	r25, Z+27	; 0x1b
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <__vector_3+0xc2>
     75a:	a3 89       	ldd	r26, Z+19	; 0x13
     75c:	b4 89       	ldd	r27, Z+20	; 0x14
     75e:	9c 91       	ld	r25, X
     760:	85 89       	ldd	r24, Z+21	; 0x15
     762:	89 2b       	or	r24, r25
     764:	8c 93       	st	X, r24
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <_ZN14SoftwareSerialD1Ev>:
     788:	2e e4       	ldi	r18, 0x4E	; 78
     78a:	31 e0       	ldi	r19, 0x01	; 1
     78c:	fc 01       	movw	r30, r24
     78e:	31 83       	std	Z+1, r19	; 0x01
     790:	20 83       	st	Z, r18
     792:	0c 94 0b 03 	jmp	0x616	; 0x616 <_ZN14SoftwareSerial13stopListeningEv>

00000796 <_ZN14SoftwareSerial5setTXEh>:
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	ec 01       	movw	r28, r24
     79e:	16 2f       	mov	r17, r22
     7a0:	6e 8d       	ldd	r22, Y+30	; 0x1e
     7a2:	66 95       	lsr	r22
     7a4:	61 70       	andi	r22, 0x01	; 1
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	68 27       	eor	r22, r24
     7aa:	81 2f       	mov	r24, r17
     7ac:	0e 94 22 07 	call	0xe44	; 0xe44 <digitalWrite>
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	81 2f       	mov	r24, r17
     7b4:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
     7b8:	81 2f       	mov	r24, r17
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	e4 58       	subi	r30, 0x84	; 132
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	e4 91       	lpm	r30, Z
     7c4:	e8 8b       	std	Y+16, r30	; 0x10
     7c6:	fc 01       	movw	r30, r24
     7c8:	e0 57       	subi	r30, 0x70	; 112
     7ca:	ff 4f       	sbci	r31, 0xFF	; 255
     7cc:	e4 91       	lpm	r30, Z
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	e2 55       	subi	r30, 0x52	; 82
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	85 91       	lpm	r24, Z+
     7da:	94 91       	lpm	r25, Z
     7dc:	9a 8b       	std	Y+18, r25	; 0x12
     7de:	89 8b       	std	Y+17, r24	; 0x11
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	08 95       	ret

000007e8 <_ZN14SoftwareSerial5setRXEh>:
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ec 01       	movw	r28, r24
     7f0:	16 2f       	mov	r17, r22
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	81 2f       	mov	r24, r17
     7f6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <pinMode>
     7fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7fc:	81 fd       	sbrc	r24, 1
     7fe:	04 c0       	rjmp	.+8      	; 0x808 <_ZN14SoftwareSerial5setRXEh+0x20>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	81 2f       	mov	r24, r17
     804:	0e 94 22 07 	call	0xe44	; 0xe44 <digitalWrite>
     808:	1c 87       	std	Y+12, r17	; 0x0c
     80a:	81 2f       	mov	r24, r17
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	fc 01       	movw	r30, r24
     810:	e4 58       	subi	r30, 0x84	; 132
     812:	ff 4f       	sbci	r31, 0xFF	; 255
     814:	e4 91       	lpm	r30, Z
     816:	ed 87       	std	Y+13, r30	; 0x0d
     818:	fc 01       	movw	r30, r24
     81a:	e0 57       	subi	r30, 0x70	; 112
     81c:	ff 4f       	sbci	r31, 0xFF	; 255
     81e:	e4 91       	lpm	r30, Z
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	ee 0f       	add	r30, r30
     824:	ff 1f       	adc	r31, r31
     826:	ec 55       	subi	r30, 0x5C	; 92
     828:	ff 4f       	sbci	r31, 0xFF	; 255
     82a:	85 91       	lpm	r24, Z+
     82c:	94 91       	lpm	r25, Z
     82e:	9f 87       	std	Y+15, r25	; 0x0f
     830:	8e 87       	std	Y+14, r24	; 0x0e
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	08 95       	ret

0000083a <_ZN14SoftwareSerialC1Ehhb>:
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ec 01       	movw	r28, r24
     842:	16 2f       	mov	r17, r22
     844:	1b 82       	std	Y+3, r1	; 0x03
     846:	1a 82       	std	Y+2, r1	; 0x02
     848:	88 ee       	ldi	r24, 0xE8	; 232
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	8c 83       	std	Y+4, r24	; 0x04
     852:	9d 83       	std	Y+5, r25	; 0x05
     854:	ae 83       	std	Y+6, r26	; 0x06
     856:	bf 83       	std	Y+7, r27	; 0x07
     858:	8e e4       	ldi	r24, 0x4E	; 78
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	99 83       	std	Y+1, r25	; 0x01
     85e:	88 83       	st	Y, r24
     860:	1f 8a       	std	Y+23, r1	; 0x17
     862:	1e 8a       	std	Y+22, r1	; 0x16
     864:	19 8e       	std	Y+25, r1	; 0x19
     866:	18 8e       	std	Y+24, r1	; 0x18
     868:	1b 8e       	std	Y+27, r1	; 0x1b
     86a:	1a 8e       	std	Y+26, r1	; 0x1a
     86c:	1d 8e       	std	Y+29, r1	; 0x1d
     86e:	1c 8e       	std	Y+28, r1	; 0x1c
     870:	8e 8d       	ldd	r24, Y+30	; 0x1e
     872:	8e 7f       	andi	r24, 0xFE	; 254
     874:	20 fb       	bst	r18, 0
     876:	81 f9       	bld	r24, 1
     878:	8e 8f       	std	Y+30, r24	; 0x1e
     87a:	64 2f       	mov	r22, r20
     87c:	ce 01       	movw	r24, r28
     87e:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN14SoftwareSerial5setTXEh>
     882:	61 2f       	mov	r22, r17
     884:	ce 01       	movw	r24, r28
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <_ZN14SoftwareSerial5setRXEh>

00000890 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
     896:	9a 01       	movw	r18, r20
     898:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     89a:	1b 8e       	std	Y+27, r1	; 0x1b
     89c:	1a 8e       	std	Y+26, r1	; 0x1a
     89e:	19 8e       	std	Y+25, r1	; 0x19
     8a0:	18 8e       	std	Y+24, r1	; 0x18
     8a2:	1f 8a       	std	Y+23, r1	; 0x17
     8a4:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     8a6:	60 e8       	ldi	r22, 0x80	; 128
     8a8:	74 e8       	ldi	r23, 0x84	; 132
     8aa:	8e e1       	ldi	r24, 0x1E	; 30
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__divmodsi4>
     8b2:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     8b4:	24 30       	cpi	r18, 0x04	; 4
     8b6:	31 05       	cpc	r19, r1
     8b8:	18 f0       	brcs	.+6      	; 0x8c0 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     8ba:	c9 01       	movw	r24, r18
     8bc:	03 97       	sbiw	r24, 0x03	; 3
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     8c4:	9d 8f       	std	Y+29, r25	; 0x1d
     8c6:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     8c8:	6c 85       	ldd	r22, Y+12	; 0x0c
     8ca:	66 31       	cpi	r22, 0x16	; 22
     8cc:	08 f0       	brcs	.+2      	; 0x8d0 <_ZN14SoftwareSerial5beginEl+0x40>
     8ce:	69 c0       	rjmp	.+210    	; 0x9a2 <__stack+0xa3>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     8d0:	c9 01       	movw	r24, r18
     8d2:	96 95       	lsr	r25
     8d4:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     8d6:	84 31       	cpi	r24, 0x14	; 20
     8d8:	91 05       	cpc	r25, r1
     8da:	10 f0       	brcs	.+4      	; 0x8e0 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
     8dc:	43 97       	sbiw	r24, 0x13	; 19
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     8e4:	9f 8b       	std	Y+23, r25	; 0x17
     8e6:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     8e8:	36 97       	sbiw	r30, 0x06	; 6
     8ea:	18 f0       	brcs	.+6      	; 0x8f2 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
     8ec:	c9 01       	movw	r24, r18
     8ee:	05 97       	sbiw	r24, 0x05	; 5
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     8f6:	99 8f       	std	Y+25, r25	; 0x19
     8f8:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     8fa:	c9 01       	movw	r24, r18
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	28 0f       	add	r18, r24
     902:	39 1f       	adc	r19, r25
     904:	36 95       	lsr	r19
     906:	27 95       	ror	r18
     908:	36 95       	lsr	r19
     90a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     90c:	2d 30       	cpi	r18, 0x0D	; 13
     90e:	31 05       	cpc	r19, r1
     910:	18 f0       	brcs	.+6      	; 0x918 <__stack+0x19>
    return num - sub;
     912:	2c 50       	subi	r18, 0x0C	; 12
     914:	31 09       	sbc	r19, r1
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
  else
    return 1;
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     91c:	3b 8f       	std	Y+27, r19	; 0x1b
     91e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     920:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     924:	68 30       	cpi	r22, 0x08	; 8
     926:	50 f0       	brcs	.+20     	; 0x93c <__stack+0x3d>
     928:	21 e0       	ldi	r18, 0x01	; 1
     92a:	6e 30       	cpi	r22, 0x0E	; 14
     92c:	08 f4       	brcc	.+2      	; 0x930 <__stack+0x31>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	01 c0       	rjmp	.+2      	; 0x936 <__stack+0x37>
     934:	88 0f       	add	r24, r24
     936:	2a 95       	dec	r18
     938:	ea f7       	brpl	.-6      	; 0x934 <__stack+0x35>
     93a:	01 c0       	rjmp	.+2      	; 0x93e <__stack+0x3f>
     93c:	84 e0       	ldi	r24, 0x04	; 4
     93e:	89 2b       	or	r24, r25
     940:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     944:	9c 85       	ldd	r25, Y+12	; 0x0c
     946:	98 30       	cpi	r25, 0x08	; 8
     948:	38 f0       	brcs	.+14     	; 0x958 <__stack+0x59>
     94a:	9e 30       	cpi	r25, 0x0E	; 14
     94c:	40 f0       	brcs	.+16     	; 0x95e <__stack+0x5f>
     94e:	96 31       	cpi	r25, 0x16	; 22
     950:	48 f0       	brcs	.+18     	; 0x964 <__stack+0x65>
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	08 c0       	rjmp	.+16     	; 0x968 <__stack+0x69>
     958:	2d e6       	ldi	r18, 0x6D	; 109
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	05 c0       	rjmp	.+10     	; 0x968 <__stack+0x69>
     95e:	2b e6       	ldi	r18, 0x6B	; 107
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <__stack+0x69>
     964:	2c e6       	ldi	r18, 0x6C	; 108
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	3c 8b       	std	Y+20, r19	; 0x14
     96a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     96c:	98 30       	cpi	r25, 0x08	; 8
     96e:	30 f4       	brcc	.+12     	; 0x97c <__stack+0x7d>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	01 c0       	rjmp	.+2      	; 0x976 <__stack+0x77>
     974:	88 0f       	add	r24, r24
     976:	9a 95       	dec	r25
     978:	ea f7       	brpl	.-6      	; 0x974 <__stack+0x75>
     97a:	0e c0       	rjmp	.+28     	; 0x998 <__stack+0x99>
     97c:	29 2f       	mov	r18, r25
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	9e 30       	cpi	r25, 0x0E	; 14
     982:	18 f4       	brcc	.+6      	; 0x98a <__stack+0x8b>
     984:	28 50       	subi	r18, 0x08	; 8
     986:	31 09       	sbc	r19, r1
     988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
     98a:	2e 50       	subi	r18, 0x0E	; 14
     98c:	31 09       	sbc	r19, r1
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	01 c0       	rjmp	.+2      	; 0x994 <__stack+0x95>
     992:	88 0f       	add	r24, r24
     994:	2a 95       	dec	r18
     996:	ea f7       	brpl	.-6      	; 0x992 <__stack+0x93>
     998:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     99a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     99c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <__stack+0x9f>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     9a2:	ce 01       	movw	r24, r28
}
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     9a8:	0c 94 21 03 	jmp	0x642	; 0x642 <_ZN14SoftwareSerial6listenEv>

000009ac <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	8f 93       	push	r24
     9ba:	9f 93       	push	r25
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     9c0:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <Serial+0x10>
     9c4:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <Serial+0x11>
     9c8:	80 81       	ld	r24, Z
     9ca:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <Serial+0x16>
     9ce:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <Serial+0x17>
     9d2:	82 fd       	sbrc	r24, 2
     9d4:	12 c0       	rjmp	.+36     	; 0x9fa <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     9d6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9d8:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <Serial+0x19>
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9e0:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <Serial+0x1a>
     9e4:	82 17       	cp	r24, r18
     9e6:	51 f0       	breq	.+20     	; 0x9fc <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     9e8:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <Serial+0x19>
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	e7 5f       	subi	r30, 0xF7	; 247
     9f0:	fd 4f       	sbci	r31, 0xFD	; 253
     9f2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9f4:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <Serial+0x19>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9fa:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	9f 91       	pop	r25
     a02:	8f 91       	pop	r24
     a04:	2f 91       	pop	r18
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	4f 93       	push	r20
     a20:	5f 93       	push	r21
     a22:	6f 93       	push	r22
     a24:	7f 93       	push	r23
     a26:	8f 93       	push	r24
     a28:	9f 93       	push	r25
     a2a:	af 93       	push	r26
     a2c:	bf 93       	push	r27
     a2e:	ef 93       	push	r30
     a30:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     a32:	89 e0       	ldi	r24, 0x09	; 9
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	bf 91       	pop	r27
     a40:	af 91       	pop	r26
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	7f 91       	pop	r23
     a48:	6f 91       	pop	r22
     a4a:	5f 91       	pop	r21
     a4c:	4f 91       	pop	r20
     a4e:	3f 91       	pop	r19
     a50:	2f 91       	pop	r18
     a52:	0f 90       	pop	r0
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	0f 90       	pop	r0
     a58:	1f 90       	pop	r1
     a5a:	18 95       	reti

00000a5c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a5c:	89 e0       	ldi	r24, 0x09	; 9
     a5e:	92 e0       	ldi	r25, 0x02	; 2
     a60:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZN14HardwareSerial9availableEv>
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	89 2b       	or	r24, r25
     a68:	09 f4       	brne	.+2      	; 0xa6c <_Z17Serial0_availablev+0x10>
     a6a:	20 e0       	ldi	r18, 0x00	; 0
}
     a6c:	82 2f       	mov	r24, r18
     a6e:	08 95       	ret

00000a70 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a70:	e9 e0       	ldi	r30, 0x09	; 9
     a72:	f2 e0       	ldi	r31, 0x02	; 2
     a74:	13 82       	std	Z+3, r1	; 0x03
     a76:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a78:	88 ee       	ldi	r24, 0xE8	; 232
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	84 83       	std	Z+4, r24	; 0x04
     a82:	95 83       	std	Z+5, r25	; 0x05
     a84:	a6 83       	std	Z+6, r26	; 0x06
     a86:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a88:	8f e6       	ldi	r24, 0x6F	; 111
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	91 83       	std	Z+1, r25	; 0x01
     a8e:	80 83       	st	Z, r24
     a90:	85 ec       	ldi	r24, 0xC5	; 197
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	95 87       	std	Z+13, r25	; 0x0d
     a96:	84 87       	std	Z+12, r24	; 0x0c
     a98:	84 ec       	ldi	r24, 0xC4	; 196
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	97 87       	std	Z+15, r25	; 0x0f
     a9e:	86 87       	std	Z+14, r24	; 0x0e
     aa0:	80 ec       	ldi	r24, 0xC0	; 192
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	91 8b       	std	Z+17, r25	; 0x11
     aa6:	80 8b       	std	Z+16, r24	; 0x10
     aa8:	81 ec       	ldi	r24, 0xC1	; 193
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	93 8b       	std	Z+19, r25	; 0x13
     aae:	82 8b       	std	Z+18, r24	; 0x12
     ab0:	82 ec       	ldi	r24, 0xC2	; 194
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	95 8b       	std	Z+21, r25	; 0x15
     ab6:	84 8b       	std	Z+20, r24	; 0x14
     ab8:	86 ec       	ldi	r24, 0xC6	; 198
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	97 8b       	std	Z+23, r25	; 0x17
     abe:	86 8b       	std	Z+22, r24	; 0x16
     ac0:	11 8e       	std	Z+25, r1	; 0x19
     ac2:	12 8e       	std	Z+26, r1	; 0x1a
     ac4:	13 8e       	std	Z+27, r1	; 0x1b
     ac6:	14 8e       	std	Z+28, r1	; 0x1c
     ac8:	08 95       	ret

00000aca <initVariant>:
     aca:	08 95       	ret

00000acc <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     acc:	0e 94 82 06 	call	0xd04	; 0xd04 <init>

	initVariant();
     ad0:	0e 94 65 05 	call	0xaca	; 0xaca <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ad4:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ad8:	ce e8       	ldi	r28, 0x8E	; 142
     ada:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
     adc:	0e 94 b2 00 	call	0x164	; 0x164 <loop>
		if (serialEventRun) serialEventRun();
     ae0:	20 97       	sbiw	r28, 0x00	; 0
     ae2:	e1 f3       	breq	.-8      	; 0xadc <main+0x10>
     ae4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_Z14serialEventRunv>
     ae8:	f9 cf       	rjmp	.-14     	; 0xadc <main+0x10>

00000aea <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
     aea:	cf 92       	push	r12
     aec:	df 92       	push	r13
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	6c 01       	movw	r12, r24
     afc:	7a 01       	movw	r14, r20
     afe:	8b 01       	movw	r16, r22
     b00:	c0 e0       	ldi	r28, 0x00	; 0
     b02:	d0 e0       	ldi	r29, 0x00	; 0
     b04:	ce 15       	cp	r28, r14
     b06:	df 05       	cpc	r29, r15
     b08:	81 f0       	breq	.+32     	; 0xb2a <_ZN5Print5writeEPKhj+0x40>
     b0a:	d8 01       	movw	r26, r16
     b0c:	6d 91       	ld	r22, X+
     b0e:	8d 01       	movw	r16, r26
     b10:	d6 01       	movw	r26, r12
     b12:	ed 91       	ld	r30, X+
     b14:	fc 91       	ld	r31, X
     b16:	01 90       	ld	r0, Z+
     b18:	f0 81       	ld	r31, Z
     b1a:	e0 2d       	mov	r30, r0
     b1c:	c6 01       	movw	r24, r12
     b1e:	09 95       	icall
     b20:	89 2b       	or	r24, r25
     b22:	11 f0       	breq	.+4      	; 0xb28 <_ZN5Print5writeEPKhj+0x3e>
     b24:	21 96       	adiw	r28, 0x01	; 1
     b26:	ee cf       	rjmp	.-36     	; 0xb04 <_ZN5Print5writeEPKhj+0x1a>
     b28:	7e 01       	movw	r14, r28
     b2a:	c7 01       	movw	r24, r14
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	ff 90       	pop	r15
     b36:	ef 90       	pop	r14
     b38:	df 90       	pop	r13
     b3a:	cf 90       	pop	r12
     b3c:	08 95       	ret

00000b3e <_ZN5Print5writeEPKc>:
     b3e:	61 15       	cp	r22, r1
     b40:	71 05       	cpc	r23, r1
     b42:	79 f0       	breq	.+30     	; 0xb62 <_ZN5Print5writeEPKc+0x24>
     b44:	fb 01       	movw	r30, r22
     b46:	01 90       	ld	r0, Z+
     b48:	00 20       	and	r0, r0
     b4a:	e9 f7       	brne	.-6      	; 0xb46 <_ZN5Print5writeEPKc+0x8>
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	af 01       	movw	r20, r30
     b50:	46 1b       	sub	r20, r22
     b52:	57 0b       	sbc	r21, r23
     b54:	dc 01       	movw	r26, r24
     b56:	ed 91       	ld	r30, X+
     b58:	fc 91       	ld	r31, X
     b5a:	02 80       	ldd	r0, Z+2	; 0x02
     b5c:	f3 81       	ldd	r31, Z+3	; 0x03
     b5e:	e0 2d       	mov	r30, r0
     b60:	09 94       	ijmp
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	08 95       	ret

00000b68 <_ZN5Print7printlnEv>:
     b68:	6c e5       	ldi	r22, 0x5C	; 92
     b6a:	71 e0       	ldi	r23, 0x01	; 1
     b6c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <_ZN5Print5writeEPKc>

00000b70 <_ZN5Print7printlnEPKc>:
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
     b7a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Print5writeEPKc>
     b7e:	8c 01       	movw	r16, r24
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN5Print7printlnEv>
     b86:	80 0f       	add	r24, r16
     b88:	91 1f       	adc	r25, r17
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	08 95       	ret

00000b94 <_ZN5Print11printNumberEmh>:
     b94:	8f 92       	push	r8
     b96:	9f 92       	push	r9
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	a1 97       	sbiw	r28, 0x21	; 33
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	7c 01       	movw	r14, r24
     bba:	fa 01       	movw	r30, r20
     bbc:	cb 01       	movw	r24, r22
     bbe:	19 a2       	std	Y+33, r1	; 0x21
     bc0:	22 30       	cpi	r18, 0x02	; 2
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <_ZN5Print11printNumberEmh+0x32>
     bc4:	2a e0       	ldi	r18, 0x0A	; 10
     bc6:	8e 01       	movw	r16, r28
     bc8:	0f 5d       	subi	r16, 0xDF	; 223
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
     bcc:	82 2e       	mov	r8, r18
     bce:	91 2c       	mov	r9, r1
     bd0:	a1 2c       	mov	r10, r1
     bd2:	b1 2c       	mov	r11, r1
     bd4:	bf 01       	movw	r22, r30
     bd6:	a5 01       	movw	r20, r10
     bd8:	94 01       	movw	r18, r8
     bda:	0e 94 3a 08 	call	0x1074	; 0x1074 <__udivmodsi4>
     bde:	f9 01       	movw	r30, r18
     be0:	ca 01       	movw	r24, r20
     be2:	01 50       	subi	r16, 0x01	; 1
     be4:	11 09       	sbc	r17, r1
     be6:	6a 30       	cpi	r22, 0x0A	; 10
     be8:	10 f4       	brcc	.+4      	; 0xbee <_ZN5Print11printNumberEmh+0x5a>
     bea:	60 5d       	subi	r22, 0xD0	; 208
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <_ZN5Print11printNumberEmh+0x5c>
     bee:	69 5c       	subi	r22, 0xC9	; 201
     bf0:	d8 01       	movw	r26, r16
     bf2:	6c 93       	st	X, r22
     bf4:	23 2b       	or	r18, r19
     bf6:	24 2b       	or	r18, r20
     bf8:	25 2b       	or	r18, r21
     bfa:	61 f7       	brne	.-40     	; 0xbd4 <_ZN5Print11printNumberEmh+0x40>
     bfc:	b8 01       	movw	r22, r16
     bfe:	c7 01       	movw	r24, r14
     c00:	0e 94 9f 05 	call	0xb3e	; 0xb3e <_ZN5Print5writeEPKc>
     c04:	a1 96       	adiw	r28, 0x21	; 33
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	bf 90       	pop	r11
     c1e:	af 90       	pop	r10
     c20:	9f 90       	pop	r9
     c22:	8f 90       	pop	r8
     c24:	08 95       	ret

00000c26 <_ZN5Print5printEmi>:
     c26:	21 15       	cp	r18, r1
     c28:	31 05       	cpc	r19, r1
     c2a:	41 f4       	brne	.+16     	; 0xc3c <_ZN5Print5printEmi+0x16>
     c2c:	dc 01       	movw	r26, r24
     c2e:	ed 91       	ld	r30, X+
     c30:	fc 91       	ld	r31, X
     c32:	01 90       	ld	r0, Z+
     c34:	f0 81       	ld	r31, Z
     c36:	e0 2d       	mov	r30, r0
     c38:	64 2f       	mov	r22, r20
     c3a:	09 94       	ijmp
     c3c:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <_ZN5Print11printNumberEmh>

00000c40 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
     c40:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
     c42:	ab 01       	movw	r20, r22
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0c 94 13 06 	jmp	0xc26	; 0xc26 <_ZN5Print5printEmi>

00000c4c <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     c56:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN5Print5printEji>
     c5a:	8c 01       	movw	r16, r24
  n += println();
     c5c:	ce 01       	movw	r24, r28
     c5e:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN5Print7printlnEv>
  return n;
}
     c62:	80 0f       	add	r24, r16
     c64:	91 1f       	adc	r25, r17
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	08 95       	ret

00000c70 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	2f 93       	push	r18
     c7c:	3f 93       	push	r19
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	af 93       	push	r26
     c84:	bf 93       	push	r27
     c86:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <timer0_millis>
     c8a:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <timer0_millis+0x1>
     c8e:	a0 91 a9 02 	lds	r26, 0x02A9	; 0x8002a9 <timer0_millis+0x2>
     c92:	b0 91 aa 02 	lds	r27, 0x02AA	; 0x8002aa <timer0_millis+0x3>
     c96:	30 91 a6 02 	lds	r19, 0x02A6	; 0x8002a6 <timer0_fract>
     c9a:	23 e0       	ldi	r18, 0x03	; 3
     c9c:	23 0f       	add	r18, r19
     c9e:	2d 37       	cpi	r18, 0x7D	; 125
     ca0:	20 f4       	brcc	.+8      	; 0xcaa <__vector_16+0x3a>
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	a1 1d       	adc	r26, r1
     ca6:	b1 1d       	adc	r27, r1
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <__vector_16+0x44>
     caa:	26 e8       	ldi	r18, 0x86	; 134
     cac:	23 0f       	add	r18, r19
     cae:	02 96       	adiw	r24, 0x02	; 2
     cb0:	a1 1d       	adc	r26, r1
     cb2:	b1 1d       	adc	r27, r1
     cb4:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <timer0_fract>
     cb8:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <timer0_millis>
     cbc:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <timer0_millis+0x1>
     cc0:	a0 93 a9 02 	sts	0x02A9, r26	; 0x8002a9 <timer0_millis+0x2>
     cc4:	b0 93 aa 02 	sts	0x02AA, r27	; 0x8002aa <timer0_millis+0x3>
     cc8:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <timer0_overflow_count>
     ccc:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <timer0_overflow_count+0x1>
     cd0:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <timer0_overflow_count+0x2>
     cd4:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <timer0_overflow_count+0x3>
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	a1 1d       	adc	r26, r1
     cdc:	b1 1d       	adc	r27, r1
     cde:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <timer0_overflow_count>
     ce2:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <timer0_overflow_count+0x1>
     ce6:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <timer0_overflow_count+0x2>
     cea:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <timer0_overflow_count+0x3>
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d04:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d06:	84 b5       	in	r24, 0x24	; 36
     d08:	82 60       	ori	r24, 0x02	; 2
     d0a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d0c:	84 b5       	in	r24, 0x24	; 36
     d0e:	81 60       	ori	r24, 0x01	; 1
     d10:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d12:	85 b5       	in	r24, 0x25	; 37
     d14:	82 60       	ori	r24, 0x02	; 2
     d16:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d18:	85 b5       	in	r24, 0x25	; 37
     d1a:	81 60       	ori	r24, 0x01	; 1
     d1c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d1e:	ee e6       	ldi	r30, 0x6E	; 110
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d28:	e1 e8       	ldi	r30, 0x81	; 129
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d2e:	80 81       	ld	r24, Z
     d30:	82 60       	ori	r24, 0x02	; 2
     d32:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d34:	80 81       	ld	r24, Z
     d36:	81 60       	ori	r24, 0x01	; 1
     d38:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d3a:	e0 e8       	ldi	r30, 0x80	; 128
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d44:	e1 eb       	ldi	r30, 0xB1	; 177
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	84 60       	ori	r24, 0x04	; 4
     d4c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     d4e:	e0 eb       	ldi	r30, 0xB0	; 176
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	81 60       	ori	r24, 0x01	; 1
     d56:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d58:	ea e7       	ldi	r30, 0x7A	; 122
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     d62:	80 81       	ld	r24, Z
     d64:	82 60       	ori	r24, 0x02	; 2
     d66:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     d68:	80 81       	ld	r24, Z
     d6a:	81 60       	ori	r24, 0x01	; 1
     d6c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d6e:	80 81       	ld	r24, Z
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     d74:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     d78:	08 95       	ret

00000d7a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	81 f0       	breq	.+32     	; 0xd9e <turnOffPWM+0x24>
     d7e:	28 f4       	brcc	.+10     	; 0xd8a <turnOffPWM+0x10>
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	99 f0       	breq	.+38     	; 0xdaa <turnOffPWM+0x30>
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	a1 f0       	breq	.+40     	; 0xdb0 <turnOffPWM+0x36>
     d88:	08 95       	ret
     d8a:	87 30       	cpi	r24, 0x07	; 7
     d8c:	a9 f0       	breq	.+42     	; 0xdb8 <turnOffPWM+0x3e>
     d8e:	88 30       	cpi	r24, 0x08	; 8
     d90:	b9 f0       	breq	.+46     	; 0xdc0 <turnOffPWM+0x46>
     d92:	84 30       	cpi	r24, 0x04	; 4
     d94:	d1 f4       	brne	.+52     	; 0xdca <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     d96:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d9a:	8f 7d       	andi	r24, 0xDF	; 223
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     d9e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     da2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     da4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     da8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     daa:	84 b5       	in	r24, 0x24	; 36
     dac:	8f 77       	andi	r24, 0x7F	; 127
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     db0:	84 b5       	in	r24, 0x24	; 36
     db2:	8f 7d       	andi	r24, 0xDF	; 223
     db4:	84 bd       	out	0x24, r24	; 36
     db6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     db8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     dc0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     dc4:	8f 7d       	andi	r24, 0xDF	; 223
     dc6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     dca:	08 95       	ret

00000dcc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	e4 58       	subi	r30, 0x84	; 132
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     dda:	fc 01       	movw	r30, r24
     ddc:	e0 57       	subi	r30, 0x70	; 112
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     de2:	88 23       	and	r24, r24
     de4:	61 f1       	breq	.+88     	; 0xe3e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	fc 01       	movw	r30, r24
     dee:	e8 54       	subi	r30, 0x48	; 72
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	c5 91       	lpm	r28, Z+
     df4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     df6:	fc 01       	movw	r30, r24
     df8:	e2 55       	subi	r30, 0x52	; 82
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	a5 91       	lpm	r26, Z+
     dfe:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     e00:	61 11       	cpse	r22, r1
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     e04:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e06:	f8 94       	cli
		*reg &= ~bit;
     e08:	88 81       	ld	r24, Y
     e0a:	20 95       	com	r18
     e0c:	82 23       	and	r24, r18
     e0e:	88 83       	st	Y, r24
		*out &= ~bit;
     e10:	ec 91       	ld	r30, X
     e12:	2e 23       	and	r18, r30
     e14:	0b c0       	rjmp	.+22     	; 0xe2c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     e16:	62 30       	cpi	r22, 0x02	; 2
     e18:	61 f4       	brne	.+24     	; 0xe32 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     e1a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e1c:	f8 94       	cli
		*reg &= ~bit;
     e1e:	88 81       	ld	r24, Y
     e20:	32 2f       	mov	r19, r18
     e22:	30 95       	com	r19
     e24:	83 23       	and	r24, r19
     e26:	88 83       	st	Y, r24
		*out |= bit;
     e28:	ec 91       	ld	r30, X
     e2a:	2e 2b       	or	r18, r30
     e2c:	2c 93       	st	X, r18
		SREG = oldSREG;
     e2e:	9f bf       	out	0x3f, r25	; 63
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     e32:	8f b7       	in	r24, 0x3f	; 63
                cli();
     e34:	f8 94       	cli
		*reg |= bit;
     e36:	e8 81       	ld	r30, Y
     e38:	2e 2b       	or	r18, r30
     e3a:	28 83       	st	Y, r18
		SREG = oldSREG;
     e3c:	8f bf       	out	0x3f, r24	; 63
	}
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	f9 01       	movw	r30, r18
     e50:	e8 59       	subi	r30, 0x98	; 152
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     e56:	f9 01       	movw	r30, r18
     e58:	e4 58       	subi	r30, 0x84	; 132
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     e5e:	f9 01       	movw	r30, r18
     e60:	e0 57       	subi	r30, 0x70	; 112
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     e66:	cc 23       	and	r28, r28
     e68:	c1 f0       	breq	.+48     	; 0xe9a <digitalWrite+0x56>
     e6a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e6c:	81 11       	cpse	r24, r1
     e6e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <turnOffPWM>

	out = portOutputRegister(port);
     e72:	ec 2f       	mov	r30, r28
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	e2 55       	subi	r30, 0x52	; 82
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	a5 91       	lpm	r26, Z+
     e80:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     e82:	9f b7       	in	r25, 0x3f	; 63
	cli();
     e84:	f8 94       	cli

	if (val == LOW) {
     e86:	11 11       	cpse	r17, r1
     e88:	04 c0       	rjmp	.+8      	; 0xe92 <digitalWrite+0x4e>
		*out &= ~bit;
     e8a:	8c 91       	ld	r24, X
     e8c:	d0 95       	com	r29
     e8e:	d8 23       	and	r29, r24
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <digitalWrite+0x52>
	} else {
		*out |= bit;
     e92:	ec 91       	ld	r30, X
     e94:	de 2b       	or	r29, r30
     e96:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     e98:	9f bf       	out	0x3f, r25	; 63
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	08 95       	ret

00000ea2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     ea2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     ea4:	91 8d       	ldd	r25, Z+25	; 0x19
     ea6:	22 8d       	ldd	r18, Z+26	; 0x1a
     ea8:	89 2f       	mov	r24, r25
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	80 5c       	subi	r24, 0xC0	; 192
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	82 1b       	sub	r24, r18
     eb2:	91 09       	sbc	r25, r1
}
     eb4:	8f 73       	andi	r24, 0x3F	; 63
     eb6:	99 27       	eor	r25, r25
     eb8:	08 95       	ret

00000eba <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     eba:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ebc:	91 8d       	ldd	r25, Z+25	; 0x19
     ebe:	82 8d       	ldd	r24, Z+26	; 0x1a
     ec0:	98 17       	cp	r25, r24
     ec2:	31 f0       	breq	.+12     	; 0xed0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     ec4:	82 8d       	ldd	r24, Z+26	; 0x1a
     ec6:	e8 0f       	add	r30, r24
     ec8:	f1 1d       	adc	r31, r1
     eca:	85 8d       	ldd	r24, Z+29	; 0x1d
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     ed4:	08 95       	ret

00000ed6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     ed6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     ed8:	91 8d       	ldd	r25, Z+25	; 0x19
     eda:	82 8d       	ldd	r24, Z+26	; 0x1a
     edc:	98 17       	cp	r25, r24
     ede:	61 f0       	breq	.+24     	; 0xef8 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     ee0:	82 8d       	ldd	r24, Z+26	; 0x1a
     ee2:	df 01       	movw	r26, r30
     ee4:	a8 0f       	add	r26, r24
     ee6:	b1 1d       	adc	r27, r1
     ee8:	5d 96       	adiw	r26, 0x1d	; 29
     eea:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     eec:	92 8d       	ldd	r25, Z+26	; 0x1a
     eee:	9f 5f       	subi	r25, 0xFF	; 255
     ef0:	9f 73       	andi	r25, 0x3F	; 63
     ef2:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     efc:	08 95       	ret

00000efe <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     efe:	fc 01       	movw	r30, r24
     f00:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     f02:	44 8d       	ldd	r20, Z+28	; 0x1c
     f04:	25 2f       	mov	r18, r21
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	84 2f       	mov	r24, r20
     f0a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     f0c:	82 1b       	sub	r24, r18
     f0e:	93 0b       	sbc	r25, r19
     f10:	54 17       	cp	r21, r20
     f12:	10 f0       	brcs	.+4      	; 0xf18 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     f14:	cf 96       	adiw	r24, 0x3f	; 63
     f16:	08 95       	ret
  return tail - head - 1;
     f18:	01 97       	sbiw	r24, 0x01	; 1
}
     f1a:	08 95       	ret

00000f1c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f1c:	8e e2       	ldi	r24, 0x2E	; 46
     f1e:	95 e0       	ldi	r25, 0x05	; 5
     f20:	89 2b       	or	r24, r25
     f22:	49 f0       	breq	.+18     	; 0xf36 <_Z14serialEventRunv+0x1a>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	89 2b       	or	r24, r25
     f2a:	29 f0       	breq	.+10     	; 0xf36 <_Z14serialEventRunv+0x1a>
     f2c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <_Z17Serial0_availablev>
     f30:	81 11       	cpse	r24, r1
     f32:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     f36:	08 95       	ret

00000f38 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     f38:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     f3a:	84 8d       	ldd	r24, Z+28	; 0x1c
     f3c:	df 01       	movw	r26, r30
     f3e:	a8 0f       	add	r26, r24
     f40:	b1 1d       	adc	r27, r1
     f42:	a3 5a       	subi	r26, 0xA3	; 163
     f44:	bf 4f       	sbci	r27, 0xFF	; 255
     f46:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     f48:	84 8d       	ldd	r24, Z+28	; 0x1c
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	8f 73       	andi	r24, 0x3F	; 63
     f50:	99 27       	eor	r25, r25
     f52:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     f54:	a6 89       	ldd	r26, Z+22	; 0x16
     f56:	b7 89       	ldd	r27, Z+23	; 0x17
     f58:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     f5a:	a0 89       	ldd	r26, Z+16	; 0x10
     f5c:	b1 89       	ldd	r27, Z+17	; 0x11
     f5e:	8c 91       	ld	r24, X
     f60:	80 64       	ori	r24, 0x40	; 64
     f62:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     f64:	93 8d       	ldd	r25, Z+27	; 0x1b
     f66:	84 8d       	ldd	r24, Z+28	; 0x1c
     f68:	98 13       	cpse	r25, r24
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     f6c:	02 88       	ldd	r0, Z+18	; 0x12
     f6e:	f3 89       	ldd	r31, Z+19	; 0x13
     f70:	e0 2d       	mov	r30, r0
     f72:	80 81       	ld	r24, Z
     f74:	8f 7d       	andi	r24, 0xDF	; 223
     f76:	80 83       	st	Z, r24
     f78:	08 95       	ret

00000f7a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	ec 01       	movw	r28, r24
  _written = true;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     f8c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f90:	98 13       	cpse	r25, r24
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <_ZN14HardwareSerial5writeEh+0x24>
     f94:	e8 89       	ldd	r30, Y+16	; 0x10
     f96:	f9 89       	ldd	r31, Y+17	; 0x11
     f98:	80 81       	ld	r24, Z
     f9a:	85 fd       	sbrc	r24, 5
     f9c:	24 c0       	rjmp	.+72     	; 0xfe6 <_ZN14HardwareSerial5writeEh+0x6c>
     f9e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     fa0:	0b 8d       	ldd	r16, Y+27	; 0x1b
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	0f 5f       	subi	r16, 0xFF	; 255
     fa6:	1f 4f       	sbci	r17, 0xFF	; 255
     fa8:	0f 73       	andi	r16, 0x3F	; 63
     faa:	11 27       	eor	r17, r17
     fac:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     fae:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fb0:	e8 12       	cpse	r14, r24
     fb2:	0c c0       	rjmp	.+24     	; 0xfcc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	07 fc       	sbrc	r0, 7
     fb8:	fa cf       	rjmp	.-12     	; 0xfae <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     fba:	e8 89       	ldd	r30, Y+16	; 0x10
     fbc:	f9 89       	ldd	r31, Y+17	; 0x11
     fbe:	80 81       	ld	r24, Z
     fc0:	85 ff       	sbrs	r24, 5
     fc2:	f5 cf       	rjmp	.-22     	; 0xfae <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     fc4:	ce 01       	movw	r24, r28
     fc6:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     fca:	f1 cf       	rjmp	.-30     	; 0xfae <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     fcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fce:	fe 01       	movw	r30, r28
     fd0:	e8 0f       	add	r30, r24
     fd2:	f1 1d       	adc	r31, r1
     fd4:	e3 5a       	subi	r30, 0xA3	; 163
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     fda:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     fdc:	ea 89       	ldd	r30, Y+18	; 0x12
     fde:	fb 89       	ldd	r31, Y+19	; 0x13
     fe0:	80 81       	ld	r24, Z
     fe2:	80 62       	ori	r24, 0x20	; 32
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     fe6:	ee 89       	ldd	r30, Y+22	; 0x16
     fe8:	ff 89       	ldd	r31, Y+23	; 0x17
     fea:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     fec:	e8 89       	ldd	r30, Y+16	; 0x10
     fee:	f9 89       	ldd	r31, Y+17	; 0x11
     ff0:	80 81       	ld	r24, Z
     ff2:	80 64       	ori	r24, 0x40	; 64
     ff4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	08 95       	ret

00001008 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    100e:	88 8d       	ldd	r24, Y+24	; 0x18
    1010:	88 23       	and	r24, r24
    1012:	c9 f0       	breq	.+50     	; 0x1046 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1014:	ea 89       	ldd	r30, Y+18	; 0x12
    1016:	fb 89       	ldd	r31, Y+19	; 0x13
    1018:	80 81       	ld	r24, Z
    101a:	85 fd       	sbrc	r24, 5
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <_ZN14HardwareSerial5flushEv+0x20>
    101e:	a8 89       	ldd	r26, Y+16	; 0x10
    1020:	b9 89       	ldd	r27, Y+17	; 0x11
    1022:	8c 91       	ld	r24, X
    1024:	86 fd       	sbrc	r24, 6
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	07 fc       	sbrc	r0, 7
    102c:	f5 cf       	rjmp	.-22     	; 0x1018 <_ZN14HardwareSerial5flushEv+0x10>
    102e:	80 81       	ld	r24, Z
    1030:	85 ff       	sbrs	r24, 5
    1032:	f2 cf       	rjmp	.-28     	; 0x1018 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1034:	a8 89       	ldd	r26, Y+16	; 0x10
    1036:	b9 89       	ldd	r27, Y+17	; 0x11
    1038:	8c 91       	ld	r24, X
    103a:	85 ff       	sbrs	r24, 5
    103c:	ed cf       	rjmp	.-38     	; 0x1018 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    103e:	ce 01       	movw	r24, r28
    1040:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1044:	e7 cf       	rjmp	.-50     	; 0x1014 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <__divmodhi4>:
    104c:	97 fb       	bst	r25, 7
    104e:	07 2e       	mov	r0, r23
    1050:	16 f4       	brtc	.+4      	; 0x1056 <__divmodhi4+0xa>
    1052:	00 94       	com	r0
    1054:	07 d0       	rcall	.+14     	; 0x1064 <__divmodhi4_neg1>
    1056:	77 fd       	sbrc	r23, 7
    1058:	09 d0       	rcall	.+18     	; 0x106c <__divmodhi4_neg2>
    105a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodhi4>
    105e:	07 fc       	sbrc	r0, 7
    1060:	05 d0       	rcall	.+10     	; 0x106c <__divmodhi4_neg2>
    1062:	3e f4       	brtc	.+14     	; 0x1072 <__divmodhi4_exit>

00001064 <__divmodhi4_neg1>:
    1064:	90 95       	com	r25
    1066:	81 95       	neg	r24
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	08 95       	ret

0000106c <__divmodhi4_neg2>:
    106c:	70 95       	com	r23
    106e:	61 95       	neg	r22
    1070:	7f 4f       	sbci	r23, 0xFF	; 255

00001072 <__divmodhi4_exit>:
    1072:	08 95       	ret

00001074 <__udivmodsi4>:
    1074:	a1 e2       	ldi	r26, 0x21	; 33
    1076:	1a 2e       	mov	r1, r26
    1078:	aa 1b       	sub	r26, r26
    107a:	bb 1b       	sub	r27, r27
    107c:	fd 01       	movw	r30, r26
    107e:	0d c0       	rjmp	.+26     	; 0x109a <__udivmodsi4_ep>

00001080 <__udivmodsi4_loop>:
    1080:	aa 1f       	adc	r26, r26
    1082:	bb 1f       	adc	r27, r27
    1084:	ee 1f       	adc	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	a2 17       	cp	r26, r18
    108a:	b3 07       	cpc	r27, r19
    108c:	e4 07       	cpc	r30, r20
    108e:	f5 07       	cpc	r31, r21
    1090:	20 f0       	brcs	.+8      	; 0x109a <__udivmodsi4_ep>
    1092:	a2 1b       	sub	r26, r18
    1094:	b3 0b       	sbc	r27, r19
    1096:	e4 0b       	sbc	r30, r20
    1098:	f5 0b       	sbc	r31, r21

0000109a <__udivmodsi4_ep>:
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	1a 94       	dec	r1
    10a4:	69 f7       	brne	.-38     	; 0x1080 <__udivmodsi4_loop>
    10a6:	60 95       	com	r22
    10a8:	70 95       	com	r23
    10aa:	80 95       	com	r24
    10ac:	90 95       	com	r25
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	bd 01       	movw	r22, r26
    10b4:	cf 01       	movw	r24, r30
    10b6:	08 95       	ret

000010b8 <__divmodsi4>:
    10b8:	05 2e       	mov	r0, r21
    10ba:	97 fb       	bst	r25, 7
    10bc:	1e f4       	brtc	.+6      	; 0x10c4 <__divmodsi4+0xc>
    10be:	00 94       	com	r0
    10c0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__negsi2>
    10c4:	57 fd       	sbrc	r21, 7
    10c6:	07 d0       	rcall	.+14     	; 0x10d6 <__divmodsi4_neg2>
    10c8:	0e 94 3a 08 	call	0x1074	; 0x1074 <__udivmodsi4>
    10cc:	07 fc       	sbrc	r0, 7
    10ce:	03 d0       	rcall	.+6      	; 0x10d6 <__divmodsi4_neg2>
    10d0:	4e f4       	brtc	.+18     	; 0x10e4 <__divmodsi4_exit>
    10d2:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__negsi2>

000010d6 <__divmodsi4_neg2>:
    10d6:	50 95       	com	r21
    10d8:	40 95       	com	r20
    10da:	30 95       	com	r19
    10dc:	21 95       	neg	r18
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	4f 4f       	sbci	r20, 0xFF	; 255
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255

000010e4 <__divmodsi4_exit>:
    10e4:	08 95       	ret

000010e6 <__negsi2>:
    10e6:	90 95       	com	r25
    10e8:	80 95       	com	r24
    10ea:	70 95       	com	r23
    10ec:	61 95       	neg	r22
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <__udivmodhi4>:
    10f6:	aa 1b       	sub	r26, r26
    10f8:	bb 1b       	sub	r27, r27
    10fa:	51 e1       	ldi	r21, 0x11	; 17
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <__udivmodhi4_ep>

000010fe <__udivmodhi4_loop>:
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	a6 17       	cp	r26, r22
    1104:	b7 07       	cpc	r27, r23
    1106:	10 f0       	brcs	.+4      	; 0x110c <__udivmodhi4_ep>
    1108:	a6 1b       	sub	r26, r22
    110a:	b7 0b       	sbc	r27, r23

0000110c <__udivmodhi4_ep>:
    110c:	88 1f       	adc	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	5a 95       	dec	r21
    1112:	a9 f7       	brne	.-22     	; 0x10fe <__udivmodhi4_loop>
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	08 95       	ret

0000111e <__tablejump2__>:
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	05 90       	lpm	r0, Z+
    1124:	f4 91       	lpm	r31, Z
    1126:	e0 2d       	mov	r30, r0
    1128:	09 94       	ijmp

0000112a <__do_global_dtors>:
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	c3 e6       	ldi	r28, 0x63	; 99
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	04 c0       	rjmp	.+8      	; 0x113a <__do_global_dtors+0x10>
    1132:	fe 01       	movw	r30, r28
    1134:	0e 94 8f 08 	call	0x111e	; 0x111e <__tablejump2__>
    1138:	21 96       	adiw	r28, 0x01	; 1
    113a:	c4 36       	cpi	r28, 0x64	; 100
    113c:	d1 07       	cpc	r29, r17
    113e:	c9 f7       	brne	.-14     	; 0x1132 <__do_global_dtors+0x8>
    1140:	f8 94       	cli

00001142 <__stop_program>:
    1142:	ff cf       	rjmp	.-2      	; 0x1142 <__stop_program>
