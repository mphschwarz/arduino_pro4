
dojo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000c10  00000ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  00800124  00800124  00000cc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ae48  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002088  00000000  00000000  0000bf48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023be  00000000  00000000  0000dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b18  00000000  00000000  00010390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000284d  00000000  00000000  00010ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040f3  00000000  00000000  000136f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  000177e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_3>
  10:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_3>
  14:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_3>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 df 03 	jmp	0x7be	; 0x7be <__vector_16>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_18>
  4c:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_19>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	47 01       	movw	r8, r14
  c4:	78 03       	fmul	r23, r16

000000c6 <__ctors_end>:
  c6:	55 01       	movw	r10, r10

000000c8 <__dtors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e0 e1       	ldi	r30, 0x10	; 16
  dc:	fc e0       	ldi	r31, 0x0C	; 12
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a4 32       	cpi	r26, 0x24	; 36
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	a4 e2       	ldi	r26, 0x24	; 36
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ac 34       	cpi	r26, 0x4C	; 76
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c3 e6       	ldi	r28, 0x63	; 99
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	fe 01       	movw	r30, r28
 106:	0e 94 f5 05 	call	0xbea	; 0xbea <__tablejump2__>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	d1 07       	cpc	r29, r17
 10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
 110:	0e 94 a6 03 	call	0x74c	; 0x74c <main>
 114:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__do_global_dtors>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_Z14sendWTVcommandj>:
void scan()
{
	testComparing(scanClosestBeacon()); 
}

void sendWTVcommand(unsigned int command){
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	8c 01       	movw	r16, r24
	  digitalWrite(WTV_CLK, LOW);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	8d e0       	ldi	r24, 0x0D	; 13
 128:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	87 ed       	ldi	r24, 0xD7	; 215
 12e:	9e e0       	ldi	r25, 0x0E	; 14
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <_Z14sendWTVcommandj+0x14>
 134:	00 c0       	rjmp	.+0      	; 0x136 <_Z14sendWTVcommandj+0x1a>
 136:	00 00       	nop
 138:	c0 e1       	ldi	r28, 0x10	; 16
 13a:	87 ec       	ldi	r24, 0xC7	; 199
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <_Z14sendWTVcommandj+0x22>
 142:	00 c0       	rjmp	.+0      	; 0x144 <_Z14sendWTVcommandj+0x28>
 144:	00 00       	nop
	  _delay_us(1900);
	  for (byte i = 0; i < 16; i++)
	  {
		  //delayMicroseconds(100);
		  _delay_us(100);
		  digitalWrite(WTV_CLK, LOW);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
		  digitalWrite(WTV_DOUT, LOW);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
		  if ((command & 0x8000) != 0)
 156:	17 ff       	sbrs	r17, 7
 158:	04 c0       	rjmp	.+8      	; 0x162 <_Z14sendWTVcommandj+0x46>
		  {
			  digitalWrite(WTV_DOUT, HIGH);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
 162:	87 ec       	ldi	r24, 0xC7	; 199
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <_Z14sendWTVcommandj+0x4a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <_Z14sendWTVcommandj+0x50>
 16c:	00 00       	nop
		  }
		  //delayMicroseconds(100);
		  _delay_us(100);
		  digitalWrite(WTV_CLK, HIGH);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
		  command = command<<1;
 176:	00 0f       	add	r16, r16
 178:	11 1f       	adc	r17, r17
 17a:	c1 50       	subi	r28, 0x01	; 1

void sendWTVcommand(unsigned int command){
	  digitalWrite(WTV_CLK, LOW);
	  //delayMicroseconds(1900);
	  _delay_us(1900);
	  for (byte i = 0; i < 16; i++)
 17c:	f1 f6       	brne	.-68     	; 0x13a <_Z14sendWTVcommandj+0x1e>
		  //delayMicroseconds(100);
		  _delay_us(100);
		  digitalWrite(WTV_CLK, HIGH);
		  command = command<<1;
	  }
}
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <_Z8resetWTVv>:

void resetWTV()
{
	digitalWrite(WTV_RESET, LOW);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	89 e0       	ldi	r24, 0x09	; 9
 18a:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	80 e7       	ldi	r24, 0x70	; 112
 192:	92 e0       	ldi	r25, 0x02	; 2
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <_Z8resetWTVv+0xe>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_Z8resetWTVv+0x18>
 19e:	00 00       	nop
	_delay_ms(100);
	digitalWrite(WTV_RESET, HIGH);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	89 e0       	ldi	r24, 0x09	; 9
 1a4:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	84 e3       	ldi	r24, 0x34	; 52
 1ac:	9c e0       	ldi	r25, 0x0C	; 12
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <_Z8resetWTVv+0x28>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <_Z8resetWTVv+0x32>
 1b8:	00 00       	nop
 1ba:	08 95       	ret

000001bc <_Z11pinSetupWTVv>:
	_delay_ms(500);
}

void pinSetupWTV()
{
	 pinMode(WTV_RESET, OUTPUT);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	89 e0       	ldi	r24, 0x09	; 9
 1c0:	0e 94 8d 04 	call	0x91a	; 0x91a <pinMode>
	 digitalWrite(WTV_RESET, LOW);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	89 e0       	ldi	r24, 0x09	; 9
 1c8:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
	 pinMode(WTV_DOUT, OUTPUT);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	8c e0       	ldi	r24, 0x0C	; 12
 1d0:	0e 94 8d 04 	call	0x91a	; 0x91a <pinMode>
	 digitalWrite(WTV_DOUT, HIGH);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	8c e0       	ldi	r24, 0x0C	; 12
 1d8:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
	 pinMode(WTV_CLK, OUTPUT);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	0e 94 8d 04 	call	0x91a	; 0x91a <pinMode>
	 digitalWrite(WTV_CLK, HIGH);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	8d e0       	ldi	r24, 0x0D	; 13
 1e8:	0c 94 c9 04 	jmp	0x992	; 0x992 <digitalWrite>

000001ec <setup>:
void setup()
{
	//mySerial.begin(9600);
	//BTSerial.begin(9600);
	
	DDRC = 0xff;				//set all PINS to output
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;
 1f0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xff;
 1f2:	84 b9       	out	0x04, r24	; 4
	
	PORTC = 0b00011010;
 1f4:	8a e1       	ldi	r24, 0x1A	; 26
 1f6:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b00000000;
 1f8:	15 b8       	out	0x05, r1	; 5
	
	pinSetupWTV();
 1fa:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z11pinSetupWTVv>
	pinMode(4, OUTPUT);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	0c 94 8d 04 	jmp	0x91a	; 0x91a <pinMode>

00000206 <loop>:
// 	delay(1000);
//	firstResponse();
// 	BTSerial.print("U");

byte file = 0;
		resetWTV();
 206:	0e 94 c3 00 	call	0x186	; 0x186 <_Z8resetWTVv>
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	80 e7       	ldi	r24, 0x70	; 112
 20e:	92 e0       	ldi	r25, 0x02	; 2
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <loop+0xa>
 218:	00 c0       	rjmp	.+0      	; 0x21a <loop+0x14>
 21a:	00 00       	nop
		_delay_ms(100);
		sendWTVcommand(0xFFF2);
 21c:	82 ef       	ldi	r24, 0xF2	; 242
 21e:	9f ef       	ldi	r25, 0xFF	; 255
 220:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z14sendWTVcommandj>
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	80 e7       	ldi	r24, 0x70	; 112
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <loop+0x24>
 232:	00 c0       	rjmp	.+0      	; 0x234 <loop+0x2e>
 234:	00 00       	nop
		_delay_ms(100);
		sendWTVcommand((unsigned int) file );
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z14sendWTVcommandj>
		sendWTVcommand(OPCODE_PLAY_PAUSE);
 23e:	8e ef       	ldi	r24, 0xFE	; 254
 240:	9f ef       	ldi	r25, 0xFF	; 255
 242:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z14sendWTVcommandj>
		
	digitalWrite(4, HIGH);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	84 e3       	ldi	r24, 0x34	; 52
 252:	9c e0       	ldi	r25, 0x0C	; 12
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <loop+0x4e>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <loop+0x58>
 25e:	00 00       	nop
	_delay_ms(500);
	digitalWrite(4, LOW);
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	84 e3       	ldi	r24, 0x34	; 52
 26c:	9c e0       	ldi	r25, 0x0C	; 12
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <loop+0x68>
 276:	00 c0       	rjmp	.+0      	; 0x278 <loop+0x72>
 278:	00 00       	nop
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	83 e2       	ldi	r24, 0x23	; 35
 27e:	94 ef       	ldi	r25, 0xF4	; 244
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <loop+0x7a>
 288:	00 c0       	rjmp	.+0      	; 0x28a <loop+0x84>
 28a:	00 00       	nop
 28c:	08 95       	ret

0000028e <_GLOBAL__sub_I_mySerial>:

#include <SoftwareSerial.h>
#include <Time.h>
#include "include\Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	83 e4       	ldi	r24, 0x43	; 67
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <_ZN14SoftwareSerialC1Ehhb>
SoftwareSerial BTSerial(2,3);	//(RX | TX) - PINS
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	43 e0       	ldi	r20, 0x03	; 3
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	84 e2       	ldi	r24, 0x24	; 36
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <_ZN14SoftwareSerialC1Ehhb>

000002aa <_GLOBAL__sub_D_mySerial>:
 2aa:	84 e2       	ldi	r24, 0x24	; 36
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 92 02 	call	0x524	; 0x524 <_ZN14SoftwareSerialD1Ev>

#include <SoftwareSerial.h>
#include <Time.h>
#include "include\Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
 2b2:	83 e4       	ldi	r24, 0x43	; 67
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0c 94 92 02 	jmp	0x524	; 0x524 <_ZN14SoftwareSerialD1Ev>

000002ba <_ZN5Print17availableForWriteEv>:
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
}
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	08 95       	ret

000002c0 <_ZN14SoftwareSerial4readEv>:
 2c0:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <_ZN14SoftwareSerial13active_objectE>
 2c4:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <_ZN14SoftwareSerial13active_objectE+0x1>
 2c8:	28 17       	cp	r18, r24
 2ca:	39 07       	cpc	r19, r25
 2cc:	b9 f4       	brne	.+46     	; 0x2fc <_ZN14SoftwareSerial4readEv+0x3c>
 2ce:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <_ZN14SoftwareSerial20_receive_buffer_headE>
 2d2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 2d6:	98 17       	cp	r25, r24
 2d8:	89 f0       	breq	.+34     	; 0x2fc <_ZN14SoftwareSerial4readEv+0x3c>
 2da:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_ZN14SoftwareSerial20_receive_buffer_headE>
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ec 59       	subi	r30, 0x9C	; 156
 2e2:	fe 4f       	sbci	r31, 0xFE	; 254
 2e4:	80 81       	ld	r24, Z
 2e6:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <_ZN14SoftwareSerial20_receive_buffer_headE>
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	2f 5f       	subi	r18, 0xFF	; 255
 2ee:	3f 4f       	sbci	r19, 0xFF	; 255
 2f0:	2f 73       	andi	r18, 0x3F	; 63
 2f2:	33 27       	eor	r19, r19
 2f4:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <_ZN14SoftwareSerial20_receive_buffer_headE>
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	08 95       	ret
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	9f ef       	ldi	r25, 0xFF	; 255
 300:	08 95       	ret

00000302 <_ZN14SoftwareSerial5writeEh>:
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	dc 01       	movw	r26, r24
 30a:	5c 96       	adiw	r26, 0x1c	; 28
 30c:	8d 91       	ld	r24, X+
 30e:	9c 91       	ld	r25, X
 310:	5d 97       	sbiw	r26, 0x1d	; 29
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	39 f4       	brne	.+14     	; 0x324 <_ZN14SoftwareSerial5writeEh+0x22>
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	13 96       	adiw	r26, 0x03	; 3
 31c:	3c 93       	st	X, r19
 31e:	2e 93       	st	-X, r18
 320:	12 97       	sbiw	r26, 0x02	; 2
 322:	3b c0       	rjmp	.+118    	; 0x39a <_ZN14SoftwareSerial5writeEh+0x98>
 324:	51 96       	adiw	r26, 0x11	; 17
 326:	ed 91       	ld	r30, X+
 328:	fc 91       	ld	r31, X
 32a:	52 97       	sbiw	r26, 0x12	; 18
 32c:	50 96       	adiw	r26, 0x10	; 16
 32e:	2c 91       	ld	r18, X
 330:	50 97       	sbiw	r26, 0x10	; 16
 332:	32 2f       	mov	r19, r18
 334:	30 95       	com	r19
 336:	1f b7       	in	r17, 0x3f	; 63
 338:	5e 96       	adiw	r26, 0x1e	; 30
 33a:	4c 91       	ld	r20, X
 33c:	5e 97       	sbiw	r26, 0x1e	; 30
 33e:	74 2f       	mov	r23, r20
 340:	72 70       	andi	r23, 0x02	; 2
 342:	41 fd       	sbrc	r20, 1
 344:	60 95       	com	r22
 346:	f8 94       	cli
 348:	40 81       	ld	r20, Z
 34a:	77 23       	and	r23, r23
 34c:	11 f0       	breq	.+4      	; 0x352 <_ZN14SoftwareSerial5writeEh+0x50>
 34e:	42 2b       	or	r20, r18
 350:	01 c0       	rjmp	.+2      	; 0x354 <_ZN14SoftwareSerial5writeEh+0x52>
 352:	43 23       	and	r20, r19
 354:	40 83       	st	Z, r20
 356:	ec 01       	movw	r28, r24
 358:	21 97       	sbiw	r28, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <_ZN14SoftwareSerial5writeEh+0x56>
 35c:	48 e0       	ldi	r20, 0x08	; 8
 35e:	50 81       	ld	r21, Z
 360:	60 ff       	sbrs	r22, 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <_ZN14SoftwareSerial5writeEh+0x66>
 364:	52 2b       	or	r21, r18
 366:	01 c0       	rjmp	.+2      	; 0x36a <_ZN14SoftwareSerial5writeEh+0x68>
 368:	53 23       	and	r21, r19
 36a:	50 83       	st	Z, r21
 36c:	ec 01       	movw	r28, r24
 36e:	21 97       	sbiw	r28, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <_ZN14SoftwareSerial5writeEh+0x6c>
 372:	66 95       	lsr	r22
 374:	41 50       	subi	r20, 0x01	; 1
 376:	99 f7       	brne	.-26     	; 0x35e <_ZN14SoftwareSerial5writeEh+0x5c>
 378:	80 81       	ld	r24, Z
 37a:	77 23       	and	r23, r23
 37c:	19 f0       	breq	.+6      	; 0x384 <_ZN14SoftwareSerial5writeEh+0x82>
 37e:	83 23       	and	r24, r19
 380:	80 83       	st	Z, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <_ZN14SoftwareSerial5writeEh+0x86>
 384:	28 2b       	or	r18, r24
 386:	20 83       	st	Z, r18
 388:	1f bf       	out	0x3f, r17	; 63
 38a:	5c 96       	adiw	r26, 0x1c	; 28
 38c:	8d 91       	ld	r24, X+
 38e:	9c 91       	ld	r25, X
 390:	5d 97       	sbiw	r26, 0x1d	; 29
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <_ZN14SoftwareSerial5writeEh+0x90>
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	08 95       	ret

000003a2 <_ZN14SoftwareSerial5flushEv>:
 3a2:	08 95       	ret

000003a4 <_ZN14SoftwareSerial4peekEv>:
 3a4:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <_ZN14SoftwareSerial13active_objectE>
 3a8:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <_ZN14SoftwareSerial13active_objectE+0x1>
 3ac:	28 17       	cp	r18, r24
 3ae:	39 07       	cpc	r19, r25
 3b0:	71 f4       	brne	.+28     	; 0x3ce <_ZN14SoftwareSerial4peekEv+0x2a>
 3b2:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <_ZN14SoftwareSerial20_receive_buffer_headE>
 3b6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 3ba:	98 17       	cp	r25, r24
 3bc:	41 f0       	breq	.+16     	; 0x3ce <_ZN14SoftwareSerial4peekEv+0x2a>
 3be:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_ZN14SoftwareSerial20_receive_buffer_headE>
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	ec 59       	subi	r30, 0x9C	; 156
 3c6:	fe 4f       	sbci	r31, 0xFE	; 254
 3c8:	80 81       	ld	r24, Z
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	08 95       	ret
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	9f ef       	ldi	r25, 0xFF	; 255
 3d2:	08 95       	ret

000003d4 <_ZN14SoftwareSerial9availableEv>:
 3d4:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <_ZN14SoftwareSerial13active_objectE>
 3d8:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <_ZN14SoftwareSerial13active_objectE+0x1>
 3dc:	28 17       	cp	r18, r24
 3de:	39 07       	cpc	r19, r25
 3e0:	71 f4       	brne	.+28     	; 0x3fe <_ZN14SoftwareSerial9availableEv+0x2a>
 3e2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 3e6:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <_ZN14SoftwareSerial20_receive_buffer_headE>
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	80 5c       	subi	r24, 0xC0	; 192
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	82 1b       	sub	r24, r18
 3f2:	91 09       	sbc	r25, r1
 3f4:	60 e4       	ldi	r22, 0x40	; 64
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__divmodhi4>
 3fc:	08 95       	ret
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	08 95       	ret

00000404 <_ZN14SoftwareSerial13stopListeningEv>:
 404:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <_ZN14SoftwareSerial13active_objectE>
 408:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <_ZN14SoftwareSerial13active_objectE+0x1>
 40c:	e8 17       	cp	r30, r24
 40e:	f9 07       	cpc	r31, r25
 410:	69 f4       	brne	.+26     	; 0x42c <_ZN14SoftwareSerial13stopListeningEv+0x28>
 412:	a3 89       	ldd	r26, Z+19	; 0x13
 414:	b4 89       	ldd	r27, Z+20	; 0x14
 416:	9c 91       	ld	r25, X
 418:	85 89       	ldd	r24, Z+21	; 0x15
 41a:	80 95       	com	r24
 41c:	89 23       	and	r24, r25
 41e:	8c 93       	st	X, r24
 420:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <_ZN14SoftwareSerial13active_objectE+0x1>
 424:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <_ZN14SoftwareSerial13active_objectE>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	08 95       	ret
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret

00000430 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
 452:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <_ZN14SoftwareSerial13active_objectE>
 456:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <_ZN14SoftwareSerial13active_objectE+0x1>
 45a:	30 97       	sbiw	r30, 0x00	; 0
 45c:	09 f4       	brne	.+2      	; 0x460 <__vector_3+0x30>
 45e:	51 c0       	rjmp	.+162    	; 0x502 <__vector_3+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 460:	96 8d       	ldd	r25, Z+30	; 0x1e
 462:	a6 85       	ldd	r26, Z+14	; 0x0e
 464:	b7 85       	ldd	r27, Z+15	; 0x0f
 466:	85 85       	ldd	r24, Z+13	; 0x0d
 468:	91 ff       	sbrs	r25, 1
 46a:	04 c0       	rjmp	.+8      	; 0x474 <__vector_3+0x44>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 46c:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 46e:	89 23       	and	r24, r25
 470:	29 f4       	brne	.+10     	; 0x47c <__vector_3+0x4c>
 472:	47 c0       	rjmp	.+142    	; 0x502 <__vector_3+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 474:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 476:	89 23       	and	r24, r25
 478:	09 f0       	breq	.+2      	; 0x47c <__vector_3+0x4c>
 47a:	43 c0       	rjmp	.+134    	; 0x502 <__vector_3+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
 47c:	a3 89       	ldd	r26, Z+19	; 0x13
 47e:	b4 89       	ldd	r27, Z+20	; 0x14
 480:	9c 91       	ld	r25, X
 482:	85 89       	ldd	r24, Z+21	; 0x15
 484:	80 95       	com	r24
 486:	89 23       	and	r24, r25
 488:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 48a:	86 89       	ldd	r24, Z+22	; 0x16
 48c:	97 89       	ldd	r25, Z+23	; 0x17
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <__vector_3+0x5e>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
 492:	60 8d       	ldd	r22, Z+24	; 0x18
 494:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 496:	a6 85       	ldd	r26, Z+14	; 0x0e
 498:	b7 85       	ldd	r27, Z+15	; 0x0f
 49a:	55 85       	ldd	r21, Z+13	; 0x0d
 49c:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	cb 01       	movw	r24, r22
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__vector_3+0x72>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
 4a6:	82 2f       	mov	r24, r18
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	95 95       	asr	r25
 4ac:	87 95       	ror	r24
 4ae:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 4b0:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
 4b2:	45 23       	and	r20, r21
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__vector_3+0x88>
        d |= 0x80;
 4b6:	20 68       	ori	r18, 0x80	; 128
 4b8:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
 4ba:	91 f7       	brne	.-28     	; 0x4a0 <__vector_3+0x70>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
 4bc:	86 8d       	ldd	r24, Z+30	; 0x1e
 4be:	81 fd       	sbrc	r24, 1
      d = ~d;
 4c0:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
 4c2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	8f 73       	andi	r24, 0x3F	; 63
 4cc:	99 27       	eor	r25, r25
    if (next != _receive_buffer_head)
 4ce:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <_ZN14SoftwareSerial20_receive_buffer_headE>
 4d2:	38 17       	cp	r19, r24
 4d4:	49 f0       	breq	.+18     	; 0x4e8 <__vector_3+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
 4d6:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	ac 59       	subi	r26, 0x9C	; 156
 4de:	be 4f       	sbci	r27, 0xFE	; 254
 4e0:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
 4e2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <__vector_3+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
 4e8:	86 8d       	ldd	r24, Z+30	; 0x1e
 4ea:	81 60       	ori	r24, 0x01	; 1
 4ec:	86 8f       	std	Z+30, r24	; 0x1e
 4ee:	82 8d       	ldd	r24, Z+26	; 0x1a
 4f0:	93 8d       	ldd	r25, Z+27	; 0x1b
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__vector_3+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
 4f6:	a3 89       	ldd	r26, Z+19	; 0x13
 4f8:	b4 89       	ldd	r27, Z+20	; 0x14
 4fa:	9c 91       	ld	r25, X
 4fc:	85 89       	ldd	r24, Z+21	; 0x15
 4fe:	89 2b       	or	r24, r25
 500:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
 524:	24 e0       	ldi	r18, 0x04	; 4
 526:	31 e0       	ldi	r19, 0x01	; 1
 528:	fc 01       	movw	r30, r24
 52a:	31 83       	std	Z+1, r19	; 0x01
 52c:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
 52e:	0c 94 02 02 	jmp	0x404	; 0x404 <_ZN14SoftwareSerial13stopListeningEv>

00000532 <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
 532:	1f 93       	push	r17
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
 53a:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output high. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
 53c:	6e 8d       	ldd	r22, Y+30	; 0x1e
 53e:	66 95       	lsr	r22
 540:	61 70       	andi	r22, 0x01	; 1
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	68 27       	eor	r22, r24
 546:	81 2f       	mov	r24, r17
 548:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
  pinMode(tx, OUTPUT);
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	81 2f       	mov	r24, r17
 550:	0e 94 8d 04 	call	0x91a	; 0x91a <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
 554:	81 2f       	mov	r24, r17
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	fc 01       	movw	r30, r24
 55a:	e4 58       	subi	r30, 0x84	; 132
 55c:	ff 4f       	sbci	r31, 0xFF	; 255
 55e:	e4 91       	lpm	r30, Z
 560:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
 562:	fc 01       	movw	r30, r24
 564:	e0 57       	subi	r30, 0x70	; 112
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	ee 0f       	add	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	e2 55       	subi	r30, 0x52	; 82
 572:	ff 4f       	sbci	r31, 0xFF	; 255
 574:	85 91       	lpm	r24, Z+
 576:	94 91       	lpm	r25, Z
 578:	9a 8b       	std	Y+18, r25	; 0x12
 57a:	89 8b       	std	Y+17, r24	; 0x11
}
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	08 95       	ret

00000584 <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	ec 01       	movw	r28, r24
 58c:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	81 2f       	mov	r24, r17
 592:	0e 94 8d 04 	call	0x91a	; 0x91a <pinMode>
  if (!_inverse_logic)
 596:	8e 8d       	ldd	r24, Y+30	; 0x1e
 598:	81 fd       	sbrc	r24, 1
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	81 2f       	mov	r24, r17
 5a0:	0e 94 c9 04 	call	0x992	; 0x992 <digitalWrite>
  _receivePin = rx;
 5a4:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
 5a6:	81 2f       	mov	r24, r17
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	fc 01       	movw	r30, r24
 5ac:	e4 58       	subi	r30, 0x84	; 132
 5ae:	ff 4f       	sbci	r31, 0xFF	; 255
 5b0:	e4 91       	lpm	r30, Z
 5b2:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
 5b4:	fc 01       	movw	r30, r24
 5b6:	e0 57       	subi	r30, 0x70	; 112
 5b8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ba:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	ee 0f       	add	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	ec 55       	subi	r30, 0x5C	; 92
 5c4:	ff 4f       	sbci	r31, 0xFF	; 255
 5c6:	85 91       	lpm	r24, Z+
 5c8:	94 91       	lpm	r25, Z
 5ca:	9f 87       	std	Y+15, r25	; 0x0f
 5cc:	8e 87       	std	Y+14, r24	; 0x0e
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	08 95       	ret

000005d6 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	ec 01       	movw	r28, r24
 5de:	16 2f       	mov	r17, r22
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 5e0:	1b 82       	std	Y+3, r1	; 0x03
 5e2:	1a 82       	std	Y+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 5e4:	88 ee       	ldi	r24, 0xE8	; 232
 5e6:	93 e0       	ldi	r25, 0x03	; 3
 5e8:	a0 e0       	ldi	r26, 0x00	; 0
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	8c 83       	std	Y+4, r24	; 0x04
 5ee:	9d 83       	std	Y+5, r25	; 0x05
 5f0:	ae 83       	std	Y+6, r26	; 0x06
 5f2:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
 5f4:	84 e0       	ldi	r24, 0x04	; 4
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	99 83       	std	Y+1, r25	; 0x01
 5fa:	88 83       	st	Y, r24
 5fc:	1f 8a       	std	Y+23, r1	; 0x17
 5fe:	1e 8a       	std	Y+22, r1	; 0x16
 600:	19 8e       	std	Y+25, r1	; 0x19
 602:	18 8e       	std	Y+24, r1	; 0x18
 604:	1b 8e       	std	Y+27, r1	; 0x1b
 606:	1a 8e       	std	Y+26, r1	; 0x1a
 608:	1d 8e       	std	Y+29, r1	; 0x1d
 60a:	1c 8e       	std	Y+28, r1	; 0x1c
 60c:	8e 8d       	ldd	r24, Y+30	; 0x1e
 60e:	8e 7f       	andi	r24, 0xFE	; 254
 610:	20 fb       	bst	r18, 0
 612:	81 f9       	bld	r24, 1
 614:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
 616:	64 2f       	mov	r22, r20
 618:	ce 01       	movw	r24, r28
 61a:	0e 94 99 02 	call	0x532	; 0x532 <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
 61e:	61 2f       	mov	r22, r17
 620:	ce 01       	movw	r24, r28
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
{
  setTX(transmitPin);
  setRX(receivePin);
 628:	0c 94 c2 02 	jmp	0x584	; 0x584 <_ZN14SoftwareSerial5setRXEh>

0000062c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	2f 93       	push	r18
 638:	8f 93       	push	r24
 63a:	9f 93       	push	r25
 63c:	ef 93       	push	r30
 63e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 640:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <Serial+0x10>
 644:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <Serial+0x11>
 648:	80 81       	ld	r24, Z
 64a:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <Serial+0x16>
 64e:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <Serial+0x17>
 652:	82 fd       	sbrc	r24, 2
 654:	12 c0       	rjmp	.+36     	; 0x67a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 656:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 658:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <Serial+0x19>
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 660:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <Serial+0x1a>
 664:	82 17       	cp	r24, r18
 666:	51 f0       	breq	.+20     	; 0x67c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 668:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <Serial+0x19>
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	ea 55       	subi	r30, 0x5A	; 90
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 674:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <Serial+0x19>
 678:	01 c0       	rjmp	.+2      	; 0x67c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 67a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 67c:	ff 91       	pop	r31
 67e:	ef 91       	pop	r30
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	2f 91       	pop	r18
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 6b2:	86 ea       	ldi	r24, 0xA6	; 166
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	bf 91       	pop	r27
 6c0:	af 91       	pop	r26
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	7f 91       	pop	r23
 6c8:	6f 91       	pop	r22
 6ca:	5f 91       	pop	r21
 6cc:	4f 91       	pop	r20
 6ce:	3f 91       	pop	r19
 6d0:	2f 91       	pop	r18
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 6dc:	86 ea       	ldi	r24, 0xA6	; 166
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN14HardwareSerial9availableEv>
 6e4:	21 e0       	ldi	r18, 0x01	; 1
 6e6:	89 2b       	or	r24, r25
 6e8:	09 f4       	brne	.+2      	; 0x6ec <_Z17Serial0_availablev+0x10>
 6ea:	20 e0       	ldi	r18, 0x00	; 0
}
 6ec:	82 2f       	mov	r24, r18
 6ee:	08 95       	ret

000006f0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 6f0:	e6 ea       	ldi	r30, 0xA6	; 166
 6f2:	f1 e0       	ldi	r31, 0x01	; 1
 6f4:	13 82       	std	Z+3, r1	; 0x03
 6f6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 6f8:	88 ee       	ldi	r24, 0xE8	; 232
 6fa:	93 e0       	ldi	r25, 0x03	; 3
 6fc:	a0 e0       	ldi	r26, 0x00	; 0
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	84 83       	std	Z+4, r24	; 0x04
 702:	95 83       	std	Z+5, r25	; 0x05
 704:	a6 83       	std	Z+6, r26	; 0x06
 706:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 708:	86 e1       	ldi	r24, 0x16	; 22
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	91 83       	std	Z+1, r25	; 0x01
 70e:	80 83       	st	Z, r24
 710:	85 ec       	ldi	r24, 0xC5	; 197
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	95 87       	std	Z+13, r25	; 0x0d
 716:	84 87       	std	Z+12, r24	; 0x0c
 718:	84 ec       	ldi	r24, 0xC4	; 196
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	97 87       	std	Z+15, r25	; 0x0f
 71e:	86 87       	std	Z+14, r24	; 0x0e
 720:	80 ec       	ldi	r24, 0xC0	; 192
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	91 8b       	std	Z+17, r25	; 0x11
 726:	80 8b       	std	Z+16, r24	; 0x10
 728:	81 ec       	ldi	r24, 0xC1	; 193
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	93 8b       	std	Z+19, r25	; 0x13
 72e:	82 8b       	std	Z+18, r24	; 0x12
 730:	82 ec       	ldi	r24, 0xC2	; 194
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	95 8b       	std	Z+21, r25	; 0x15
 736:	84 8b       	std	Z+20, r24	; 0x14
 738:	86 ec       	ldi	r24, 0xC6	; 198
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	97 8b       	std	Z+23, r25	; 0x17
 73e:	86 8b       	std	Z+22, r24	; 0x16
 740:	11 8e       	std	Z+25, r1	; 0x19
 742:	12 8e       	std	Z+26, r1	; 0x1a
 744:	13 8e       	std	Z+27, r1	; 0x1b
 746:	14 8e       	std	Z+28, r1	; 0x1c
 748:	08 95       	ret

0000074a <initVariant>:
 74a:	08 95       	ret

0000074c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 74c:	0e 94 29 04 	call	0x852	; 0x852 <init>

	initVariant();
 750:	0e 94 a5 03 	call	0x74a	; 0x74a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 754:	0e 94 f6 00 	call	0x1ec	; 0x1ec <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 758:	c5 e3       	ldi	r28, 0x35	; 53
 75a:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
 75c:	0e 94 03 01 	call	0x206	; 0x206 <loop>
		if (serialEventRun) serialEventRun();
 760:	20 97       	sbiw	r28, 0x00	; 0
 762:	e1 f3       	breq	.-8      	; 0x75c <main+0x10>
 764:	0e 94 35 05 	call	0xa6a	; 0xa6a <_Z14serialEventRunv>
 768:	f9 cf       	rjmp	.-14     	; 0x75c <main+0x10>

0000076a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 76a:	cf 92       	push	r12
 76c:	df 92       	push	r13
 76e:	ef 92       	push	r14
 770:	ff 92       	push	r15
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	6c 01       	movw	r12, r24
 77c:	7a 01       	movw	r14, r20
 77e:	8b 01       	movw	r16, r22
  size_t n = 0;
 780:	c0 e0       	ldi	r28, 0x00	; 0
 782:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 784:	ce 15       	cp	r28, r14
 786:	df 05       	cpc	r29, r15
 788:	81 f0       	breq	.+32     	; 0x7aa <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 78a:	d8 01       	movw	r26, r16
 78c:	6d 91       	ld	r22, X+
 78e:	8d 01       	movw	r16, r26
 790:	d6 01       	movw	r26, r12
 792:	ed 91       	ld	r30, X+
 794:	fc 91       	ld	r31, X
 796:	01 90       	ld	r0, Z+
 798:	f0 81       	ld	r31, Z
 79a:	e0 2d       	mov	r30, r0
 79c:	c6 01       	movw	r24, r12
 79e:	09 95       	icall
 7a0:	89 2b       	or	r24, r25
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <_ZN5Print5writeEPKhj+0x3e>
 7a4:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 7a6:	ee cf       	rjmp	.-36     	; 0x784 <_ZN5Print5writeEPKhj+0x1a>
 7a8:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 7aa:	c7 01       	movw	r24, r14
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	df 90       	pop	r13
 7ba:	cf 90       	pop	r12
 7bc:	08 95       	ret

000007be <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7be:	1f 92       	push	r1
 7c0:	0f 92       	push	r0
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
 7c8:	2f 93       	push	r18
 7ca:	3f 93       	push	r19
 7cc:	8f 93       	push	r24
 7ce:	9f 93       	push	r25
 7d0:	af 93       	push	r26
 7d2:	bf 93       	push	r27
 7d4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <timer0_millis>
 7d8:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <timer0_millis+0x1>
 7dc:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <timer0_millis+0x2>
 7e0:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <timer0_millis+0x3>
 7e4:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <timer0_fract>
 7e8:	23 e0       	ldi	r18, 0x03	; 3
 7ea:	23 0f       	add	r18, r19
 7ec:	2d 37       	cpi	r18, 0x7D	; 125
 7ee:	20 f4       	brcc	.+8      	; 0x7f8 <__vector_16+0x3a>
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	a1 1d       	adc	r26, r1
 7f4:	b1 1d       	adc	r27, r1
 7f6:	05 c0       	rjmp	.+10     	; 0x802 <__vector_16+0x44>
 7f8:	26 e8       	ldi	r18, 0x86	; 134
 7fa:	23 0f       	add	r18, r19
 7fc:	02 96       	adiw	r24, 0x02	; 2
 7fe:	a1 1d       	adc	r26, r1
 800:	b1 1d       	adc	r27, r1
 802:	20 93 43 02 	sts	0x0243, r18	; 0x800243 <timer0_fract>
 806:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <timer0_millis>
 80a:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <timer0_millis+0x1>
 80e:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <timer0_millis+0x2>
 812:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <timer0_millis+0x3>
 816:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <timer0_overflow_count>
 81a:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <timer0_overflow_count+0x1>
 81e:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <timer0_overflow_count+0x2>
 822:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <timer0_overflow_count+0x3>
 826:	01 96       	adiw	r24, 0x01	; 1
 828:	a1 1d       	adc	r26, r1
 82a:	b1 1d       	adc	r27, r1
 82c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <timer0_overflow_count>
 830:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <timer0_overflow_count+0x1>
 834:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <timer0_overflow_count+0x2>
 838:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <timer0_overflow_count+0x3>
 83c:	bf 91       	pop	r27
 83e:	af 91       	pop	r26
 840:	9f 91       	pop	r25
 842:	8f 91       	pop	r24
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 852:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 854:	84 b5       	in	r24, 0x24	; 36
 856:	82 60       	ori	r24, 0x02	; 2
 858:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 85a:	84 b5       	in	r24, 0x24	; 36
 85c:	81 60       	ori	r24, 0x01	; 1
 85e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 860:	85 b5       	in	r24, 0x25	; 37
 862:	82 60       	ori	r24, 0x02	; 2
 864:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 866:	85 b5       	in	r24, 0x25	; 37
 868:	81 60       	ori	r24, 0x01	; 1
 86a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 86c:	ee e6       	ldi	r30, 0x6E	; 110
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	81 60       	ori	r24, 0x01	; 1
 874:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 876:	e1 e8       	ldi	r30, 0x81	; 129
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 87c:	80 81       	ld	r24, Z
 87e:	82 60       	ori	r24, 0x02	; 2
 880:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 882:	80 81       	ld	r24, Z
 884:	81 60       	ori	r24, 0x01	; 1
 886:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 888:	e0 e8       	ldi	r30, 0x80	; 128
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	80 81       	ld	r24, Z
 88e:	81 60       	ori	r24, 0x01	; 1
 890:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 892:	e1 eb       	ldi	r30, 0xB1	; 177
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	84 60       	ori	r24, 0x04	; 4
 89a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 89c:	e0 eb       	ldi	r30, 0xB0	; 176
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	80 81       	ld	r24, Z
 8a2:	81 60       	ori	r24, 0x01	; 1
 8a4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 8a6:	ea e7       	ldi	r30, 0x7A	; 122
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	80 81       	ld	r24, Z
 8ac:	84 60       	ori	r24, 0x04	; 4
 8ae:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8b0:	80 81       	ld	r24, Z
 8b2:	82 60       	ori	r24, 0x02	; 2
 8b4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8b6:	80 81       	ld	r24, Z
 8b8:	81 60       	ori	r24, 0x01	; 1
 8ba:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8bc:	80 81       	ld	r24, Z
 8be:	80 68       	ori	r24, 0x80	; 128
 8c0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8c2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 8c6:	08 95       	ret

000008c8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 8c8:	83 30       	cpi	r24, 0x03	; 3
 8ca:	81 f0       	breq	.+32     	; 0x8ec <turnOffPWM+0x24>
 8cc:	28 f4       	brcc	.+10     	; 0x8d8 <turnOffPWM+0x10>
 8ce:	81 30       	cpi	r24, 0x01	; 1
 8d0:	99 f0       	breq	.+38     	; 0x8f8 <turnOffPWM+0x30>
 8d2:	82 30       	cpi	r24, 0x02	; 2
 8d4:	a1 f0       	breq	.+40     	; 0x8fe <turnOffPWM+0x36>
 8d6:	08 95       	ret
 8d8:	87 30       	cpi	r24, 0x07	; 7
 8da:	a9 f0       	breq	.+42     	; 0x906 <__stack+0x7>
 8dc:	88 30       	cpi	r24, 0x08	; 8
 8de:	b9 f0       	breq	.+46     	; 0x90e <__stack+0xf>
 8e0:	84 30       	cpi	r24, 0x04	; 4
 8e2:	d1 f4       	brne	.+52     	; 0x918 <__stack+0x19>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 8e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 8e8:	8f 7d       	andi	r24, 0xDF	; 223
 8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 8ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 8f0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 8f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 8f6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 8f8:	84 b5       	in	r24, 0x24	; 36
 8fa:	8f 77       	andi	r24, 0x7F	; 127
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0x3>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 8fe:	84 b5       	in	r24, 0x24	; 36
 900:	8f 7d       	andi	r24, 0xDF	; 223
 902:	84 bd       	out	0x24, r24	; 36
 904:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 906:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 90a:	8f 77       	andi	r24, 0x7F	; 127
 90c:	03 c0       	rjmp	.+6      	; 0x914 <__stack+0x15>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 90e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 912:	8f 7d       	andi	r24, 0xDF	; 223
 914:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 918:	08 95       	ret

0000091a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	fc 01       	movw	r30, r24
 922:	e4 58       	subi	r30, 0x84	; 132
 924:	ff 4f       	sbci	r31, 0xFF	; 255
 926:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 928:	fc 01       	movw	r30, r24
 92a:	e0 57       	subi	r30, 0x70	; 112
 92c:	ff 4f       	sbci	r31, 0xFF	; 255
 92e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 930:	88 23       	and	r24, r24
 932:	61 f1       	breq	.+88     	; 0x98c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	fc 01       	movw	r30, r24
 93c:	e8 54       	subi	r30, 0x48	; 72
 93e:	ff 4f       	sbci	r31, 0xFF	; 255
 940:	c5 91       	lpm	r28, Z+
 942:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 944:	fc 01       	movw	r30, r24
 946:	e2 55       	subi	r30, 0x52	; 82
 948:	ff 4f       	sbci	r31, 0xFF	; 255
 94a:	a5 91       	lpm	r26, Z+
 94c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 94e:	61 11       	cpse	r22, r1
 950:	09 c0       	rjmp	.+18     	; 0x964 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 952:	9f b7       	in	r25, 0x3f	; 63
                cli();
 954:	f8 94       	cli
		*reg &= ~bit;
 956:	88 81       	ld	r24, Y
 958:	20 95       	com	r18
 95a:	82 23       	and	r24, r18
 95c:	88 83       	st	Y, r24
		*out &= ~bit;
 95e:	ec 91       	ld	r30, X
 960:	2e 23       	and	r18, r30
 962:	0b c0       	rjmp	.+22     	; 0x97a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 964:	62 30       	cpi	r22, 0x02	; 2
 966:	61 f4       	brne	.+24     	; 0x980 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 968:	9f b7       	in	r25, 0x3f	; 63
                cli();
 96a:	f8 94       	cli
		*reg &= ~bit;
 96c:	88 81       	ld	r24, Y
 96e:	32 2f       	mov	r19, r18
 970:	30 95       	com	r19
 972:	83 23       	and	r24, r19
 974:	88 83       	st	Y, r24
		*out |= bit;
 976:	ec 91       	ld	r30, X
 978:	2e 2b       	or	r18, r30
 97a:	2c 93       	st	X, r18
		SREG = oldSREG;
 97c:	9f bf       	out	0x3f, r25	; 63
 97e:	06 c0       	rjmp	.+12     	; 0x98c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 980:	8f b7       	in	r24, 0x3f	; 63
                cli();
 982:	f8 94       	cli
		*reg |= bit;
 984:	e8 81       	ld	r30, Y
 986:	2e 2b       	or	r18, r30
 988:	28 83       	st	Y, r18
		SREG = oldSREG;
 98a:	8f bf       	out	0x3f, r24	; 63
	}
}
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	08 95       	ret

00000992 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 998:	28 2f       	mov	r18, r24
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	f9 01       	movw	r30, r18
 99e:	e8 59       	subi	r30, 0x98	; 152
 9a0:	ff 4f       	sbci	r31, 0xFF	; 255
 9a2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 9a4:	f9 01       	movw	r30, r18
 9a6:	e4 58       	subi	r30, 0x84	; 132
 9a8:	ff 4f       	sbci	r31, 0xFF	; 255
 9aa:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 9ac:	f9 01       	movw	r30, r18
 9ae:	e0 57       	subi	r30, 0x70	; 112
 9b0:	ff 4f       	sbci	r31, 0xFF	; 255
 9b2:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 9b4:	cc 23       	and	r28, r28
 9b6:	c1 f0       	breq	.+48     	; 0x9e8 <digitalWrite+0x56>
 9b8:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 9ba:	81 11       	cpse	r24, r1
 9bc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <turnOffPWM>

	out = portOutputRegister(port);
 9c0:	ec 2f       	mov	r30, r28
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	ee 0f       	add	r30, r30
 9c6:	ff 1f       	adc	r31, r31
 9c8:	e2 55       	subi	r30, 0x52	; 82
 9ca:	ff 4f       	sbci	r31, 0xFF	; 255
 9cc:	a5 91       	lpm	r26, Z+
 9ce:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 9d0:	9f b7       	in	r25, 0x3f	; 63
	cli();
 9d2:	f8 94       	cli

	if (val == LOW) {
 9d4:	11 11       	cpse	r17, r1
 9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <digitalWrite+0x4e>
		*out &= ~bit;
 9d8:	8c 91       	ld	r24, X
 9da:	d0 95       	com	r29
 9dc:	d8 23       	and	r29, r24
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <digitalWrite+0x52>
	} else {
		*out |= bit;
 9e0:	ec 91       	ld	r30, X
 9e2:	de 2b       	or	r29, r30
 9e4:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 9e6:	9f bf       	out	0x3f, r25	; 63
}
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	08 95       	ret

000009f0 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 9f0:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 9f2:	91 8d       	ldd	r25, Z+25	; 0x19
 9f4:	22 8d       	ldd	r18, Z+26	; 0x1a
 9f6:	89 2f       	mov	r24, r25
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	80 5c       	subi	r24, 0xC0	; 192
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	82 1b       	sub	r24, r18
 a00:	91 09       	sbc	r25, r1
}
 a02:	8f 73       	andi	r24, 0x3F	; 63
 a04:	99 27       	eor	r25, r25
 a06:	08 95       	ret

00000a08 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 a08:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 a0a:	91 8d       	ldd	r25, Z+25	; 0x19
 a0c:	82 8d       	ldd	r24, Z+26	; 0x1a
 a0e:	98 17       	cp	r25, r24
 a10:	31 f0       	breq	.+12     	; 0xa1e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 a12:	82 8d       	ldd	r24, Z+26	; 0x1a
 a14:	e8 0f       	add	r30, r24
 a16:	f1 1d       	adc	r31, r1
 a18:	85 8d       	ldd	r24, Z+29	; 0x1d
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 a1e:	8f ef       	ldi	r24, 0xFF	; 255
 a20:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 a22:	08 95       	ret

00000a24 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 a24:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 a26:	91 8d       	ldd	r25, Z+25	; 0x19
 a28:	82 8d       	ldd	r24, Z+26	; 0x1a
 a2a:	98 17       	cp	r25, r24
 a2c:	61 f0       	breq	.+24     	; 0xa46 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 a2e:	82 8d       	ldd	r24, Z+26	; 0x1a
 a30:	df 01       	movw	r26, r30
 a32:	a8 0f       	add	r26, r24
 a34:	b1 1d       	adc	r27, r1
 a36:	5d 96       	adiw	r26, 0x1d	; 29
 a38:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 a3a:	92 8d       	ldd	r25, Z+26	; 0x1a
 a3c:	9f 5f       	subi	r25, 0xFF	; 255
 a3e:	9f 73       	andi	r25, 0x3F	; 63
 a40:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 a46:	8f ef       	ldi	r24, 0xFF	; 255
 a48:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 a4a:	08 95       	ret

00000a4c <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 a4c:	fc 01       	movw	r30, r24
 a4e:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 a50:	44 8d       	ldd	r20, Z+28	; 0x1c
 a52:	25 2f       	mov	r18, r21
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	84 2f       	mov	r24, r20
 a58:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 a5a:	82 1b       	sub	r24, r18
 a5c:	93 0b       	sbc	r25, r19
 a5e:	54 17       	cp	r21, r20
 a60:	10 f0       	brcs	.+4      	; 0xa66 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 a62:	cf 96       	adiw	r24, 0x3f	; 63
 a64:	08 95       	ret
  return tail - head - 1;
 a66:	01 97       	sbiw	r24, 0x01	; 1
}
 a68:	08 95       	ret

00000a6a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 a6a:	8e e6       	ldi	r24, 0x6E	; 110
 a6c:	93 e0       	ldi	r25, 0x03	; 3
 a6e:	89 2b       	or	r24, r25
 a70:	49 f0       	breq	.+18     	; 0xa84 <_Z14serialEventRunv+0x1a>
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	89 2b       	or	r24, r25
 a78:	29 f0       	breq	.+10     	; 0xa84 <_Z14serialEventRunv+0x1a>
 a7a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_Z17Serial0_availablev>
 a7e:	81 11       	cpse	r24, r1
 a80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 a84:	08 95       	ret

00000a86 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 a86:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 a88:	84 8d       	ldd	r24, Z+28	; 0x1c
 a8a:	df 01       	movw	r26, r30
 a8c:	a8 0f       	add	r26, r24
 a8e:	b1 1d       	adc	r27, r1
 a90:	a3 5a       	subi	r26, 0xA3	; 163
 a92:	bf 4f       	sbci	r27, 0xFF	; 255
 a94:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 a96:	84 8d       	ldd	r24, Z+28	; 0x1c
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	01 96       	adiw	r24, 0x01	; 1
 a9c:	8f 73       	andi	r24, 0x3F	; 63
 a9e:	99 27       	eor	r25, r25
 aa0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 aa2:	a6 89       	ldd	r26, Z+22	; 0x16
 aa4:	b7 89       	ldd	r27, Z+23	; 0x17
 aa6:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 aa8:	a0 89       	ldd	r26, Z+16	; 0x10
 aaa:	b1 89       	ldd	r27, Z+17	; 0x11
 aac:	8c 91       	ld	r24, X
 aae:	80 64       	ori	r24, 0x40	; 64
 ab0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 ab2:	93 8d       	ldd	r25, Z+27	; 0x1b
 ab4:	84 8d       	ldd	r24, Z+28	; 0x1c
 ab6:	98 13       	cpse	r25, r24
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 aba:	02 88       	ldd	r0, Z+18	; 0x12
 abc:	f3 89       	ldd	r31, Z+19	; 0x13
 abe:	e0 2d       	mov	r30, r0
 ac0:	80 81       	ld	r24, Z
 ac2:	8f 7d       	andi	r24, 0xDF	; 223
 ac4:	80 83       	st	Z, r24
 ac6:	08 95       	ret

00000ac8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 ac8:	ef 92       	push	r14
 aca:	ff 92       	push	r15
 acc:	0f 93       	push	r16
 ace:	1f 93       	push	r17
 ad0:	cf 93       	push	r28
 ad2:	df 93       	push	r29
 ad4:	ec 01       	movw	r28, r24
  _written = true;
 ad6:	81 e0       	ldi	r24, 0x01	; 1
 ad8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 ada:	9b 8d       	ldd	r25, Y+27	; 0x1b
 adc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 ade:	98 13       	cpse	r25, r24
 ae0:	05 c0       	rjmp	.+10     	; 0xaec <_ZN14HardwareSerial5writeEh+0x24>
 ae2:	e8 89       	ldd	r30, Y+16	; 0x10
 ae4:	f9 89       	ldd	r31, Y+17	; 0x11
 ae6:	80 81       	ld	r24, Z
 ae8:	85 fd       	sbrc	r24, 5
 aea:	24 c0       	rjmp	.+72     	; 0xb34 <_ZN14HardwareSerial5writeEh+0x6c>
 aec:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 aee:	0b 8d       	ldd	r16, Y+27	; 0x1b
 af0:	10 e0       	ldi	r17, 0x00	; 0
 af2:	0f 5f       	subi	r16, 0xFF	; 255
 af4:	1f 4f       	sbci	r17, 0xFF	; 255
 af6:	0f 73       	andi	r16, 0x3F	; 63
 af8:	11 27       	eor	r17, r17
 afa:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 afc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 afe:	e8 12       	cpse	r14, r24
 b00:	0c c0       	rjmp	.+24     	; 0xb1a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	07 fc       	sbrc	r0, 7
 b06:	fa cf       	rjmp	.-12     	; 0xafc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 b08:	e8 89       	ldd	r30, Y+16	; 0x10
 b0a:	f9 89       	ldd	r31, Y+17	; 0x11
 b0c:	80 81       	ld	r24, Z
 b0e:	85 ff       	sbrs	r24, 5
 b10:	f5 cf       	rjmp	.-22     	; 0xafc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 b12:	ce 01       	movw	r24, r28
 b14:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 b18:	f1 cf       	rjmp	.-30     	; 0xafc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 b1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 b1c:	fe 01       	movw	r30, r28
 b1e:	e8 0f       	add	r30, r24
 b20:	f1 1d       	adc	r31, r1
 b22:	e3 5a       	subi	r30, 0xA3	; 163
 b24:	ff 4f       	sbci	r31, 0xFF	; 255
 b26:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 b28:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 b2a:	ea 89       	ldd	r30, Y+18	; 0x12
 b2c:	fb 89       	ldd	r31, Y+19	; 0x13
 b2e:	80 81       	ld	r24, Z
 b30:	80 62       	ori	r24, 0x20	; 32
 b32:	07 c0       	rjmp	.+14     	; 0xb42 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 b34:	ee 89       	ldd	r30, Y+22	; 0x16
 b36:	ff 89       	ldd	r31, Y+23	; 0x17
 b38:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 b3a:	e8 89       	ldd	r30, Y+16	; 0x10
 b3c:	f9 89       	ldd	r31, Y+17	; 0x11
 b3e:	80 81       	ld	r24, Z
 b40:	80 64       	ori	r24, 0x40	; 64
 b42:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	df 91       	pop	r29
 b4a:	cf 91       	pop	r28
 b4c:	1f 91       	pop	r17
 b4e:	0f 91       	pop	r16
 b50:	ff 90       	pop	r15
 b52:	ef 90       	pop	r14
 b54:	08 95       	ret

00000b56 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 b5c:	88 8d       	ldd	r24, Y+24	; 0x18
 b5e:	88 23       	and	r24, r24
 b60:	c9 f0       	breq	.+50     	; 0xb94 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 b62:	ea 89       	ldd	r30, Y+18	; 0x12
 b64:	fb 89       	ldd	r31, Y+19	; 0x13
 b66:	80 81       	ld	r24, Z
 b68:	85 fd       	sbrc	r24, 5
 b6a:	05 c0       	rjmp	.+10     	; 0xb76 <_ZN14HardwareSerial5flushEv+0x20>
 b6c:	a8 89       	ldd	r26, Y+16	; 0x10
 b6e:	b9 89       	ldd	r27, Y+17	; 0x11
 b70:	8c 91       	ld	r24, X
 b72:	86 fd       	sbrc	r24, 6
 b74:	0f c0       	rjmp	.+30     	; 0xb94 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 b76:	0f b6       	in	r0, 0x3f	; 63
 b78:	07 fc       	sbrc	r0, 7
 b7a:	f5 cf       	rjmp	.-22     	; 0xb66 <_ZN14HardwareSerial5flushEv+0x10>
 b7c:	80 81       	ld	r24, Z
 b7e:	85 ff       	sbrs	r24, 5
 b80:	f2 cf       	rjmp	.-28     	; 0xb66 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 b82:	a8 89       	ldd	r26, Y+16	; 0x10
 b84:	b9 89       	ldd	r27, Y+17	; 0x11
 b86:	8c 91       	ld	r24, X
 b88:	85 ff       	sbrs	r24, 5
 b8a:	ed cf       	rjmp	.-38     	; 0xb66 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 b8c:	ce 01       	movw	r24, r28
 b8e:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 b92:	e7 cf       	rjmp	.-50     	; 0xb62 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	08 95       	ret

00000b9a <__divmodhi4>:
 b9a:	97 fb       	bst	r25, 7
 b9c:	07 2e       	mov	r0, r23
 b9e:	16 f4       	brtc	.+4      	; 0xba4 <__divmodhi4+0xa>
 ba0:	00 94       	com	r0
 ba2:	07 d0       	rcall	.+14     	; 0xbb2 <__divmodhi4_neg1>
 ba4:	77 fd       	sbrc	r23, 7
 ba6:	09 d0       	rcall	.+18     	; 0xbba <__divmodhi4_neg2>
 ba8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__udivmodhi4>
 bac:	07 fc       	sbrc	r0, 7
 bae:	05 d0       	rcall	.+10     	; 0xbba <__divmodhi4_neg2>
 bb0:	3e f4       	brtc	.+14     	; 0xbc0 <__divmodhi4_exit>

00000bb2 <__divmodhi4_neg1>:
 bb2:	90 95       	com	r25
 bb4:	81 95       	neg	r24
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	08 95       	ret

00000bba <__divmodhi4_neg2>:
 bba:	70 95       	com	r23
 bbc:	61 95       	neg	r22
 bbe:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc0 <__divmodhi4_exit>:
 bc0:	08 95       	ret

00000bc2 <__udivmodhi4>:
 bc2:	aa 1b       	sub	r26, r26
 bc4:	bb 1b       	sub	r27, r27
 bc6:	51 e1       	ldi	r21, 0x11	; 17
 bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <__udivmodhi4_ep>

00000bca <__udivmodhi4_loop>:
 bca:	aa 1f       	adc	r26, r26
 bcc:	bb 1f       	adc	r27, r27
 bce:	a6 17       	cp	r26, r22
 bd0:	b7 07       	cpc	r27, r23
 bd2:	10 f0       	brcs	.+4      	; 0xbd8 <__udivmodhi4_ep>
 bd4:	a6 1b       	sub	r26, r22
 bd6:	b7 0b       	sbc	r27, r23

00000bd8 <__udivmodhi4_ep>:
 bd8:	88 1f       	adc	r24, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	5a 95       	dec	r21
 bde:	a9 f7       	brne	.-22     	; 0xbca <__udivmodhi4_loop>
 be0:	80 95       	com	r24
 be2:	90 95       	com	r25
 be4:	bc 01       	movw	r22, r24
 be6:	cd 01       	movw	r24, r26
 be8:	08 95       	ret

00000bea <__tablejump2__>:
 bea:	ee 0f       	add	r30, r30
 bec:	ff 1f       	adc	r31, r31
 bee:	05 90       	lpm	r0, Z+
 bf0:	f4 91       	lpm	r31, Z
 bf2:	e0 2d       	mov	r30, r0
 bf4:	09 94       	ijmp

00000bf6 <__do_global_dtors>:
 bf6:	10 e0       	ldi	r17, 0x00	; 0
 bf8:	c3 e6       	ldi	r28, 0x63	; 99
 bfa:	d0 e0       	ldi	r29, 0x00	; 0
 bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__do_global_dtors+0x10>
 bfe:	fe 01       	movw	r30, r28
 c00:	0e 94 f5 05 	call	0xbea	; 0xbea <__tablejump2__>
 c04:	21 96       	adiw	r28, 0x01	; 1
 c06:	c4 36       	cpi	r28, 0x64	; 100
 c08:	d1 07       	cpc	r29, r17
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__do_global_dtors+0x8>
 c0c:	f8 94       	cli

00000c0e <__stop_program>:
 c0e:	ff cf       	rjmp	.-2      	; 0xc0e <__stop_program>
