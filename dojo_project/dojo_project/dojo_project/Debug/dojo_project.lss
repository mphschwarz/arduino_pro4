
dojo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000d74  00000e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  00800140  00800140  00000e48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000af25  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021ad  00000000  00000000  0000c1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000255e  00000000  00000000  0000e36a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b2c  00000000  00000000  000108c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000286e  00000000  00000000  000113f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f85  00000000  00000000  00013c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  00017be7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_3>
  10:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_3>
  14:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__vector_3>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_16>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_18>
  4c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__vector_19>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	b8 00       	.word	0x00b8	; ????
  c4:	be 03       	fmulsu	r19, r22

000000c6 <__ctors_end>:
  c6:	c6 00       	.word	0x00c6	; ????

000000c8 <__dtors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e4 e7       	ldi	r30, 0x74	; 116
  dc:	fd e0       	ldi	r31, 0x0D	; 13
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a0 34       	cpi	r26, 0x40	; 64
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	a0 e4       	ldi	r26, 0x40	; 64
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a8 36       	cpi	r26, 0x68	; 104
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c3 e6       	ldi	r28, 0x63	; 99
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	fe 01       	movw	r30, r28
 106:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__tablejump2__>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	d1 07       	cpc	r29, r17
 10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
 110:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <main>
 114:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__do_global_dtors>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
SoftwareSerial BTSerial(2,3);	//(RX | TX) - PINS


void setup()
{
	mySerial.begin(9600);
 11c:	40 e8       	ldi	r20, 0x80	; 128
 11e:	55 e2       	ldi	r21, 0x25	; 37
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	8f e5       	ldi	r24, 0x5F	; 95
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN14SoftwareSerial5beginEl>
	BTSerial.begin(9600);
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	55 e2       	ldi	r21, 0x25	; 37
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN14SoftwareSerial5beginEl>
	
	DDRC = 0xff;				//set all PINS to output
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	87 b9       	out	0x07, r24	; 7
	//DDRD = 0xff;
	DDRB = 0xff;
 140:	84 b9       	out	0x04, r24	; 4
	
	PORTC = 0b00011010;
 142:	8a e1       	ldi	r24, 0x1A	; 26
 144:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b00000000;
 146:	15 b8       	out	0x05, r1	; 5
	
	pinSetupWTV();
 148:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z11pinSetupWTVv>
	
	pinMode(4, OUTPUT);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	0e 94 fe 04 	call	0x9fc	; 0x9fc <pinMode>
	
	//Setup LED Power on
	digitalWrite(PORTD4, LOW);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <digitalWrite>

0000015c <loop>:
	//firstResponse();
}

void loop()
{
	multiplexController(FTDI_PATH);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z19multiplexControlleri>
	mySerial.println("Hello World!");
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	71 e0       	ldi	r23, 0x01	; 1
 168:	8f e5       	ldi	r24, 0x5F	; 95
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0c 94 3e 04 	jmp	0x87c	; 0x87c <_ZN5Print7printlnEPKc>

00000170 <_GLOBAL__sub_I_mySerial>:
﻿// #include <Arduino.h>

// #include <Time.h>
#include "include/Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8f e5       	ldi	r24, 0x5F	; 95
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN14SoftwareSerialC1Ehhb>
SoftwareSerial BTSerial(2,3);	//(RX | TX) - PINS
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	43 e0       	ldi	r20, 0x03	; 3
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0c 94 a3 02 	jmp	0x546	; 0x546 <_ZN14SoftwareSerialC1Ehhb>

0000018c <_GLOBAL__sub_D_mySerial>:
 18c:	80 e4       	ldi	r24, 0x40	; 64
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN14SoftwareSerialD1Ev>
﻿// #include <Arduino.h>

// #include <Time.h>
#include "include/Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
 194:	8f e5       	ldi	r24, 0x5F	; 95
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0c 94 4a 02 	jmp	0x494	; 0x494 <_ZN14SoftwareSerialD1Ev>

0000019c <_Z19multiplexControlleri>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	98 b1       	in	r25, 0x08	; 8
 19e:	18 b8       	out	0x08, r1	; 8
 1a0:	98 b1       	in	r25, 0x08	; 8
 1a2:	89 2b       	or	r24, r25
 1a4:	88 b9       	out	0x08, r24	; 8
 1a6:	08 95       	ret

000001a8 <_Z11pinSetupWTVv>:
	_delay_ms(500);
}

void pinSetupWTV()
{
	pinMode(WTV_RESET, OUTPUT);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	89 e0       	ldi	r24, 0x09	; 9
 1ac:	0e 94 fe 04 	call	0x9fc	; 0x9fc <pinMode>
	digitalWrite(WTV_RESET, LOW);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	89 e0       	ldi	r24, 0x09	; 9
 1b4:	0e 94 3a 05 	call	0xa74	; 0xa74 <digitalWrite>
	pinMode(WTV_DOUT, OUTPUT);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <pinMode>
	digitalWrite(WTV_DOUT, HIGH);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	0e 94 3a 05 	call	0xa74	; 0xa74 <digitalWrite>
	pinMode(WTV_CLK, OUTPUT);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	8d e0       	ldi	r24, 0x0D	; 13
 1cc:	0e 94 fe 04 	call	0x9fc	; 0x9fc <pinMode>
	digitalWrite(WTV_CLK, HIGH);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	8d e0       	ldi	r24, 0x0D	; 13
 1d4:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <digitalWrite>

000001d8 <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret

000001de <_ZN14SoftwareSerial4readEv>:
 1de:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <_ZN14SoftwareSerial13active_objectE>
 1e2:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <_ZN14SoftwareSerial13active_objectE+0x1>
 1e6:	28 17       	cp	r18, r24
 1e8:	39 07       	cpc	r19, r25
 1ea:	b9 f4       	brne	.+46     	; 0x21a <_ZN14SoftwareSerial4readEv+0x3c>
 1ec:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 1f0:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <_ZN14SoftwareSerial20_receive_buffer_tailE>
 1f4:	98 17       	cp	r25, r24
 1f6:	89 f0       	breq	.+34     	; 0x21a <_ZN14SoftwareSerial4readEv+0x3c>
 1f8:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e0 58       	subi	r30, 0x80	; 128
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	80 81       	ld	r24, Z
 204:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	2f 73       	andi	r18, 0x3F	; 63
 210:	33 27       	eor	r19, r19
 212:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	08 95       	ret
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	08 95       	ret

00000220 <_ZN14SoftwareSerial5writeEh>:
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	dc 01       	movw	r26, r24
 228:	5c 96       	adiw	r26, 0x1c	; 28
 22a:	8d 91       	ld	r24, X+
 22c:	9c 91       	ld	r25, X
 22e:	5d 97       	sbiw	r26, 0x1d	; 29
 230:	00 97       	sbiw	r24, 0x00	; 0
 232:	39 f4       	brne	.+14     	; 0x242 <_ZN14SoftwareSerial5writeEh+0x22>
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	13 96       	adiw	r26, 0x03	; 3
 23a:	3c 93       	st	X, r19
 23c:	2e 93       	st	-X, r18
 23e:	12 97       	sbiw	r26, 0x02	; 2
 240:	3b c0       	rjmp	.+118    	; 0x2b8 <_ZN14SoftwareSerial5writeEh+0x98>
 242:	51 96       	adiw	r26, 0x11	; 17
 244:	ed 91       	ld	r30, X+
 246:	fc 91       	ld	r31, X
 248:	52 97       	sbiw	r26, 0x12	; 18
 24a:	50 96       	adiw	r26, 0x10	; 16
 24c:	2c 91       	ld	r18, X
 24e:	50 97       	sbiw	r26, 0x10	; 16
 250:	32 2f       	mov	r19, r18
 252:	30 95       	com	r19
 254:	1f b7       	in	r17, 0x3f	; 63
 256:	5e 96       	adiw	r26, 0x1e	; 30
 258:	4c 91       	ld	r20, X
 25a:	5e 97       	sbiw	r26, 0x1e	; 30
 25c:	74 2f       	mov	r23, r20
 25e:	72 70       	andi	r23, 0x02	; 2
 260:	41 fd       	sbrc	r20, 1
 262:	60 95       	com	r22
 264:	f8 94       	cli
 266:	40 81       	ld	r20, Z
 268:	77 23       	and	r23, r23
 26a:	11 f0       	breq	.+4      	; 0x270 <_ZN14SoftwareSerial5writeEh+0x50>
 26c:	42 2b       	or	r20, r18
 26e:	01 c0       	rjmp	.+2      	; 0x272 <_ZN14SoftwareSerial5writeEh+0x52>
 270:	43 23       	and	r20, r19
 272:	40 83       	st	Z, r20
 274:	ec 01       	movw	r28, r24
 276:	21 97       	sbiw	r28, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <_ZN14SoftwareSerial5writeEh+0x56>
 27a:	48 e0       	ldi	r20, 0x08	; 8
 27c:	50 81       	ld	r21, Z
 27e:	60 ff       	sbrs	r22, 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <_ZN14SoftwareSerial5writeEh+0x66>
 282:	52 2b       	or	r21, r18
 284:	01 c0       	rjmp	.+2      	; 0x288 <_ZN14SoftwareSerial5writeEh+0x68>
 286:	53 23       	and	r21, r19
 288:	50 83       	st	Z, r21
 28a:	ec 01       	movw	r28, r24
 28c:	21 97       	sbiw	r28, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <_ZN14SoftwareSerial5writeEh+0x6c>
 290:	66 95       	lsr	r22
 292:	41 50       	subi	r20, 0x01	; 1
 294:	99 f7       	brne	.-26     	; 0x27c <_ZN14SoftwareSerial5writeEh+0x5c>
 296:	80 81       	ld	r24, Z
 298:	77 23       	and	r23, r23
 29a:	19 f0       	breq	.+6      	; 0x2a2 <_ZN14SoftwareSerial5writeEh+0x82>
 29c:	83 23       	and	r24, r19
 29e:	80 83       	st	Z, r24
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_ZN14SoftwareSerial5writeEh+0x86>
 2a2:	28 2b       	or	r18, r24
 2a4:	20 83       	st	Z, r18
 2a6:	1f bf       	out	0x3f, r17	; 63
 2a8:	5c 96       	adiw	r26, 0x1c	; 28
 2aa:	8d 91       	ld	r24, X+
 2ac:	9c 91       	ld	r25, X
 2ae:	5d 97       	sbiw	r26, 0x1d	; 29
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <_ZN14SoftwareSerial5writeEh+0x90>
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	08 95       	ret

000002c0 <_ZN14SoftwareSerial5flushEv>:
 2c0:	08 95       	ret

000002c2 <_ZN14SoftwareSerial4peekEv>:
 2c2:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <_ZN14SoftwareSerial13active_objectE>
 2c6:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <_ZN14SoftwareSerial13active_objectE+0x1>
 2ca:	28 17       	cp	r18, r24
 2cc:	39 07       	cpc	r19, r25
 2ce:	71 f4       	brne	.+28     	; 0x2ec <_ZN14SoftwareSerial4peekEv+0x2a>
 2d0:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 2d4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <_ZN14SoftwareSerial20_receive_buffer_tailE>
 2d8:	98 17       	cp	r25, r24
 2da:	41 f0       	breq	.+16     	; 0x2ec <_ZN14SoftwareSerial4peekEv+0x2a>
 2dc:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	e0 58       	subi	r30, 0x80	; 128
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	80 81       	ld	r24, Z
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	08 95       	ret
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	9f ef       	ldi	r25, 0xFF	; 255
 2f0:	08 95       	ret

000002f2 <_ZN14SoftwareSerial9availableEv>:
 2f2:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <_ZN14SoftwareSerial13active_objectE>
 2f6:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <_ZN14SoftwareSerial13active_objectE+0x1>
 2fa:	28 17       	cp	r18, r24
 2fc:	39 07       	cpc	r19, r25
 2fe:	71 f4       	brne	.+28     	; 0x31c <_ZN14SoftwareSerial9availableEv+0x2a>
 300:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <_ZN14SoftwareSerial20_receive_buffer_tailE>
 304:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	80 5c       	subi	r24, 0xC0	; 192
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	82 1b       	sub	r24, r18
 310:	91 09       	sbc	r25, r1
 312:	60 e4       	ldi	r22, 0x40	; 64
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__divmodhi4>
 31a:	08 95       	ret
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret

00000322 <_ZN14SoftwareSerial13stopListeningEv>:
 322:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <_ZN14SoftwareSerial13active_objectE>
 326:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <_ZN14SoftwareSerial13active_objectE+0x1>
 32a:	e8 17       	cp	r30, r24
 32c:	f9 07       	cpc	r31, r25
 32e:	69 f4       	brne	.+26     	; 0x34a <_ZN14SoftwareSerial13stopListeningEv+0x28>
 330:	a3 89       	ldd	r26, Z+19	; 0x13
 332:	b4 89       	ldd	r27, Z+20	; 0x14
 334:	9c 91       	ld	r25, X
 336:	85 89       	ldd	r24, Z+21	; 0x15
 338:	80 95       	com	r24
 33a:	89 23       	and	r24, r25
 33c:	8c 93       	st	X, r24
 33e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <_ZN14SoftwareSerial13active_objectE+0x1>
 342:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <_ZN14SoftwareSerial13active_objectE>
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret

0000034e <_ZN14SoftwareSerial6listenEv>:
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	ec 01       	movw	r28, r24
 354:	8a 8d       	ldd	r24, Y+26	; 0x1a
 356:	9b 8d       	ldd	r25, Y+27	; 0x1b
 358:	89 2b       	or	r24, r25
 35a:	f1 f0       	breq	.+60     	; 0x398 <_ZN14SoftwareSerial6listenEv+0x4a>
 35c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <_ZN14SoftwareSerial13active_objectE>
 360:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <_ZN14SoftwareSerial13active_objectE+0x1>
 364:	c8 17       	cp	r28, r24
 366:	d9 07       	cpc	r29, r25
 368:	b9 f0       	breq	.+46     	; 0x398 <_ZN14SoftwareSerial6listenEv+0x4a>
 36a:	00 97       	sbiw	r24, 0x00	; 0
 36c:	11 f0       	breq	.+4      	; 0x372 <_ZN14SoftwareSerial6listenEv+0x24>
 36e:	0e 94 91 01 	call	0x322	; 0x322 <_ZN14SoftwareSerial13stopListeningEv>
 372:	8e 8d       	ldd	r24, Y+30	; 0x1e
 374:	8e 7f       	andi	r24, 0xFE	; 254
 376:	8e 8f       	std	Y+30, r24	; 0x1e
 378:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZN14SoftwareSerial20_receive_buffer_tailE>
 37c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 380:	d0 93 c1 01 	sts	0x01C1, r29	; 0x8001c1 <_ZN14SoftwareSerial13active_objectE+0x1>
 384:	c0 93 c0 01 	sts	0x01C0, r28	; 0x8001c0 <_ZN14SoftwareSerial13active_objectE>
 388:	eb 89       	ldd	r30, Y+19	; 0x13
 38a:	fc 89       	ldd	r31, Y+20	; 0x14
 38c:	90 81       	ld	r25, Z
 38e:	8d 89       	ldd	r24, Y+21	; 0x15
 390:	89 2b       	or	r24, r25
 392:	80 83       	st	Z, r24
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	01 c0       	rjmp	.+2      	; 0x39a <_ZN14SoftwareSerial6listenEv+0x4c>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <__vector_3>:
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
 3c2:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <_ZN14SoftwareSerial13active_objectE>
 3c6:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <_ZN14SoftwareSerial13active_objectE+0x1>
 3ca:	30 97       	sbiw	r30, 0x00	; 0
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <__vector_3+0x30>
 3ce:	51 c0       	rjmp	.+162    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 3d0:	96 8d       	ldd	r25, Z+30	; 0x1e
 3d2:	a6 85       	ldd	r26, Z+14	; 0x0e
 3d4:	b7 85       	ldd	r27, Z+15	; 0x0f
 3d6:	85 85       	ldd	r24, Z+13	; 0x0d
 3d8:	91 ff       	sbrs	r25, 1
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <__vector_3+0x44>
 3dc:	9c 91       	ld	r25, X
 3de:	89 23       	and	r24, r25
 3e0:	29 f4       	brne	.+10     	; 0x3ec <__vector_3+0x4c>
 3e2:	47 c0       	rjmp	.+142    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 3e4:	9c 91       	ld	r25, X
 3e6:	89 23       	and	r24, r25
 3e8:	09 f0       	breq	.+2      	; 0x3ec <__vector_3+0x4c>
 3ea:	43 c0       	rjmp	.+134    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 3ec:	a3 89       	ldd	r26, Z+19	; 0x13
 3ee:	b4 89       	ldd	r27, Z+20	; 0x14
 3f0:	9c 91       	ld	r25, X
 3f2:	85 89       	ldd	r24, Z+21	; 0x15
 3f4:	80 95       	com	r24
 3f6:	89 23       	and	r24, r25
 3f8:	8c 93       	st	X, r24
 3fa:	86 89       	ldd	r24, Z+22	; 0x16
 3fc:	97 89       	ldd	r25, Z+23	; 0x17
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <__vector_3+0x5e>
 402:	60 8d       	ldd	r22, Z+24	; 0x18
 404:	71 8d       	ldd	r23, Z+25	; 0x19
 406:	a6 85       	ldd	r26, Z+14	; 0x0e
 408:	b7 85       	ldd	r27, Z+15	; 0x0f
 40a:	55 85       	ldd	r21, Z+13	; 0x0d
 40c:	38 e0       	ldi	r19, 0x08	; 8
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	cb 01       	movw	r24, r22
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	82 2f       	mov	r24, r18
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	95 95       	asr	r25
 41c:	87 95       	ror	r24
 41e:	28 2f       	mov	r18, r24
 420:	4c 91       	ld	r20, X
 422:	45 23       	and	r20, r21
 424:	09 f0       	breq	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	20 68       	ori	r18, 0x80	; 128
 428:	31 50       	subi	r19, 0x01	; 1
 42a:	91 f7       	brne	.-28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 42c:	86 8d       	ldd	r24, Z+30	; 0x1e
 42e:	81 fd       	sbrc	r24, 1
 430:	20 95       	com	r18
 432:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <_ZN14SoftwareSerial20_receive_buffer_tailE>
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	8f 73       	andi	r24, 0x3F	; 63
 43c:	99 27       	eor	r25, r25
 43e:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <_ZN14SoftwareSerial20_receive_buffer_headE>
 442:	38 17       	cp	r19, r24
 444:	49 f0       	breq	.+18     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 446:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <_ZN14SoftwareSerial20_receive_buffer_tailE>
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	a0 58       	subi	r26, 0x80	; 128
 44e:	be 4f       	sbci	r27, 0xFE	; 254
 450:	2c 93       	st	X, r18
 452:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_ZN14SoftwareSerial20_receive_buffer_tailE>
 456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 458:	86 8d       	ldd	r24, Z+30	; 0x1e
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	86 8f       	std	Z+30, r24	; 0x1e
 45e:	82 8d       	ldd	r24, Z+26	; 0x1a
 460:	93 8d       	ldd	r25, Z+27	; 0x1b
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 466:	a3 89       	ldd	r26, Z+19	; 0x13
 468:	b4 89       	ldd	r27, Z+20	; 0x14
 46a:	9c 91       	ld	r25, X
 46c:	85 89       	ldd	r24, Z+21	; 0x15
 46e:	89 2b       	or	r24, r25
 470:	8c 93       	st	X, r24
 472:	ff 91       	pop	r31
 474:	ef 91       	pop	r30
 476:	bf 91       	pop	r27
 478:	af 91       	pop	r26
 47a:	9f 91       	pop	r25
 47c:	8f 91       	pop	r24
 47e:	7f 91       	pop	r23
 480:	6f 91       	pop	r22
 482:	5f 91       	pop	r21
 484:	4f 91       	pop	r20
 486:	3f 91       	pop	r19
 488:	2f 91       	pop	r18
 48a:	0f 90       	pop	r0
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <_ZN14SoftwareSerialD1Ev>:
 494:	21 e1       	ldi	r18, 0x11	; 17
 496:	31 e0       	ldi	r19, 0x01	; 1
 498:	fc 01       	movw	r30, r24
 49a:	31 83       	std	Z+1, r19	; 0x01
 49c:	20 83       	st	Z, r18
 49e:	0c 94 91 01 	jmp	0x322	; 0x322 <_ZN14SoftwareSerial13stopListeningEv>

000004a2 <_ZN14SoftwareSerial5setTXEh>:
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	ec 01       	movw	r28, r24
 4aa:	16 2f       	mov	r17, r22
 4ac:	6e 8d       	ldd	r22, Y+30	; 0x1e
 4ae:	66 95       	lsr	r22
 4b0:	61 70       	andi	r22, 0x01	; 1
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	68 27       	eor	r22, r24
 4b6:	81 2f       	mov	r24, r17
 4b8:	0e 94 3a 05 	call	0xa74	; 0xa74 <digitalWrite>
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	81 2f       	mov	r24, r17
 4c0:	0e 94 fe 04 	call	0x9fc	; 0x9fc <pinMode>
 4c4:	81 2f       	mov	r24, r17
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	fc 01       	movw	r30, r24
 4ca:	e4 58       	subi	r30, 0x84	; 132
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	e4 91       	lpm	r30, Z
 4d0:	e8 8b       	std	Y+16, r30	; 0x10
 4d2:	fc 01       	movw	r30, r24
 4d4:	e0 57       	subi	r30, 0x70	; 112
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	e4 91       	lpm	r30, Z
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	e2 55       	subi	r30, 0x52	; 82
 4e2:	ff 4f       	sbci	r31, 0xFF	; 255
 4e4:	85 91       	lpm	r24, Z+
 4e6:	94 91       	lpm	r25, Z
 4e8:	9a 8b       	std	Y+18, r25	; 0x12
 4ea:	89 8b       	std	Y+17, r24	; 0x11
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	08 95       	ret

000004f4 <_ZN14SoftwareSerial5setRXEh>:
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	ec 01       	movw	r28, r24
 4fc:	16 2f       	mov	r17, r22
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	81 2f       	mov	r24, r17
 502:	0e 94 fe 04 	call	0x9fc	; 0x9fc <pinMode>
 506:	8e 8d       	ldd	r24, Y+30	; 0x1e
 508:	81 fd       	sbrc	r24, 1
 50a:	04 c0       	rjmp	.+8      	; 0x514 <_ZN14SoftwareSerial5setRXEh+0x20>
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	81 2f       	mov	r24, r17
 510:	0e 94 3a 05 	call	0xa74	; 0xa74 <digitalWrite>
 514:	1c 87       	std	Y+12, r17	; 0x0c
 516:	81 2f       	mov	r24, r17
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	e4 58       	subi	r30, 0x84	; 132
 51e:	ff 4f       	sbci	r31, 0xFF	; 255
 520:	e4 91       	lpm	r30, Z
 522:	ed 87       	std	Y+13, r30	; 0x0d
 524:	fc 01       	movw	r30, r24
 526:	e0 57       	subi	r30, 0x70	; 112
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	e4 91       	lpm	r30, Z
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ec 55       	subi	r30, 0x5C	; 92
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	85 91       	lpm	r24, Z+
 538:	94 91       	lpm	r25, Z
 53a:	9f 87       	std	Y+15, r25	; 0x0f
 53c:	8e 87       	std	Y+14, r24	; 0x0e
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	08 95       	ret

00000546 <_ZN14SoftwareSerialC1Ehhb>:
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ec 01       	movw	r28, r24
 54e:	16 2f       	mov	r17, r22
 550:	1b 82       	std	Y+3, r1	; 0x03
 552:	1a 82       	std	Y+2, r1	; 0x02
 554:	88 ee       	ldi	r24, 0xE8	; 232
 556:	93 e0       	ldi	r25, 0x03	; 3
 558:	a0 e0       	ldi	r26, 0x00	; 0
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	8c 83       	std	Y+4, r24	; 0x04
 55e:	9d 83       	std	Y+5, r25	; 0x05
 560:	ae 83       	std	Y+6, r26	; 0x06
 562:	bf 83       	std	Y+7, r27	; 0x07
 564:	81 e1       	ldi	r24, 0x11	; 17
 566:	91 e0       	ldi	r25, 0x01	; 1
 568:	99 83       	std	Y+1, r25	; 0x01
 56a:	88 83       	st	Y, r24
 56c:	1f 8a       	std	Y+23, r1	; 0x17
 56e:	1e 8a       	std	Y+22, r1	; 0x16
 570:	19 8e       	std	Y+25, r1	; 0x19
 572:	18 8e       	std	Y+24, r1	; 0x18
 574:	1b 8e       	std	Y+27, r1	; 0x1b
 576:	1a 8e       	std	Y+26, r1	; 0x1a
 578:	1d 8e       	std	Y+29, r1	; 0x1d
 57a:	1c 8e       	std	Y+28, r1	; 0x1c
 57c:	8e 8d       	ldd	r24, Y+30	; 0x1e
 57e:	8e 7f       	andi	r24, 0xFE	; 254
 580:	20 fb       	bst	r18, 0
 582:	81 f9       	bld	r24, 1
 584:	8e 8f       	std	Y+30, r24	; 0x1e
 586:	64 2f       	mov	r22, r20
 588:	ce 01       	movw	r24, r28
 58a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <_ZN14SoftwareSerial5setTXEh>
 58e:	61 2f       	mov	r22, r17
 590:	ce 01       	movw	r24, r28
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_ZN14SoftwareSerial5setRXEh>

0000059c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	ec 01       	movw	r28, r24
 5a2:	9a 01       	movw	r18, r20
 5a4:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
 5a6:	1b 8e       	std	Y+27, r1	; 0x1b
 5a8:	1a 8e       	std	Y+26, r1	; 0x1a
 5aa:	19 8e       	std	Y+25, r1	; 0x19
 5ac:	18 8e       	std	Y+24, r1	; 0x18
 5ae:	1f 8a       	std	Y+23, r1	; 0x17
 5b0:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
 5b2:	60 e8       	ldi	r22, 0x80	; 128
 5b4:	74 e8       	ldi	r23, 0x84	; 132
 5b6:	8e e1       	ldi	r24, 0x1E	; 30
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 74 06 	call	0xce8	; 0xce8 <__divmodsi4>
 5be:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5c0:	24 30       	cpi	r18, 0x04	; 4
 5c2:	31 05       	cpc	r19, r1
 5c4:	18 f0       	brcs	.+6      	; 0x5cc <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
 5c6:	c9 01       	movw	r24, r18
 5c8:	03 97       	sbiw	r24, 0x03	; 3
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
 5d0:	9d 8f       	std	Y+29, r25	; 0x1d
 5d2:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
 5d4:	6c 85       	ldd	r22, Y+12	; 0x0c
 5d6:	66 31       	cpi	r22, 0x16	; 22
 5d8:	08 f0       	brcs	.+2      	; 0x5dc <_ZN14SoftwareSerial5beginEl+0x40>
 5da:	69 c0       	rjmp	.+210    	; 0x6ae <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 5dc:	c9 01       	movw	r24, r18
 5de:	96 95       	lsr	r25
 5e0:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5e2:	84 31       	cpi	r24, 0x14	; 20
 5e4:	91 05       	cpc	r25, r1
 5e6:	10 f0       	brcs	.+4      	; 0x5ec <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
 5e8:	43 97       	sbiw	r24, 0x13	; 19
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 5f0:	9f 8b       	std	Y+23, r25	; 0x17
 5f2:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5f4:	36 97       	sbiw	r30, 0x06	; 6
 5f6:	18 f0       	brcs	.+6      	; 0x5fe <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
 5f8:	c9 01       	movw	r24, r18
 5fa:	05 97       	sbiw	r24, 0x05	; 5
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
 602:	99 8f       	std	Y+25, r25	; 0x19
 604:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 606:	c9 01       	movw	r24, r18
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	28 0f       	add	r18, r24
 60e:	39 1f       	adc	r19, r25
 610:	36 95       	lsr	r19
 612:	27 95       	ror	r18
 614:	36 95       	lsr	r19
 616:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 618:	2d 30       	cpi	r18, 0x0D	; 13
 61a:	31 05       	cpc	r19, r1
 61c:	18 f0       	brcs	.+6      	; 0x624 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
 61e:	2c 50       	subi	r18, 0x0C	; 12
 620:	31 09       	sbc	r19, r1
 622:	02 c0       	rjmp	.+4      	; 0x628 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
 624:	21 e0       	ldi	r18, 0x01	; 1
 626:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 628:	3b 8f       	std	Y+27, r19	; 0x1b
 62a:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
 62c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 630:	68 30       	cpi	r22, 0x08	; 8
 632:	50 f0       	brcs	.+20     	; 0x648 <_ZN14SoftwareSerial5beginEl+0xac>
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	6e 30       	cpi	r22, 0x0E	; 14
 638:	08 f4       	brcc	.+2      	; 0x63c <_ZN14SoftwareSerial5beginEl+0xa0>
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	01 c0       	rjmp	.+2      	; 0x642 <_ZN14SoftwareSerial5beginEl+0xa6>
 640:	88 0f       	add	r24, r24
 642:	2a 95       	dec	r18
 644:	ea f7       	brpl	.-6      	; 0x640 <_ZN14SoftwareSerial5beginEl+0xa4>
 646:	01 c0       	rjmp	.+2      	; 0x64a <_ZN14SoftwareSerial5beginEl+0xae>
 648:	84 e0       	ldi	r24, 0x04	; 4
 64a:	89 2b       	or	r24, r25
 64c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
 650:	9c 85       	ldd	r25, Y+12	; 0x0c
 652:	98 30       	cpi	r25, 0x08	; 8
 654:	38 f0       	brcs	.+14     	; 0x664 <_ZN14SoftwareSerial5beginEl+0xc8>
 656:	9e 30       	cpi	r25, 0x0E	; 14
 658:	40 f0       	brcs	.+16     	; 0x66a <_ZN14SoftwareSerial5beginEl+0xce>
 65a:	96 31       	cpi	r25, 0x16	; 22
 65c:	48 f0       	brcs	.+18     	; 0x670 <_ZN14SoftwareSerial5beginEl+0xd4>
 65e:	20 e0       	ldi	r18, 0x00	; 0
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	08 c0       	rjmp	.+16     	; 0x674 <_ZN14SoftwareSerial5beginEl+0xd8>
 664:	2d e6       	ldi	r18, 0x6D	; 109
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	05 c0       	rjmp	.+10     	; 0x674 <_ZN14SoftwareSerial5beginEl+0xd8>
 66a:	2b e6       	ldi	r18, 0x6B	; 107
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <_ZN14SoftwareSerial5beginEl+0xd8>
 670:	2c e6       	ldi	r18, 0x6C	; 108
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	3c 8b       	std	Y+20, r19	; 0x14
 676:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
 678:	98 30       	cpi	r25, 0x08	; 8
 67a:	30 f4       	brcc	.+12     	; 0x688 <_ZN14SoftwareSerial5beginEl+0xec>
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	01 c0       	rjmp	.+2      	; 0x682 <_ZN14SoftwareSerial5beginEl+0xe6>
 680:	88 0f       	add	r24, r24
 682:	9a 95       	dec	r25
 684:	ea f7       	brpl	.-6      	; 0x680 <_ZN14SoftwareSerial5beginEl+0xe4>
 686:	0e c0       	rjmp	.+28     	; 0x6a4 <_ZN14SoftwareSerial5beginEl+0x108>
 688:	29 2f       	mov	r18, r25
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	9e 30       	cpi	r25, 0x0E	; 14
 68e:	18 f4       	brcc	.+6      	; 0x696 <_ZN14SoftwareSerial5beginEl+0xfa>
 690:	28 50       	subi	r18, 0x08	; 8
 692:	31 09       	sbc	r19, r1
 694:	02 c0       	rjmp	.+4      	; 0x69a <_ZN14SoftwareSerial5beginEl+0xfe>
 696:	2e 50       	subi	r18, 0x0E	; 14
 698:	31 09       	sbc	r19, r1
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <_ZN14SoftwareSerial5beginEl+0x104>
 69e:	88 0f       	add	r24, r24
 6a0:	2a 95       	dec	r18
 6a2:	ea f7       	brpl	.-6      	; 0x69e <_ZN14SoftwareSerial5beginEl+0x102>
 6a4:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 6a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 6ae:	ce 01       	movw	r24, r28
}
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 6b4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_ZN14SoftwareSerial6listenEv>

000006b8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	0f 92       	push	r0
 6c0:	11 24       	eor	r1, r1
 6c2:	2f 93       	push	r18
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 6cc:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <Serial+0x10>
 6d0:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <Serial+0x11>
 6d4:	80 81       	ld	r24, Z
 6d6:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <Serial+0x16>
 6da:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <Serial+0x17>
 6de:	82 fd       	sbrc	r24, 2
 6e0:	12 c0       	rjmp	.+36     	; 0x706 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 6e2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 6e4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <Serial+0x19>
 6e8:	8f 5f       	subi	r24, 0xFF	; 255
 6ea:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 6ec:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <Serial+0x1a>
 6f0:	82 17       	cp	r24, r18
 6f2:	51 f0       	breq	.+20     	; 0x708 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 6f4:	e0 91 db 01 	lds	r30, 0x01DB	; 0x8001db <Serial+0x19>
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	ee 53       	subi	r30, 0x3E	; 62
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 700:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <Serial+0x19>
 704:	01 c0       	rjmp	.+2      	; 0x708 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 706:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	9f 91       	pop	r25
 70e:	8f 91       	pop	r24
 710:	2f 91       	pop	r18
 712:	0f 90       	pop	r0
 714:	0f be       	out	0x3f, r0	; 63
 716:	0f 90       	pop	r0
 718:	1f 90       	pop	r1
 71a:	18 95       	reti

0000071c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	2f 93       	push	r18
 728:	3f 93       	push	r19
 72a:	4f 93       	push	r20
 72c:	5f 93       	push	r21
 72e:	6f 93       	push	r22
 730:	7f 93       	push	r23
 732:	8f 93       	push	r24
 734:	9f 93       	push	r25
 736:	af 93       	push	r26
 738:	bf 93       	push	r27
 73a:	ef 93       	push	r30
 73c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 73e:	82 ec       	ldi	r24, 0xC2	; 194
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 746:	ff 91       	pop	r31
 748:	ef 91       	pop	r30
 74a:	bf 91       	pop	r27
 74c:	af 91       	pop	r26
 74e:	9f 91       	pop	r25
 750:	8f 91       	pop	r24
 752:	7f 91       	pop	r23
 754:	6f 91       	pop	r22
 756:	5f 91       	pop	r21
 758:	4f 91       	pop	r20
 75a:	3f 91       	pop	r19
 75c:	2f 91       	pop	r18
 75e:	0f 90       	pop	r0
 760:	0f be       	out	0x3f, r0	; 63
 762:	0f 90       	pop	r0
 764:	1f 90       	pop	r1
 766:	18 95       	reti

00000768 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 768:	82 ec       	ldi	r24, 0xC2	; 194
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	0e 94 69 05 	call	0xad2	; 0xad2 <_ZN14HardwareSerial9availableEv>
 770:	21 e0       	ldi	r18, 0x01	; 1
 772:	89 2b       	or	r24, r25
 774:	09 f4       	brne	.+2      	; 0x778 <_Z17Serial0_availablev+0x10>
 776:	20 e0       	ldi	r18, 0x00	; 0
}
 778:	82 2f       	mov	r24, r18
 77a:	08 95       	ret

0000077c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 77c:	e2 ec       	ldi	r30, 0xC2	; 194
 77e:	f1 e0       	ldi	r31, 0x01	; 1
 780:	13 82       	std	Z+3, r1	; 0x03
 782:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 784:	88 ee       	ldi	r24, 0xE8	; 232
 786:	93 e0       	ldi	r25, 0x03	; 3
 788:	a0 e0       	ldi	r26, 0x00	; 0
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	84 83       	std	Z+4, r24	; 0x04
 78e:	95 83       	std	Z+5, r25	; 0x05
 790:	a6 83       	std	Z+6, r26	; 0x06
 792:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 794:	82 e3       	ldi	r24, 0x32	; 50
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	91 83       	std	Z+1, r25	; 0x01
 79a:	80 83       	st	Z, r24
 79c:	85 ec       	ldi	r24, 0xC5	; 197
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	95 87       	std	Z+13, r25	; 0x0d
 7a2:	84 87       	std	Z+12, r24	; 0x0c
 7a4:	84 ec       	ldi	r24, 0xC4	; 196
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	97 87       	std	Z+15, r25	; 0x0f
 7aa:	86 87       	std	Z+14, r24	; 0x0e
 7ac:	80 ec       	ldi	r24, 0xC0	; 192
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	91 8b       	std	Z+17, r25	; 0x11
 7b2:	80 8b       	std	Z+16, r24	; 0x10
 7b4:	81 ec       	ldi	r24, 0xC1	; 193
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	93 8b       	std	Z+19, r25	; 0x13
 7ba:	82 8b       	std	Z+18, r24	; 0x12
 7bc:	82 ec       	ldi	r24, 0xC2	; 194
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	95 8b       	std	Z+21, r25	; 0x15
 7c2:	84 8b       	std	Z+20, r24	; 0x14
 7c4:	86 ec       	ldi	r24, 0xC6	; 198
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	97 8b       	std	Z+23, r25	; 0x17
 7ca:	86 8b       	std	Z+22, r24	; 0x16
 7cc:	11 8e       	std	Z+25, r1	; 0x19
 7ce:	12 8e       	std	Z+26, r1	; 0x1a
 7d0:	13 8e       	std	Z+27, r1	; 0x1b
 7d2:	14 8e       	std	Z+28, r1	; 0x1c
 7d4:	08 95       	ret

000007d6 <initVariant>:
 7d6:	08 95       	ret

000007d8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 7d8:	0e 94 9a 04 	call	0x934	; 0x934 <init>

	initVariant();
 7dc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 7e0:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 7e4:	c6 ea       	ldi	r28, 0xA6	; 166
 7e6:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
 7e8:	0e 94 ae 00 	call	0x15c	; 0x15c <loop>
		if (serialEventRun) serialEventRun();
 7ec:	20 97       	sbiw	r28, 0x00	; 0
 7ee:	e1 f3       	breq	.-8      	; 0x7e8 <main+0x10>
 7f0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_Z14serialEventRunv>
 7f4:	f9 cf       	rjmp	.-14     	; 0x7e8 <main+0x10>

000007f6 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 7f6:	cf 92       	push	r12
 7f8:	df 92       	push	r13
 7fa:	ef 92       	push	r14
 7fc:	ff 92       	push	r15
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	6c 01       	movw	r12, r24
 808:	7a 01       	movw	r14, r20
 80a:	8b 01       	movw	r16, r22
 80c:	c0 e0       	ldi	r28, 0x00	; 0
 80e:	d0 e0       	ldi	r29, 0x00	; 0
 810:	ce 15       	cp	r28, r14
 812:	df 05       	cpc	r29, r15
 814:	81 f0       	breq	.+32     	; 0x836 <_ZN5Print5writeEPKhj+0x40>
 816:	d8 01       	movw	r26, r16
 818:	6d 91       	ld	r22, X+
 81a:	8d 01       	movw	r16, r26
 81c:	d6 01       	movw	r26, r12
 81e:	ed 91       	ld	r30, X+
 820:	fc 91       	ld	r31, X
 822:	01 90       	ld	r0, Z+
 824:	f0 81       	ld	r31, Z
 826:	e0 2d       	mov	r30, r0
 828:	c6 01       	movw	r24, r12
 82a:	09 95       	icall
 82c:	89 2b       	or	r24, r25
 82e:	11 f0       	breq	.+4      	; 0x834 <_ZN5Print5writeEPKhj+0x3e>
 830:	21 96       	adiw	r28, 0x01	; 1
 832:	ee cf       	rjmp	.-36     	; 0x810 <_ZN5Print5writeEPKhj+0x1a>
 834:	7e 01       	movw	r14, r28
 836:	c7 01       	movw	r24, r14
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	0f 91       	pop	r16
 840:	ff 90       	pop	r15
 842:	ef 90       	pop	r14
 844:	df 90       	pop	r13
 846:	cf 90       	pop	r12
 848:	08 95       	ret

0000084a <_ZN5Print5writeEPKc>:
 84a:	61 15       	cp	r22, r1
 84c:	71 05       	cpc	r23, r1
 84e:	79 f0       	breq	.+30     	; 0x86e <_ZN5Print5writeEPKc+0x24>
 850:	fb 01       	movw	r30, r22
 852:	01 90       	ld	r0, Z+
 854:	00 20       	and	r0, r0
 856:	e9 f7       	brne	.-6      	; 0x852 <_ZN5Print5writeEPKc+0x8>
 858:	31 97       	sbiw	r30, 0x01	; 1
 85a:	af 01       	movw	r20, r30
 85c:	46 1b       	sub	r20, r22
 85e:	57 0b       	sbc	r21, r23
 860:	dc 01       	movw	r26, r24
 862:	ed 91       	ld	r30, X+
 864:	fc 91       	ld	r31, X
 866:	02 80       	ldd	r0, Z+2	; 0x02
 868:	f3 81       	ldd	r31, Z+3	; 0x03
 86a:	e0 2d       	mov	r30, r0
 86c:	09 94       	ijmp
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	08 95       	ret

00000874 <_ZN5Print7printlnEv>:
 874:	6f e1       	ldi	r22, 0x1F	; 31
 876:	71 e0       	ldi	r23, 0x01	; 1
 878:	0c 94 25 04 	jmp	0x84a	; 0x84a <_ZN5Print5writeEPKc>

0000087c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 886:	0e 94 25 04 	call	0x84a	; 0x84a <_ZN5Print5writeEPKc>
 88a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 88c:	ce 01       	movw	r24, r28
 88e:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN5Print7printlnEv>
  return n;
}
 892:	80 0f       	add	r24, r16
 894:	91 1f       	adc	r25, r17
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	08 95       	ret

000008a0 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	0f 92       	push	r0
 8a8:	11 24       	eor	r1, r1
 8aa:	2f 93       	push	r18
 8ac:	3f 93       	push	r19
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
 8b2:	af 93       	push	r26
 8b4:	bf 93       	push	r27
 8b6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <timer0_millis>
 8ba:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <timer0_millis+0x1>
 8be:	a0 91 62 02 	lds	r26, 0x0262	; 0x800262 <timer0_millis+0x2>
 8c2:	b0 91 63 02 	lds	r27, 0x0263	; 0x800263 <timer0_millis+0x3>
 8c6:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <timer0_fract>
 8ca:	23 e0       	ldi	r18, 0x03	; 3
 8cc:	23 0f       	add	r18, r19
 8ce:	2d 37       	cpi	r18, 0x7D	; 125
 8d0:	20 f4       	brcc	.+8      	; 0x8da <__vector_16+0x3a>
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	a1 1d       	adc	r26, r1
 8d6:	b1 1d       	adc	r27, r1
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <__vector_16+0x44>
 8da:	26 e8       	ldi	r18, 0x86	; 134
 8dc:	23 0f       	add	r18, r19
 8de:	02 96       	adiw	r24, 0x02	; 2
 8e0:	a1 1d       	adc	r26, r1
 8e2:	b1 1d       	adc	r27, r1
 8e4:	20 93 5f 02 	sts	0x025F, r18	; 0x80025f <timer0_fract>
 8e8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <timer0_millis>
 8ec:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <timer0_millis+0x1>
 8f0:	a0 93 62 02 	sts	0x0262, r26	; 0x800262 <timer0_millis+0x2>
 8f4:	b0 93 63 02 	sts	0x0263, r27	; 0x800263 <timer0_millis+0x3>
 8f8:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timer0_overflow_count>
 8fc:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timer0_overflow_count+0x1>
 900:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <timer0_overflow_count+0x2>
 904:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <timer0_overflow_count+0x3>
 908:	01 96       	adiw	r24, 0x01	; 1
 90a:	a1 1d       	adc	r26, r1
 90c:	b1 1d       	adc	r27, r1
 90e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <timer0_overflow_count>
 912:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <timer0_overflow_count+0x1>
 916:	a0 93 66 02 	sts	0x0266, r26	; 0x800266 <timer0_overflow_count+0x2>
 91a:	b0 93 67 02 	sts	0x0267, r27	; 0x800267 <timer0_overflow_count+0x3>
 91e:	bf 91       	pop	r27
 920:	af 91       	pop	r26
 922:	9f 91       	pop	r25
 924:	8f 91       	pop	r24
 926:	3f 91       	pop	r19
 928:	2f 91       	pop	r18
 92a:	0f 90       	pop	r0
 92c:	0f be       	out	0x3f, r0	; 63
 92e:	0f 90       	pop	r0
 930:	1f 90       	pop	r1
 932:	18 95       	reti

00000934 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 934:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 936:	84 b5       	in	r24, 0x24	; 36
 938:	82 60       	ori	r24, 0x02	; 2
 93a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 93c:	84 b5       	in	r24, 0x24	; 36
 93e:	81 60       	ori	r24, 0x01	; 1
 940:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 942:	85 b5       	in	r24, 0x25	; 37
 944:	82 60       	ori	r24, 0x02	; 2
 946:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 948:	85 b5       	in	r24, 0x25	; 37
 94a:	81 60       	ori	r24, 0x01	; 1
 94c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 94e:	ee e6       	ldi	r30, 0x6E	; 110
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	80 81       	ld	r24, Z
 954:	81 60       	ori	r24, 0x01	; 1
 956:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 958:	e1 e8       	ldi	r30, 0x81	; 129
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 95e:	80 81       	ld	r24, Z
 960:	82 60       	ori	r24, 0x02	; 2
 962:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 964:	80 81       	ld	r24, Z
 966:	81 60       	ori	r24, 0x01	; 1
 968:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 96a:	e0 e8       	ldi	r30, 0x80	; 128
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	81 60       	ori	r24, 0x01	; 1
 972:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 974:	e1 eb       	ldi	r30, 0xB1	; 177
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	84 60       	ori	r24, 0x04	; 4
 97c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 97e:	e0 eb       	ldi	r30, 0xB0	; 176
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	81 60       	ori	r24, 0x01	; 1
 986:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 988:	ea e7       	ldi	r30, 0x7A	; 122
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	80 81       	ld	r24, Z
 98e:	84 60       	ori	r24, 0x04	; 4
 990:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 992:	80 81       	ld	r24, Z
 994:	82 60       	ori	r24, 0x02	; 2
 996:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 998:	80 81       	ld	r24, Z
 99a:	81 60       	ori	r24, 0x01	; 1
 99c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 99e:	80 81       	ld	r24, Z
 9a0:	80 68       	ori	r24, 0x80	; 128
 9a2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9a4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 9a8:	08 95       	ret

000009aa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 9aa:	83 30       	cpi	r24, 0x03	; 3
 9ac:	81 f0       	breq	.+32     	; 0x9ce <turnOffPWM+0x24>
 9ae:	28 f4       	brcc	.+10     	; 0x9ba <turnOffPWM+0x10>
 9b0:	81 30       	cpi	r24, 0x01	; 1
 9b2:	99 f0       	breq	.+38     	; 0x9da <turnOffPWM+0x30>
 9b4:	82 30       	cpi	r24, 0x02	; 2
 9b6:	a1 f0       	breq	.+40     	; 0x9e0 <turnOffPWM+0x36>
 9b8:	08 95       	ret
 9ba:	87 30       	cpi	r24, 0x07	; 7
 9bc:	a9 f0       	breq	.+42     	; 0x9e8 <turnOffPWM+0x3e>
 9be:	88 30       	cpi	r24, 0x08	; 8
 9c0:	b9 f0       	breq	.+46     	; 0x9f0 <turnOffPWM+0x46>
 9c2:	84 30       	cpi	r24, 0x04	; 4
 9c4:	d1 f4       	brne	.+52     	; 0x9fa <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9ca:	8f 7d       	andi	r24, 0xDF	; 223
 9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 9ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9d2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9d8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 9da:	84 b5       	in	r24, 0x24	; 36
 9dc:	8f 77       	andi	r24, 0x7F	; 127
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 9e0:	84 b5       	in	r24, 0x24	; 36
 9e2:	8f 7d       	andi	r24, 0xDF	; 223
 9e4:	84 bd       	out	0x24, r24	; 36
 9e6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 9e8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9ec:	8f 77       	andi	r24, 0x7F	; 127
 9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 9f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9f4:	8f 7d       	andi	r24, 0xDF	; 223
 9f6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9fa:	08 95       	ret

000009fc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	fc 01       	movw	r30, r24
 a04:	e4 58       	subi	r30, 0x84	; 132
 a06:	ff 4f       	sbci	r31, 0xFF	; 255
 a08:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a0a:	fc 01       	movw	r30, r24
 a0c:	e0 57       	subi	r30, 0x70	; 112
 a0e:	ff 4f       	sbci	r31, 0xFF	; 255
 a10:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a12:	88 23       	and	r24, r24
 a14:	61 f1       	breq	.+88     	; 0xa6e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	88 0f       	add	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	fc 01       	movw	r30, r24
 a1e:	e8 54       	subi	r30, 0x48	; 72
 a20:	ff 4f       	sbci	r31, 0xFF	; 255
 a22:	c5 91       	lpm	r28, Z+
 a24:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a26:	fc 01       	movw	r30, r24
 a28:	e2 55       	subi	r30, 0x52	; 82
 a2a:	ff 4f       	sbci	r31, 0xFF	; 255
 a2c:	a5 91       	lpm	r26, Z+
 a2e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a30:	61 11       	cpse	r22, r1
 a32:	09 c0       	rjmp	.+18     	; 0xa46 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a34:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a36:	f8 94       	cli
		*reg &= ~bit;
 a38:	88 81       	ld	r24, Y
 a3a:	20 95       	com	r18
 a3c:	82 23       	and	r24, r18
 a3e:	88 83       	st	Y, r24
		*out &= ~bit;
 a40:	ec 91       	ld	r30, X
 a42:	2e 23       	and	r18, r30
 a44:	0b c0       	rjmp	.+22     	; 0xa5c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a46:	62 30       	cpi	r22, 0x02	; 2
 a48:	61 f4       	brne	.+24     	; 0xa62 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 a4a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a4c:	f8 94       	cli
		*reg &= ~bit;
 a4e:	88 81       	ld	r24, Y
 a50:	32 2f       	mov	r19, r18
 a52:	30 95       	com	r19
 a54:	83 23       	and	r24, r19
 a56:	88 83       	st	Y, r24
		*out |= bit;
 a58:	ec 91       	ld	r30, X
 a5a:	2e 2b       	or	r18, r30
 a5c:	2c 93       	st	X, r18
		SREG = oldSREG;
 a5e:	9f bf       	out	0x3f, r25	; 63
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 a62:	8f b7       	in	r24, 0x3f	; 63
                cli();
 a64:	f8 94       	cli
		*reg |= bit;
 a66:	e8 81       	ld	r30, Y
 a68:	2e 2b       	or	r18, r30
 a6a:	28 83       	st	Y, r18
		SREG = oldSREG;
 a6c:	8f bf       	out	0x3f, r24	; 63
	}
}
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	08 95       	ret

00000a74 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a7a:	28 2f       	mov	r18, r24
 a7c:	30 e0       	ldi	r19, 0x00	; 0
 a7e:	f9 01       	movw	r30, r18
 a80:	e8 59       	subi	r30, 0x98	; 152
 a82:	ff 4f       	sbci	r31, 0xFF	; 255
 a84:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a86:	f9 01       	movw	r30, r18
 a88:	e4 58       	subi	r30, 0x84	; 132
 a8a:	ff 4f       	sbci	r31, 0xFF	; 255
 a8c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a8e:	f9 01       	movw	r30, r18
 a90:	e0 57       	subi	r30, 0x70	; 112
 a92:	ff 4f       	sbci	r31, 0xFF	; 255
 a94:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a96:	cc 23       	and	r28, r28
 a98:	c1 f0       	breq	.+48     	; 0xaca <digitalWrite+0x56>
 a9a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a9c:	81 11       	cpse	r24, r1
 a9e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <turnOffPWM>

	out = portOutputRegister(port);
 aa2:	ec 2f       	mov	r30, r28
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	ee 0f       	add	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	e2 55       	subi	r30, 0x52	; 82
 aac:	ff 4f       	sbci	r31, 0xFF	; 255
 aae:	a5 91       	lpm	r26, Z+
 ab0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 ab2:	9f b7       	in	r25, 0x3f	; 63
	cli();
 ab4:	f8 94       	cli

	if (val == LOW) {
 ab6:	11 11       	cpse	r17, r1
 ab8:	04 c0       	rjmp	.+8      	; 0xac2 <digitalWrite+0x4e>
		*out &= ~bit;
 aba:	8c 91       	ld	r24, X
 abc:	d0 95       	com	r29
 abe:	d8 23       	and	r29, r24
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <digitalWrite+0x52>
	} else {
		*out |= bit;
 ac2:	ec 91       	ld	r30, X
 ac4:	de 2b       	or	r29, r30
 ac6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 ac8:	9f bf       	out	0x3f, r25	; 63
}
 aca:	df 91       	pop	r29
 acc:	cf 91       	pop	r28
 ace:	1f 91       	pop	r17
 ad0:	08 95       	ret

00000ad2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 ad2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 ad4:	91 8d       	ldd	r25, Z+25	; 0x19
 ad6:	22 8d       	ldd	r18, Z+26	; 0x1a
 ad8:	89 2f       	mov	r24, r25
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	80 5c       	subi	r24, 0xC0	; 192
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	82 1b       	sub	r24, r18
 ae2:	91 09       	sbc	r25, r1
}
 ae4:	8f 73       	andi	r24, 0x3F	; 63
 ae6:	99 27       	eor	r25, r25
 ae8:	08 95       	ret

00000aea <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 aea:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 aec:	91 8d       	ldd	r25, Z+25	; 0x19
 aee:	82 8d       	ldd	r24, Z+26	; 0x1a
 af0:	98 17       	cp	r25, r24
 af2:	31 f0       	breq	.+12     	; 0xb00 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 af4:	82 8d       	ldd	r24, Z+26	; 0x1a
 af6:	e8 0f       	add	r30, r24
 af8:	f1 1d       	adc	r31, r1
 afa:	85 8d       	ldd	r24, Z+29	; 0x1d
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 b00:	8f ef       	ldi	r24, 0xFF	; 255
 b02:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 b04:	08 95       	ret

00000b06 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 b06:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 b08:	91 8d       	ldd	r25, Z+25	; 0x19
 b0a:	82 8d       	ldd	r24, Z+26	; 0x1a
 b0c:	98 17       	cp	r25, r24
 b0e:	61 f0       	breq	.+24     	; 0xb28 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 b10:	82 8d       	ldd	r24, Z+26	; 0x1a
 b12:	df 01       	movw	r26, r30
 b14:	a8 0f       	add	r26, r24
 b16:	b1 1d       	adc	r27, r1
 b18:	5d 96       	adiw	r26, 0x1d	; 29
 b1a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 b1c:	92 8d       	ldd	r25, Z+26	; 0x1a
 b1e:	9f 5f       	subi	r25, 0xFF	; 255
 b20:	9f 73       	andi	r25, 0x3F	; 63
 b22:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 b28:	8f ef       	ldi	r24, 0xFF	; 255
 b2a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 b2c:	08 95       	ret

00000b2e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 b2e:	fc 01       	movw	r30, r24
 b30:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 b32:	44 8d       	ldd	r20, Z+28	; 0x1c
 b34:	25 2f       	mov	r18, r21
 b36:	30 e0       	ldi	r19, 0x00	; 0
 b38:	84 2f       	mov	r24, r20
 b3a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 b3c:	82 1b       	sub	r24, r18
 b3e:	93 0b       	sbc	r25, r19
 b40:	54 17       	cp	r21, r20
 b42:	10 f0       	brcs	.+4      	; 0xb48 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 b44:	cf 96       	adiw	r24, 0x3f	; 63
 b46:	08 95       	ret
  return tail - head - 1;
 b48:	01 97       	sbiw	r24, 0x01	; 1
}
 b4a:	08 95       	ret

00000b4c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 b4c:	84 eb       	ldi	r24, 0xB4	; 180
 b4e:	93 e0       	ldi	r25, 0x03	; 3
 b50:	89 2b       	or	r24, r25
 b52:	49 f0       	breq	.+18     	; 0xb66 <_Z14serialEventRunv+0x1a>
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	89 2b       	or	r24, r25
 b5a:	29 f0       	breq	.+10     	; 0xb66 <_Z14serialEventRunv+0x1a>
 b5c:	0e 94 b4 03 	call	0x768	; 0x768 <_Z17Serial0_availablev>
 b60:	81 11       	cpse	r24, r1
 b62:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 b66:	08 95       	ret

00000b68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 b68:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 b6a:	84 8d       	ldd	r24, Z+28	; 0x1c
 b6c:	df 01       	movw	r26, r30
 b6e:	a8 0f       	add	r26, r24
 b70:	b1 1d       	adc	r27, r1
 b72:	a3 5a       	subi	r26, 0xA3	; 163
 b74:	bf 4f       	sbci	r27, 0xFF	; 255
 b76:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 b78:	84 8d       	ldd	r24, Z+28	; 0x1c
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	01 96       	adiw	r24, 0x01	; 1
 b7e:	8f 73       	andi	r24, 0x3F	; 63
 b80:	99 27       	eor	r25, r25
 b82:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 b84:	a6 89       	ldd	r26, Z+22	; 0x16
 b86:	b7 89       	ldd	r27, Z+23	; 0x17
 b88:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 b8a:	a0 89       	ldd	r26, Z+16	; 0x10
 b8c:	b1 89       	ldd	r27, Z+17	; 0x11
 b8e:	8c 91       	ld	r24, X
 b90:	80 64       	ori	r24, 0x40	; 64
 b92:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 b94:	93 8d       	ldd	r25, Z+27	; 0x1b
 b96:	84 8d       	ldd	r24, Z+28	; 0x1c
 b98:	98 13       	cpse	r25, r24
 b9a:	06 c0       	rjmp	.+12     	; 0xba8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 b9c:	02 88       	ldd	r0, Z+18	; 0x12
 b9e:	f3 89       	ldd	r31, Z+19	; 0x13
 ba0:	e0 2d       	mov	r30, r0
 ba2:	80 81       	ld	r24, Z
 ba4:	8f 7d       	andi	r24, 0xDF	; 223
 ba6:	80 83       	st	Z, r24
 ba8:	08 95       	ret

00000baa <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 baa:	ef 92       	push	r14
 bac:	ff 92       	push	r15
 bae:	0f 93       	push	r16
 bb0:	1f 93       	push	r17
 bb2:	cf 93       	push	r28
 bb4:	df 93       	push	r29
 bb6:	ec 01       	movw	r28, r24
  _written = true;
 bb8:	81 e0       	ldi	r24, 0x01	; 1
 bba:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 bbc:	9b 8d       	ldd	r25, Y+27	; 0x1b
 bbe:	8c 8d       	ldd	r24, Y+28	; 0x1c
 bc0:	98 13       	cpse	r25, r24
 bc2:	05 c0       	rjmp	.+10     	; 0xbce <_ZN14HardwareSerial5writeEh+0x24>
 bc4:	e8 89       	ldd	r30, Y+16	; 0x10
 bc6:	f9 89       	ldd	r31, Y+17	; 0x11
 bc8:	80 81       	ld	r24, Z
 bca:	85 fd       	sbrc	r24, 5
 bcc:	24 c0       	rjmp	.+72     	; 0xc16 <_ZN14HardwareSerial5writeEh+0x6c>
 bce:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 bd0:	0b 8d       	ldd	r16, Y+27	; 0x1b
 bd2:	10 e0       	ldi	r17, 0x00	; 0
 bd4:	0f 5f       	subi	r16, 0xFF	; 255
 bd6:	1f 4f       	sbci	r17, 0xFF	; 255
 bd8:	0f 73       	andi	r16, 0x3F	; 63
 bda:	11 27       	eor	r17, r17
 bdc:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 bde:	8c 8d       	ldd	r24, Y+28	; 0x1c
 be0:	e8 12       	cpse	r14, r24
 be2:	0c c0       	rjmp	.+24     	; 0xbfc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 be4:	0f b6       	in	r0, 0x3f	; 63
 be6:	07 fc       	sbrc	r0, 7
 be8:	fa cf       	rjmp	.-12     	; 0xbde <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 bea:	e8 89       	ldd	r30, Y+16	; 0x10
 bec:	f9 89       	ldd	r31, Y+17	; 0x11
 bee:	80 81       	ld	r24, Z
 bf0:	85 ff       	sbrs	r24, 5
 bf2:	f5 cf       	rjmp	.-22     	; 0xbde <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 bf4:	ce 01       	movw	r24, r28
 bf6:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 bfa:	f1 cf       	rjmp	.-30     	; 0xbde <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 bfe:	fe 01       	movw	r30, r28
 c00:	e8 0f       	add	r30, r24
 c02:	f1 1d       	adc	r31, r1
 c04:	e3 5a       	subi	r30, 0xA3	; 163
 c06:	ff 4f       	sbci	r31, 0xFF	; 255
 c08:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 c0a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 c0c:	ea 89       	ldd	r30, Y+18	; 0x12
 c0e:	fb 89       	ldd	r31, Y+19	; 0x13
 c10:	80 81       	ld	r24, Z
 c12:	80 62       	ori	r24, 0x20	; 32
 c14:	07 c0       	rjmp	.+14     	; 0xc24 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 c16:	ee 89       	ldd	r30, Y+22	; 0x16
 c18:	ff 89       	ldd	r31, Y+23	; 0x17
 c1a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 c1c:	e8 89       	ldd	r30, Y+16	; 0x10
 c1e:	f9 89       	ldd	r31, Y+17	; 0x11
 c20:	80 81       	ld	r24, Z
 c22:	80 64       	ori	r24, 0x40	; 64
 c24:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	df 91       	pop	r29
 c2c:	cf 91       	pop	r28
 c2e:	1f 91       	pop	r17
 c30:	0f 91       	pop	r16
 c32:	ff 90       	pop	r15
 c34:	ef 90       	pop	r14
 c36:	08 95       	ret

00000c38 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 c3e:	88 8d       	ldd	r24, Y+24	; 0x18
 c40:	88 23       	and	r24, r24
 c42:	c9 f0       	breq	.+50     	; 0xc76 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 c44:	ea 89       	ldd	r30, Y+18	; 0x12
 c46:	fb 89       	ldd	r31, Y+19	; 0x13
 c48:	80 81       	ld	r24, Z
 c4a:	85 fd       	sbrc	r24, 5
 c4c:	05 c0       	rjmp	.+10     	; 0xc58 <_ZN14HardwareSerial5flushEv+0x20>
 c4e:	a8 89       	ldd	r26, Y+16	; 0x10
 c50:	b9 89       	ldd	r27, Y+17	; 0x11
 c52:	8c 91       	ld	r24, X
 c54:	86 fd       	sbrc	r24, 6
 c56:	0f c0       	rjmp	.+30     	; 0xc76 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 c58:	0f b6       	in	r0, 0x3f	; 63
 c5a:	07 fc       	sbrc	r0, 7
 c5c:	f5 cf       	rjmp	.-22     	; 0xc48 <_ZN14HardwareSerial5flushEv+0x10>
 c5e:	80 81       	ld	r24, Z
 c60:	85 ff       	sbrs	r24, 5
 c62:	f2 cf       	rjmp	.-28     	; 0xc48 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 c64:	a8 89       	ldd	r26, Y+16	; 0x10
 c66:	b9 89       	ldd	r27, Y+17	; 0x11
 c68:	8c 91       	ld	r24, X
 c6a:	85 ff       	sbrs	r24, 5
 c6c:	ed cf       	rjmp	.-38     	; 0xc48 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 c6e:	ce 01       	movw	r24, r28
 c70:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 c74:	e7 cf       	rjmp	.-50     	; 0xc44 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 c76:	df 91       	pop	r29
 c78:	cf 91       	pop	r28
 c7a:	08 95       	ret

00000c7c <__divmodhi4>:
 c7c:	97 fb       	bst	r25, 7
 c7e:	07 2e       	mov	r0, r23
 c80:	16 f4       	brtc	.+4      	; 0xc86 <__divmodhi4+0xa>
 c82:	00 94       	com	r0
 c84:	07 d0       	rcall	.+14     	; 0xc94 <__divmodhi4_neg1>
 c86:	77 fd       	sbrc	r23, 7
 c88:	09 d0       	rcall	.+18     	; 0xc9c <__divmodhi4_neg2>
 c8a:	0e 94 93 06 	call	0xd26	; 0xd26 <__udivmodhi4>
 c8e:	07 fc       	sbrc	r0, 7
 c90:	05 d0       	rcall	.+10     	; 0xc9c <__divmodhi4_neg2>
 c92:	3e f4       	brtc	.+14     	; 0xca2 <__divmodhi4_exit>

00000c94 <__divmodhi4_neg1>:
 c94:	90 95       	com	r25
 c96:	81 95       	neg	r24
 c98:	9f 4f       	sbci	r25, 0xFF	; 255
 c9a:	08 95       	ret

00000c9c <__divmodhi4_neg2>:
 c9c:	70 95       	com	r23
 c9e:	61 95       	neg	r22
 ca0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ca2 <__divmodhi4_exit>:
 ca2:	08 95       	ret

00000ca4 <__udivmodsi4>:
 ca4:	a1 e2       	ldi	r26, 0x21	; 33
 ca6:	1a 2e       	mov	r1, r26
 ca8:	aa 1b       	sub	r26, r26
 caa:	bb 1b       	sub	r27, r27
 cac:	fd 01       	movw	r30, r26
 cae:	0d c0       	rjmp	.+26     	; 0xcca <__udivmodsi4_ep>

00000cb0 <__udivmodsi4_loop>:
 cb0:	aa 1f       	adc	r26, r26
 cb2:	bb 1f       	adc	r27, r27
 cb4:	ee 1f       	adc	r30, r30
 cb6:	ff 1f       	adc	r31, r31
 cb8:	a2 17       	cp	r26, r18
 cba:	b3 07       	cpc	r27, r19
 cbc:	e4 07       	cpc	r30, r20
 cbe:	f5 07       	cpc	r31, r21
 cc0:	20 f0       	brcs	.+8      	; 0xcca <__udivmodsi4_ep>
 cc2:	a2 1b       	sub	r26, r18
 cc4:	b3 0b       	sbc	r27, r19
 cc6:	e4 0b       	sbc	r30, r20
 cc8:	f5 0b       	sbc	r31, r21

00000cca <__udivmodsi4_ep>:
 cca:	66 1f       	adc	r22, r22
 ccc:	77 1f       	adc	r23, r23
 cce:	88 1f       	adc	r24, r24
 cd0:	99 1f       	adc	r25, r25
 cd2:	1a 94       	dec	r1
 cd4:	69 f7       	brne	.-38     	; 0xcb0 <__udivmodsi4_loop>
 cd6:	60 95       	com	r22
 cd8:	70 95       	com	r23
 cda:	80 95       	com	r24
 cdc:	90 95       	com	r25
 cde:	9b 01       	movw	r18, r22
 ce0:	ac 01       	movw	r20, r24
 ce2:	bd 01       	movw	r22, r26
 ce4:	cf 01       	movw	r24, r30
 ce6:	08 95       	ret

00000ce8 <__divmodsi4>:
 ce8:	05 2e       	mov	r0, r21
 cea:	97 fb       	bst	r25, 7
 cec:	1e f4       	brtc	.+6      	; 0xcf4 <__divmodsi4+0xc>
 cee:	00 94       	com	r0
 cf0:	0e 94 8b 06 	call	0xd16	; 0xd16 <__negsi2>
 cf4:	57 fd       	sbrc	r21, 7
 cf6:	07 d0       	rcall	.+14     	; 0xd06 <__divmodsi4_neg2>
 cf8:	0e 94 52 06 	call	0xca4	; 0xca4 <__udivmodsi4>
 cfc:	07 fc       	sbrc	r0, 7
 cfe:	03 d0       	rcall	.+6      	; 0xd06 <__divmodsi4_neg2>
 d00:	4e f4       	brtc	.+18     	; 0xd14 <__divmodsi4_exit>
 d02:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__negsi2>

00000d06 <__divmodsi4_neg2>:
 d06:	50 95       	com	r21
 d08:	40 95       	com	r20
 d0a:	30 95       	com	r19
 d0c:	21 95       	neg	r18
 d0e:	3f 4f       	sbci	r19, 0xFF	; 255
 d10:	4f 4f       	sbci	r20, 0xFF	; 255
 d12:	5f 4f       	sbci	r21, 0xFF	; 255

00000d14 <__divmodsi4_exit>:
 d14:	08 95       	ret

00000d16 <__negsi2>:
 d16:	90 95       	com	r25
 d18:	80 95       	com	r24
 d1a:	70 95       	com	r23
 d1c:	61 95       	neg	r22
 d1e:	7f 4f       	sbci	r23, 0xFF	; 255
 d20:	8f 4f       	sbci	r24, 0xFF	; 255
 d22:	9f 4f       	sbci	r25, 0xFF	; 255
 d24:	08 95       	ret

00000d26 <__udivmodhi4>:
 d26:	aa 1b       	sub	r26, r26
 d28:	bb 1b       	sub	r27, r27
 d2a:	51 e1       	ldi	r21, 0x11	; 17
 d2c:	07 c0       	rjmp	.+14     	; 0xd3c <__udivmodhi4_ep>

00000d2e <__udivmodhi4_loop>:
 d2e:	aa 1f       	adc	r26, r26
 d30:	bb 1f       	adc	r27, r27
 d32:	a6 17       	cp	r26, r22
 d34:	b7 07       	cpc	r27, r23
 d36:	10 f0       	brcs	.+4      	; 0xd3c <__udivmodhi4_ep>
 d38:	a6 1b       	sub	r26, r22
 d3a:	b7 0b       	sbc	r27, r23

00000d3c <__udivmodhi4_ep>:
 d3c:	88 1f       	adc	r24, r24
 d3e:	99 1f       	adc	r25, r25
 d40:	5a 95       	dec	r21
 d42:	a9 f7       	brne	.-22     	; 0xd2e <__udivmodhi4_loop>
 d44:	80 95       	com	r24
 d46:	90 95       	com	r25
 d48:	bc 01       	movw	r22, r24
 d4a:	cd 01       	movw	r24, r26
 d4c:	08 95       	ret

00000d4e <__tablejump2__>:
 d4e:	ee 0f       	add	r30, r30
 d50:	ff 1f       	adc	r31, r31
 d52:	05 90       	lpm	r0, Z+
 d54:	f4 91       	lpm	r31, Z
 d56:	e0 2d       	mov	r30, r0
 d58:	09 94       	ijmp

00000d5a <__do_global_dtors>:
 d5a:	10 e0       	ldi	r17, 0x00	; 0
 d5c:	c3 e6       	ldi	r28, 0x63	; 99
 d5e:	d0 e0       	ldi	r29, 0x00	; 0
 d60:	04 c0       	rjmp	.+8      	; 0xd6a <__do_global_dtors+0x10>
 d62:	fe 01       	movw	r30, r28
 d64:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__tablejump2__>
 d68:	21 96       	adiw	r28, 0x01	; 1
 d6a:	c4 36       	cpi	r28, 0x64	; 100
 d6c:	d1 07       	cpc	r29, r17
 d6e:	c9 f7       	brne	.-14     	; 0xd62 <__do_global_dtors+0x8>
 d70:	f8 94       	cli

00000d72 <__stop_program>:
 d72:	ff cf       	rjmp	.-2      	; 0xd72 <__stop_program>
