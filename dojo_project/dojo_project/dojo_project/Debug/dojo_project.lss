
dojo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000010ec  00001180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000131  0080013e  0080013e  000011be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000afb4  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021ec  00000000  00000000  0000c5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002582  00000000  00000000  0000e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b3c  00000000  00000000  00010d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028c6  00000000  00000000  00011878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004059  00000000  00000000  0001413e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  00018197  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_3>
      10:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_3>
      14:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 bc 04 	jmp	0x978	; 0x978 <__vector_18>
      4c:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	be 00       	.word	0x00be	; ????
      c4:	1e 05       	cpc	r17, r14

000000c6 <__ctors_end>:
      c6:	cc 00       	.word	0x00cc	; ????

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	ec ee       	ldi	r30, 0xEC	; 236
      dc:	f0 e1       	ldi	r31, 0x10	; 16
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ae 33       	cpi	r26, 0x3E	; 62
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	22 e0       	ldi	r18, 0x02	; 2
      ec:	ae e3       	ldi	r26, 0x3E	; 62
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	af 36       	cpi	r26, 0x6F	; 111
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c3 e6       	ldi	r28, 0x63	; 99
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__tablejump2__>
     10a:	c1 36       	cpi	r28, 0x61	; 97
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 4c 05 	call	0xa98	; 0xa98 <main>
     114:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:

// state init
void setup()
{
	// all Baudrates to 9600 of UART-Connection
	mySerial.begin(9600);
     11c:	40 e8       	ldi	r20, 0x80	; 128
     11e:	55 e2       	ldi	r21, 0x25	; 37
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	8d e5       	ldi	r24, 0x5D	; 93
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 2e 04 	call	0x85c	; 0x85c <_ZN14SoftwareSerial5beginEl>
	BTSerial.begin(9600);	
     12c:	40 e8       	ldi	r20, 0x80	; 128
     12e:	55 e2       	ldi	r21, 0x25	; 37
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	8e e3       	ldi	r24, 0x3E	; 62
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 2e 04 	call	0x85c	; 0x85c <_ZN14SoftwareSerial5beginEl>
	// Mux- and Vibro Ports to output
	DDRC = 0xff;	
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	87 b9       	out	0x07, r24	; 7
	// For WTV setting ports individual
	DDRB |= 0b00111011;	
     140:	84 b1       	in	r24, 0x04	; 4
     142:	8b 63       	ori	r24, 0x3B	; 59
     144:	84 b9       	out	0x04, r24	; 4
	// buttons as inputs
	DDRD |= 0b00010000;
     146:	54 9a       	sbi	0x0a, 4	; 10
	multiplexController(FTDI_PATH);	
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z19multiplexControlleri>
	pinSetupWTV();		
     150:	0e 94 0f 01 	call	0x21e	; 0x21e <_Z11pinSetupWTVv>
	//Setup LED Power on
	digitalWrite(STATUS_LED, LOW);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	84 e0       	ldi	r24, 0x04	; 4
     158:	0e 94 f6 06 	call	0xdec	; 0xdec <digitalWrite>
	// get first response from the hm-11
	firstResponse();
     15c:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_Z13firstResponsev>

00000160 <_Z17dojo_statemachinev>:
	
	switch (state)
	{
	case SCAN:
		static unsigned int ibeacon = 0;
		unsigned int buffer = scan();
     160:	0e 94 48 02 	call	0x490	; 0x490 <_Z4scanv>
		if (buffer != 0)
     164:	00 97       	sbiw	r24, 0x00	; 0
     166:	39 f0       	breq	.+14     	; 0x176 <_Z17dojo_statemachinev+0x16>
		{
			ibeacon = buffer;
			mySerial.println(ibeacon);
     168:	4a e0       	ldi	r20, 0x0A	; 10
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	bc 01       	movw	r22, r24
     16e:	8d e5       	ldi	r24, 0x5D	; 93
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_ZN5Print7printlnEji>
     176:	08 95       	ret

00000178 <loop>:
	}
}

void loop()
{
 	dojo_statemachine();
     178:	0c 94 b0 00 	jmp	0x160	; 0x160 <_Z17dojo_statemachinev>

0000017c <_GLOBAL__sub_I_mySerial>:
﻿#include "include/Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	41 e0       	ldi	r20, 0x01	; 1
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	8d e5       	ldi	r24, 0x5D	; 93
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 03 04 	call	0x806	; 0x806 <_ZN14SoftwareSerialC1Ehhb>
SoftwareSerial BTSerial(2,3);	//(RX | TX) - PINS
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	43 e0       	ldi	r20, 0x03	; 3
     18e:	62 e0       	ldi	r22, 0x02	; 2
     190:	8e e3       	ldi	r24, 0x3E	; 62
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0c 94 03 04 	jmp	0x806	; 0x806 <_ZN14SoftwareSerialC1Ehhb>

00000198 <_GLOBAL__sub_D_mySerial>:
     198:	8e e3       	ldi	r24, 0x3E	; 62
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN14SoftwareSerialD1Ev>
﻿#include "include/Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
     1a0:	8d e5       	ldi	r24, 0x5D	; 93
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0c 94 aa 03 	jmp	0x754	; 0x754 <_ZN14SoftwareSerialD1Ev>

000001a8 <_Z19multiplexControlleri>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a8:	98 b1       	in	r25, 0x08	; 8
     1aa:	18 b8       	out	0x08, r1	; 8
     1ac:	98 b1       	in	r25, 0x08	; 8
     1ae:	89 2b       	or	r24, r25
     1b0:	88 b9       	out	0x08, r24	; 8
     1b2:	08 95       	ret

000001b4 <_Z15vibroControllerb>:
     1b4:	88 23       	and	r24, r24
     1b6:	51 f0       	breq	.+20     	; 0x1cc <_Z15vibroControllerb+0x18>
     1b8:	45 9a       	sbi	0x08, 5	; 8
     1ba:	2f ef       	ldi	r18, 0xFF	; 255
     1bc:	84 e3       	ldi	r24, 0x34	; 52
     1be:	9c e0       	ldi	r25, 0x0C	; 12
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	80 40       	sbci	r24, 0x00	; 0
     1c4:	90 40       	sbci	r25, 0x00	; 0
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <_Z15vibroControllerb+0xc>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_Z15vibroControllerb+0x16>
     1ca:	00 00       	nop
     1cc:	98 b1       	in	r25, 0x08	; 8
     1ce:	80 e2       	ldi	r24, 0x20	; 32
     1d0:	89 27       	eor	r24, r25
     1d2:	88 b9       	out	0x08, r24	; 8
     1d4:	08 95       	ret

000001d6 <_Z13testComparingj>:
     1d6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <_ZZ13testComparingjE7compare>
     1da:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <_ZZ13testComparingjE7compare+0x1>
     1de:	28 17       	cp	r18, r24
     1e0:	39 07       	cpc	r19, r25
     1e2:	d1 f0       	breq	.+52     	; 0x218 <_Z13testComparingj+0x42>
     1e4:	00 97       	sbiw	r24, 0x00	; 0
     1e6:	c1 f0       	breq	.+48     	; 0x218 <_Z13testComparingj+0x42>
     1e8:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <_ZZ13testComparingjE7compare+0x1>
     1ec:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <_ZZ13testComparingjE7compare>
     1f0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <closest_Beacon+0x1>
     1f4:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <closest_Beacon>
     1f8:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <closest_Beacon+0x5>
     1fc:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <closest_Beacon+0x4>
     200:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <closest_Beacon+0x3>
     204:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <closest_Beacon+0x2>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z15vibroControllerb>
     20e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <_ZZ13testComparingjE7compare>
     212:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <_ZZ13testComparingjE7compare+0x1>
     216:	08 95       	ret
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	08 95       	ret

0000021e <_Z11pinSetupWTVv>:
	_delay_ms(500);
}

void pinSetupWTV()
{
	pinMode(WTV_RESET, OUTPUT);
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	89 e0       	ldi	r24, 0x09	; 9
     222:	0e 94 ba 06 	call	0xd74	; 0xd74 <pinMode>
	digitalWrite(WTV_RESET, LOW);
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	89 e0       	ldi	r24, 0x09	; 9
     22a:	0e 94 f6 06 	call	0xdec	; 0xdec <digitalWrite>
	pinMode(WTV_DOUT, OUTPUT);
     22e:	61 e0       	ldi	r22, 0x01	; 1
     230:	8c e0       	ldi	r24, 0x0C	; 12
     232:	0e 94 ba 06 	call	0xd74	; 0xd74 <pinMode>
	digitalWrite(WTV_DOUT, HIGH);
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	8c e0       	ldi	r24, 0x0C	; 12
     23a:	0e 94 f6 06 	call	0xdec	; 0xdec <digitalWrite>
	pinMode(WTV_CLK, OUTPUT);
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	8d e0       	ldi	r24, 0x0D	; 13
     242:	0e 94 ba 06 	call	0xd74	; 0xd74 <pinMode>
	digitalWrite(WTV_CLK, HIGH);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	8d e0       	ldi	r24, 0x0D	; 13
     24a:	0c 94 f6 06 	jmp	0xdec	; 0xdec <digitalWrite>

0000024e <_Z11sendCommandi.part.2>:
	}
	firstBeacon = false;
	return closest_Beacon.UUID_value;
}

void sendCommand(int com)
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
	switch(com)
	{
		case 1:
		for(int i = 0; i < 2; i++)
		{
			BTSerial.write(command_AT[i]);
     252:	c8 e0       	ldi	r28, 0x08	; 8
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	68 81       	ld	r22, Y
     258:	8e e3       	ldi	r24, 0x3E	; 62
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_ZN14SoftwareSerial5writeEh>
     260:	69 81       	ldd	r22, Y+1	; 0x01
     262:	8e e3       	ldi	r24, 0x3E	; 62
     264:	91 e0       	ldi	r25, 0x01	; 1
		break;
		default:
			//do nothing
		break;
	}
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
	switch(com)
	{
		case 1:
		for(int i = 0; i < 2; i++)
		{
			BTSerial.write(command_AT[i]);
     26a:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <_ZN14SoftwareSerial5writeEh>

0000026e <_Z11sendCommandi>:
	firstBeacon = false;
	return closest_Beacon.UUID_value;
}

void sendCommand(int com)
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
	switch(com)
     272:	81 30       	cpi	r24, 0x01	; 1
     274:	91 05       	cpc	r25, r1
     276:	29 f0       	breq	.+10     	; 0x282 <_Z11sendCommandi+0x14>
     278:	02 97       	sbiw	r24, 0x02	; 2
     27a:	81 f4       	brne	.+32     	; 0x29c <_Z11sendCommandi+0x2e>
     27c:	c0 e0       	ldi	r28, 0x00	; 0
     27e:	d1 e0       	ldi	r29, 0x01	; 1
     280:	04 c0       	rjmp	.+8      	; 0x28a <_Z11sendCommandi+0x1c>
		break;
		default:
			//do nothing
		break;
	}
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	0c 94 27 01 	jmp	0x24e	; 0x24e <_Z11sendCommandi.part.2>
		}
		break;
		case 2:
		for(int i = 0; i < 8; i++)
		{
			BTSerial.write(command_ATDISI[i]);
     28a:	69 91       	ld	r22, Y+
     28c:	8e e3       	ldi	r24, 0x3E	; 62
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_ZN14SoftwareSerial5writeEh>
		{
			BTSerial.write(command_AT[i]);
		}
		break;
		case 2:
		for(int i = 0; i < 8; i++)
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	c8 30       	cpi	r28, 0x08	; 8
     298:	d8 07       	cpc	r29, r24
     29a:	b9 f7       	brne	.-18     	; 0x28a <_Z11sendCommandi+0x1c>
		break;
		default:
			//do nothing
		break;
	}
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <_Z10readAnswerv>:

int readAnswer()
{
	int incomingByte;
	
	while(!BTSerial.available())
     2a2:	8e e3       	ldi	r24, 0x3E	; 62
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN14SoftwareSerial9availableEv>
     2aa:	89 2b       	or	r24, r25
     2ac:	d1 f3       	breq	.-12     	; 0x2a2 <_Z10readAnswerv>
	{/*wait until datas are available to read*/}
	
	incomingByte = BTSerial.read();
     2ae:	8e e3       	ldi	r24, 0x3E	; 62
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_ZN14SoftwareSerial4readEv>

000002b6 <_Z13firstResponsev>:
char command_ATDISI[8] = {'A','T','+','D','I','S','I','?'};
char endString[8];

void firstResponse()
{
	while(!BTSerial.available())
     2b6:	8e e3       	ldi	r24, 0x3E	; 62
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_ZN14SoftwareSerial9availableEv>
     2be:	89 2b       	or	r24, r25
     2c0:	99 f4       	brne	.+38     	; 0x2e8 <_Z13firstResponsev+0x32>
     2c2:	0e 94 27 01 	call	0x24e	; 0x24e <_Z11sendCommandi.part.2>
     2c6:	2f ef       	ldi	r18, 0xFF	; 255
     2c8:	88 e0       	ldi	r24, 0x08	; 8
     2ca:	9d e3       	ldi	r25, 0x3D	; 61
     2cc:	21 50       	subi	r18, 0x01	; 1
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	90 40       	sbci	r25, 0x00	; 0
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <_Z13firstResponsev+0x16>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <_Z13firstResponsev+0x20>
     2d6:	00 00       	nop
     2d8:	ee cf       	rjmp	.-36     	; 0x2b6 <_Z13firstResponsev>
	
	while (1)
	{
		if (readAnswer() == 79)
		{
			if (readAnswer() == 75)
     2da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
     2de:	8b 34       	cpi	r24, 0x4B	; 75
     2e0:	91 05       	cpc	r25, r1
     2e2:	41 f0       	breq	.+16     	; 0x2f4 <_Z13firstResponsev+0x3e>
			{
				break;
			}
			else
			{
				firstResponse();
     2e4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Z13firstResponsev>
		_delay_ms(2500);
	}
	
	while (1)
	{
		if (readAnswer() == 79)
     2e8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
     2ec:	8f 34       	cpi	r24, 0x4F	; 79
     2ee:	91 05       	cpc	r25, r1
     2f0:	c9 f7       	brne	.-14     	; 0x2e4 <_Z13firstResponsev+0x2e>
     2f2:	f3 cf       	rjmp	.-26     	; 0x2da <_Z13firstResponsev+0x24>
     2f4:	08 95       	ret

000002f6 <_Z12readValueDeci>:
	
	return beacon;
}

unsigned int readValueDec(int array_length)
{
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	6c 01       	movw	r12, r24
	unsigned int value = 0;
	
	for(int i = 0; i < array_length; i++)
     306:	00 e0       	ldi	r16, 0x00	; 0
     308:	10 e0       	ldi	r17, 0x00	; 0
	return beacon;
}

unsigned int readValueDec(int array_length)
{
	unsigned int value = 0;
     30a:	c0 e0       	ldi	r28, 0x00	; 0
     30c:	d0 e0       	ldi	r29, 0x00	; 0
     30e:	8a e0       	ldi	r24, 0x0A	; 10
     310:	f8 2e       	mov	r15, r24
	
	for(int i = 0; i < array_length; i++)
     312:	0c 15       	cp	r16, r12
     314:	1d 05       	cpc	r17, r13
     316:	74 f4       	brge	.+28     	; 0x334 <_Z12readValueDeci+0x3e>
	{
		value = (value * 10) + (readAnswer() - '0');
     318:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
     31c:	fc 9e       	mul	r15, r28
     31e:	90 01       	movw	r18, r0
     320:	fd 9e       	mul	r15, r29
     322:	30 0d       	add	r19, r0
     324:	11 24       	eor	r1, r1
     326:	e9 01       	movw	r28, r18
     328:	e0 97       	sbiw	r28, 0x30	; 48
     32a:	c8 0f       	add	r28, r24
     32c:	d9 1f       	adc	r29, r25

unsigned int readValueDec(int array_length)
{
	unsigned int value = 0;
	
	for(int i = 0; i < array_length; i++)
     32e:	0f 5f       	subi	r16, 0xFF	; 255
     330:	1f 4f       	sbci	r17, 0xFF	; 255
     332:	ef cf       	rjmp	.-34     	; 0x312 <_Z12readValueDeci+0x1c>
	{
		value = (value * 10) + (readAnswer() - '0');
	}	
	return value;
}
     334:	ce 01       	movw	r24, r28
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	08 95       	ret

00000346 <_Z12getUUID_RSSIv>:
		closest_Beacon = buff;
	}
}

struct BEACON_VALUES_DEC getUUID_RSSI()
{
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	00 d0       	rcall	.+0      	; 0x354 <_Z12getUUID_RSSIv+0xe>
     354:	00 d0       	rcall	.+0      	; 0x356 <_Z12getUUID_RSSIv+0x10>
     356:	00 d0       	rcall	.+0      	; 0x358 <_Z12getUUID_RSSIv+0x12>
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
	BEACON_VALUES_DEC beacon;
	
	while(readAnswer() != ':')
     35c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
     360:	ca 97       	sbiw	r24, 0x3a	; 58
     362:	e1 f7       	brne	.-8      	; 0x35c <_Z12getUUID_RSSIv+0x16>
	{/*/wait until ':' is recived/*/}
	beacon.UUID_value = readValueDec(UUID_ARRAY_LENGTH);
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z12readValueDeci>
     36c:	08 2f       	mov	r16, r24
     36e:	e9 2e       	mov	r14, r25
	
	while (readAnswer() != ':')
     370:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
     374:	ca 97       	sbiw	r24, 0x3a	; 58
     376:	e1 f7       	brne	.-8      	; 0x370 <_Z12getUUID_RSSIv+0x2a>
	{/*/wait until ":" is recieved/*/}
	beacon.MAJOR_value = readValueDec(MAJOR_ARRAY_LENGTH);
     378:	84 e0       	ldi	r24, 0x04	; 4
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z12readValueDeci>
     380:	18 2f       	mov	r17, r24
     382:	f9 2e       	mov	r15, r25
	
	while(readAnswer() != '-')
     384:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
     388:	8d 97       	sbiw	r24, 0x2d	; 45
     38a:	e1 f7       	brne	.-8      	; 0x384 <_Z12getUUID_RSSIv+0x3e>
	{/*/wait until '-' is recived/*/}
	beacon.RSSI_value = readValueDec(RSSI_ARRAY_LENGTH);
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_Z12readValueDeci>
	
	return beacon;
     394:	20 2f       	mov	r18, r16
     396:	3e 2d       	mov	r19, r14
     398:	ac 01       	movw	r20, r24
     39a:	61 2f       	mov	r22, r17
     39c:	7f 2d       	mov	r23, r15
}
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	26 96       	adiw	r28, 0x06	; 6
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	08 95       	ret

000003bc <_Z13compareBeaconv>:
	
	return incomingByte;
}

void compareBeacon()
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	00 d0       	rcall	.+0      	; 0x3c2 <_Z13compareBeaconv+0x6>
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <_Z13compareBeaconv+0x8>
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <_Z13compareBeaconv+0xa>
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
	BEACON_VALUES_DEC buff = getUUID_RSSI();
     3ca:	0e 94 a3 01 	call	0x346	; 0x346 <_Z12getUUID_RSSIv>
     3ce:	29 83       	std	Y+1, r18	; 0x01
     3d0:	3a 83       	std	Y+2, r19	; 0x02
     3d2:	4b 83       	std	Y+3, r20	; 0x03
     3d4:	5c 83       	std	Y+4, r21	; 0x04
     3d6:	6d 83       	std	Y+5, r22	; 0x05
     3d8:	7e 83       	std	Y+6, r23	; 0x06
	
	if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && firstBeacon == false)
     3da:	8d 81       	ldd	r24, Y+5	; 0x05
     3dc:	9e 81       	ldd	r25, Y+6	; 0x06
     3de:	03 97       	sbiw	r24, 0x03	; 3
     3e0:	e9 f4       	brne	.+58     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	return incomingByte;
}

void compareBeacon()
{
	BEACON_VALUES_DEC buff = getUUID_RSSI();
     3e2:	8b 81       	ldd	r24, Y+3	; 0x03
     3e4:	9c 81       	ldd	r25, Y+4	; 0x04
	
	if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && firstBeacon == false)
     3e6:	8b 35       	cpi	r24, 0x5B	; 91
     3e8:	91 05       	cpc	r25, r1
     3ea:	c0 f4       	brcc	.+48     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     3ec:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <firstBeacon>
     3f0:	21 11       	cpse	r18, r1
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <_Z13compareBeaconv+0x40>
	{
		firstBeacon = true;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <firstBeacon>
     3fa:	07 c0       	rjmp	.+14     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		closest_Beacon = buff;
	}
	else if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && closest_Beacon.RSSI_value > buff.RSSI_value && firstBeacon == true)
     3fc:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <closest_Beacon+0x2>
     400:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <closest_Beacon+0x3>
     404:	82 17       	cp	r24, r18
     406:	93 07       	cpc	r25, r19
     408:	48 f4       	brcc	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		closest_Beacon = buff;
     40a:	86 e0       	ldi	r24, 0x06	; 6
     40c:	fe 01       	movw	r30, r28
     40e:	31 96       	adiw	r30, 0x01	; 1
     410:	ae e7       	ldi	r26, 0x7E	; 126
     412:	b1 e0       	ldi	r27, 0x01	; 1
     414:	01 90       	ld	r0, Z+
     416:	0d 92       	st	X+, r0
     418:	8a 95       	dec	r24
     41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	}
}
     41c:	26 96       	adiw	r28, 0x06	; 6
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_Z17scanClosestBeaconv>:
		}
	}
}

unsigned int scanClosestBeacon()
{
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
	int compare_koeff;
	sendCommand(2);
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 37 01 	call	0x26e	; 0x26e <_Z11sendCommandi>
	
	while(1)
	{
		compare_koeff = readAnswer();
     43c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
		
		if(compare_koeff == 58)
     440:	8a 33       	cpi	r24, 0x3A	; 58
     442:	91 05       	cpc	r25, r1
     444:	c1 f4       	brne	.+48     	; 0x476 <_Z17scanClosestBeaconv+0x48>
     446:	c8 e0       	ldi	r28, 0x08	; 8
     448:	d0 e0       	ldi	r29, 0x00	; 0
     44a:	11 e0       	ldi	r17, 0x01	; 1
		{
			boolean state_zero = true;
			
			for(int i = 0; i < 8; i++)			//search for !=0 in FactoryID
			{
				if(readAnswer() != 48)
     44c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
     450:	c0 97       	sbiw	r24, 0x30	; 48
     452:	09 f0       	breq	.+2      	; 0x456 <_Z17scanClosestBeaconv+0x28>
				{
					state_zero = false;
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	21 97       	sbiw	r28, 0x01	; 1
		
		if(compare_koeff == 58)
		{
			boolean state_zero = true;
			
			for(int i = 0; i < 8; i++)			//search for !=0 in FactoryID
     458:	c9 f7       	brne	.-14     	; 0x44c <_Z17scanClosestBeaconv+0x1e>
				if(readAnswer() != 48)
				{
					state_zero = false;
				}
			}
			if(state_zero == false)
     45a:	11 11       	cpse	r17, r1
     45c:	03 c0       	rjmp	.+6      	; 0x464 <_Z17scanClosestBeaconv+0x36>
			{
				state_zero = true;
				compareBeacon();
     45e:	0e 94 de 01 	call	0x3bc	; 0x3bc <_Z13compareBeaconv>
				continue;
     462:	ec cf       	rjmp	.-40     	; 0x43c <_Z17scanClosestBeaconv+0xe>
     464:	c4 e0       	ldi	r28, 0x04	; 4
     466:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else
			{
				for(int i = 0; i < 4; i++)
				{
					while(readAnswer() != 58)
     468:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z10readAnswerv>
     46c:	ca 97       	sbiw	r24, 0x3a	; 58
     46e:	e1 f7       	brne	.-8      	; 0x468 <_Z17scanClosestBeaconv+0x3a>
     470:	21 97       	sbiw	r28, 0x01	; 1
				compareBeacon();
				continue;
			}
			else
			{
				for(int i = 0; i < 4; i++)
     472:	d1 f7       	brne	.-12     	; 0x468 <_Z17scanClosestBeaconv+0x3a>
     474:	e3 cf       	rjmp	.-58     	; 0x43c <_Z17scanClosestBeaconv+0xe>
					{/*wait until ':' is recived*/}
				}
				continue;
			}
		}
		else if (compare_koeff == 69)
     476:	85 34       	cpi	r24, 0x45	; 69
     478:	91 05       	cpc	r25, r1
     47a:	01 f7       	brne	.-64     	; 0x43c <_Z17scanClosestBeaconv+0xe>
		{
			// 			countBeacon = 1;
			break;
		}
	}
	firstBeacon = false;
     47c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <firstBeacon>
	return closest_Beacon.UUID_value;
}
     480:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <closest_Beacon>
     484:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <closest_Beacon+0x1>
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	08 95       	ret

00000490 <_Z4scanv>:
	}
}

unsigned int scan()
{
	return testComparing(scanClosestBeacon());
     490:	0e 94 17 02 	call	0x42e	; 0x42e <_Z17scanClosestBeaconv>
     494:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_Z13testComparingj>

00000498 <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	08 95       	ret

0000049e <_ZN14SoftwareSerial4readEv>:
     49e:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <_ZN14SoftwareSerial13active_objectE>
     4a2:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <_ZN14SoftwareSerial13active_objectE+0x1>
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	b9 f4       	brne	.+46     	; 0x4da <_ZN14SoftwareSerial4readEv+0x3c>
     4ac:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     4b0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     4b4:	98 17       	cp	r25, r24
     4b6:	89 f0       	breq	.+34     	; 0x4da <_ZN14SoftwareSerial4readEv+0x3c>
     4b8:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	e9 57       	subi	r30, 0x79	; 121
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	80 81       	ld	r24, Z
     4c4:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	2f 5f       	subi	r18, 0xFF	; 255
     4cc:	3f 4f       	sbci	r19, 0xFF	; 255
     4ce:	2f 73       	andi	r18, 0x3F	; 63
     4d0:	33 27       	eor	r19, r19
     4d2:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	08 95       	ret
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	9f ef       	ldi	r25, 0xFF	; 255
     4de:	08 95       	ret

000004e0 <_ZN14SoftwareSerial5writeEh>:
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	dc 01       	movw	r26, r24
     4e8:	5c 96       	adiw	r26, 0x1c	; 28
     4ea:	8d 91       	ld	r24, X+
     4ec:	9c 91       	ld	r25, X
     4ee:	5d 97       	sbiw	r26, 0x1d	; 29
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	39 f4       	brne	.+14     	; 0x502 <_ZN14SoftwareSerial5writeEh+0x22>
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	13 96       	adiw	r26, 0x03	; 3
     4fa:	3c 93       	st	X, r19
     4fc:	2e 93       	st	-X, r18
     4fe:	12 97       	sbiw	r26, 0x02	; 2
     500:	3b c0       	rjmp	.+118    	; 0x578 <_ZN14SoftwareSerial5writeEh+0x98>
     502:	51 96       	adiw	r26, 0x11	; 17
     504:	ed 91       	ld	r30, X+
     506:	fc 91       	ld	r31, X
     508:	52 97       	sbiw	r26, 0x12	; 18
     50a:	50 96       	adiw	r26, 0x10	; 16
     50c:	2c 91       	ld	r18, X
     50e:	50 97       	sbiw	r26, 0x10	; 16
     510:	32 2f       	mov	r19, r18
     512:	30 95       	com	r19
     514:	1f b7       	in	r17, 0x3f	; 63
     516:	5e 96       	adiw	r26, 0x1e	; 30
     518:	4c 91       	ld	r20, X
     51a:	5e 97       	sbiw	r26, 0x1e	; 30
     51c:	74 2f       	mov	r23, r20
     51e:	72 70       	andi	r23, 0x02	; 2
     520:	41 fd       	sbrc	r20, 1
     522:	60 95       	com	r22
     524:	f8 94       	cli
     526:	40 81       	ld	r20, Z
     528:	77 23       	and	r23, r23
     52a:	11 f0       	breq	.+4      	; 0x530 <_ZN14SoftwareSerial5writeEh+0x50>
     52c:	42 2b       	or	r20, r18
     52e:	01 c0       	rjmp	.+2      	; 0x532 <_ZN14SoftwareSerial5writeEh+0x52>
     530:	43 23       	and	r20, r19
     532:	40 83       	st	Z, r20
     534:	ec 01       	movw	r28, r24
     536:	21 97       	sbiw	r28, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <_ZN14SoftwareSerial5writeEh+0x56>
     53a:	48 e0       	ldi	r20, 0x08	; 8
     53c:	50 81       	ld	r21, Z
     53e:	60 ff       	sbrs	r22, 0
     540:	02 c0       	rjmp	.+4      	; 0x546 <_ZN14SoftwareSerial5writeEh+0x66>
     542:	52 2b       	or	r21, r18
     544:	01 c0       	rjmp	.+2      	; 0x548 <_ZN14SoftwareSerial5writeEh+0x68>
     546:	53 23       	and	r21, r19
     548:	50 83       	st	Z, r21
     54a:	ec 01       	movw	r28, r24
     54c:	21 97       	sbiw	r28, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <_ZN14SoftwareSerial5writeEh+0x6c>
     550:	66 95       	lsr	r22
     552:	41 50       	subi	r20, 0x01	; 1
     554:	99 f7       	brne	.-26     	; 0x53c <_ZN14SoftwareSerial5writeEh+0x5c>
     556:	80 81       	ld	r24, Z
     558:	77 23       	and	r23, r23
     55a:	19 f0       	breq	.+6      	; 0x562 <_ZN14SoftwareSerial5writeEh+0x82>
     55c:	83 23       	and	r24, r19
     55e:	80 83       	st	Z, r24
     560:	02 c0       	rjmp	.+4      	; 0x566 <_ZN14SoftwareSerial5writeEh+0x86>
     562:	28 2b       	or	r18, r24
     564:	20 83       	st	Z, r18
     566:	1f bf       	out	0x3f, r17	; 63
     568:	5c 96       	adiw	r26, 0x1c	; 28
     56a:	8d 91       	ld	r24, X+
     56c:	9c 91       	ld	r25, X
     56e:	5d 97       	sbiw	r26, 0x1d	; 29
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <_ZN14SoftwareSerial5writeEh+0x90>
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	08 95       	ret

00000580 <_ZN14SoftwareSerial5flushEv>:
     580:	08 95       	ret

00000582 <_ZN14SoftwareSerial4peekEv>:
     582:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <_ZN14SoftwareSerial13active_objectE>
     586:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <_ZN14SoftwareSerial13active_objectE+0x1>
     58a:	28 17       	cp	r18, r24
     58c:	39 07       	cpc	r19, r25
     58e:	71 f4       	brne	.+28     	; 0x5ac <_ZN14SoftwareSerial4peekEv+0x2a>
     590:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     594:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     598:	98 17       	cp	r25, r24
     59a:	41 f0       	breq	.+16     	; 0x5ac <_ZN14SoftwareSerial4peekEv+0x2a>
     59c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	e9 57       	subi	r30, 0x79	; 121
     5a4:	fe 4f       	sbci	r31, 0xFE	; 254
     5a6:	80 81       	ld	r24, Z
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	08 95       	ret
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	9f ef       	ldi	r25, 0xFF	; 255
     5b0:	08 95       	ret

000005b2 <_ZN14SoftwareSerial9availableEv>:
     5b2:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <_ZN14SoftwareSerial13active_objectE>
     5b6:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <_ZN14SoftwareSerial13active_objectE+0x1>
     5ba:	28 17       	cp	r18, r24
     5bc:	39 07       	cpc	r19, r25
     5be:	71 f4       	brne	.+28     	; 0x5dc <_ZN14SoftwareSerial9availableEv+0x2a>
     5c0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     5c4:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	80 5c       	subi	r24, 0xC0	; 192
     5cc:	9f 4f       	sbci	r25, 0xFF	; 255
     5ce:	82 1b       	sub	r24, r18
     5d0:	91 09       	sbc	r25, r1
     5d2:	60 e4       	ldi	r22, 0x40	; 64
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	0e 94 fa 07 	call	0xff4	; 0xff4 <__divmodhi4>
     5da:	08 95       	ret
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	08 95       	ret

000005e2 <_ZN14SoftwareSerial13stopListeningEv>:
     5e2:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <_ZN14SoftwareSerial13active_objectE>
     5e6:	f0 91 c8 01 	lds	r31, 0x01C8	; 0x8001c8 <_ZN14SoftwareSerial13active_objectE+0x1>
     5ea:	e8 17       	cp	r30, r24
     5ec:	f9 07       	cpc	r31, r25
     5ee:	69 f4       	brne	.+26     	; 0x60a <_ZN14SoftwareSerial13stopListeningEv+0x28>
     5f0:	a3 89       	ldd	r26, Z+19	; 0x13
     5f2:	b4 89       	ldd	r27, Z+20	; 0x14
     5f4:	9c 91       	ld	r25, X
     5f6:	85 89       	ldd	r24, Z+21	; 0x15
     5f8:	80 95       	com	r24
     5fa:	89 23       	and	r24, r25
     5fc:	8c 93       	st	X, r24
     5fe:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <_ZN14SoftwareSerial13active_objectE+0x1>
     602:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <_ZN14SoftwareSerial13active_objectE>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	08 95       	ret
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	08 95       	ret

0000060e <_ZN14SoftwareSerial6listenEv>:
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	ec 01       	movw	r28, r24
     614:	8a 8d       	ldd	r24, Y+26	; 0x1a
     616:	9b 8d       	ldd	r25, Y+27	; 0x1b
     618:	89 2b       	or	r24, r25
     61a:	f1 f0       	breq	.+60     	; 0x658 <_ZN14SoftwareSerial6listenEv+0x4a>
     61c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <_ZN14SoftwareSerial13active_objectE>
     620:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <_ZN14SoftwareSerial13active_objectE+0x1>
     624:	c8 17       	cp	r28, r24
     626:	d9 07       	cpc	r29, r25
     628:	b9 f0       	breq	.+46     	; 0x658 <_ZN14SoftwareSerial6listenEv+0x4a>
     62a:	00 97       	sbiw	r24, 0x00	; 0
     62c:	11 f0       	breq	.+4      	; 0x632 <_ZN14SoftwareSerial6listenEv+0x24>
     62e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_ZN14SoftwareSerial13stopListeningEv>
     632:	8e 8d       	ldd	r24, Y+30	; 0x1e
     634:	8e 7f       	andi	r24, 0xFE	; 254
     636:	8e 8f       	std	Y+30, r24	; 0x1e
     638:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     63c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     640:	d0 93 c8 01 	sts	0x01C8, r29	; 0x8001c8 <_ZN14SoftwareSerial13active_objectE+0x1>
     644:	c0 93 c7 01 	sts	0x01C7, r28	; 0x8001c7 <_ZN14SoftwareSerial13active_objectE>
     648:	eb 89       	ldd	r30, Y+19	; 0x13
     64a:	fc 89       	ldd	r31, Y+20	; 0x14
     64c:	90 81       	ld	r25, Z
     64e:	8d 89       	ldd	r24, Y+21	; 0x15
     650:	89 2b       	or	r24, r25
     652:	80 83       	st	Z, r24
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	01 c0       	rjmp	.+2      	; 0x65a <_ZN14SoftwareSerial6listenEv+0x4c>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <__vector_3>:
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	11 24       	eor	r1, r1
     66a:	2f 93       	push	r18
     66c:	3f 93       	push	r19
     66e:	4f 93       	push	r20
     670:	5f 93       	push	r21
     672:	6f 93       	push	r22
     674:	7f 93       	push	r23
     676:	8f 93       	push	r24
     678:	9f 93       	push	r25
     67a:	af 93       	push	r26
     67c:	bf 93       	push	r27
     67e:	ef 93       	push	r30
     680:	ff 93       	push	r31
     682:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <_ZN14SoftwareSerial13active_objectE>
     686:	f0 91 c8 01 	lds	r31, 0x01C8	; 0x8001c8 <_ZN14SoftwareSerial13active_objectE+0x1>
     68a:	30 97       	sbiw	r30, 0x00	; 0
     68c:	09 f4       	brne	.+2      	; 0x690 <__vector_3+0x30>
     68e:	51 c0       	rjmp	.+162    	; 0x732 <__vector_3+0xd2>
     690:	96 8d       	ldd	r25, Z+30	; 0x1e
     692:	a6 85       	ldd	r26, Z+14	; 0x0e
     694:	b7 85       	ldd	r27, Z+15	; 0x0f
     696:	85 85       	ldd	r24, Z+13	; 0x0d
     698:	91 ff       	sbrs	r25, 1
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__vector_3+0x44>
     69c:	9c 91       	ld	r25, X
     69e:	89 23       	and	r24, r25
     6a0:	29 f4       	brne	.+10     	; 0x6ac <__vector_3+0x4c>
     6a2:	47 c0       	rjmp	.+142    	; 0x732 <__vector_3+0xd2>
     6a4:	9c 91       	ld	r25, X
     6a6:	89 23       	and	r24, r25
     6a8:	09 f0       	breq	.+2      	; 0x6ac <__vector_3+0x4c>
     6aa:	43 c0       	rjmp	.+134    	; 0x732 <__vector_3+0xd2>
     6ac:	a3 89       	ldd	r26, Z+19	; 0x13
     6ae:	b4 89       	ldd	r27, Z+20	; 0x14
     6b0:	9c 91       	ld	r25, X
     6b2:	85 89       	ldd	r24, Z+21	; 0x15
     6b4:	80 95       	com	r24
     6b6:	89 23       	and	r24, r25
     6b8:	8c 93       	st	X, r24
     6ba:	86 89       	ldd	r24, Z+22	; 0x16
     6bc:	97 89       	ldd	r25, Z+23	; 0x17
     6be:	01 97       	sbiw	r24, 0x01	; 1
     6c0:	f1 f7       	brne	.-4      	; 0x6be <__vector_3+0x5e>
     6c2:	60 8d       	ldd	r22, Z+24	; 0x18
     6c4:	71 8d       	ldd	r23, Z+25	; 0x19
     6c6:	a6 85       	ldd	r26, Z+14	; 0x0e
     6c8:	b7 85       	ldd	r27, Z+15	; 0x0f
     6ca:	55 85       	ldd	r21, Z+13	; 0x0d
     6cc:	38 e0       	ldi	r19, 0x08	; 8
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	cb 01       	movw	r24, r22
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <__vector_3+0x72>
     6d6:	82 2f       	mov	r24, r18
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	95 95       	asr	r25
     6dc:	87 95       	ror	r24
     6de:	28 2f       	mov	r18, r24
     6e0:	4c 91       	ld	r20, X
     6e2:	45 23       	and	r20, r21
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <__vector_3+0x88>
     6e6:	20 68       	ori	r18, 0x80	; 128
     6e8:	31 50       	subi	r19, 0x01	; 1
     6ea:	91 f7       	brne	.-28     	; 0x6d0 <__vector_3+0x70>
     6ec:	86 8d       	ldd	r24, Z+30	; 0x1e
     6ee:	81 fd       	sbrc	r24, 1
     6f0:	20 95       	com	r18
     6f2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	8f 73       	andi	r24, 0x3F	; 63
     6fc:	99 27       	eor	r25, r25
     6fe:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <_ZN14SoftwareSerial20_receive_buffer_headE>
     702:	38 17       	cp	r19, r24
     704:	49 f0       	breq	.+18     	; 0x718 <__vector_3+0xb8>
     706:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	a9 57       	subi	r26, 0x79	; 121
     70e:	be 4f       	sbci	r27, 0xFE	; 254
     710:	2c 93       	st	X, r18
     712:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     716:	03 c0       	rjmp	.+6      	; 0x71e <__vector_3+0xbe>
     718:	86 8d       	ldd	r24, Z+30	; 0x1e
     71a:	81 60       	ori	r24, 0x01	; 1
     71c:	86 8f       	std	Z+30, r24	; 0x1e
     71e:	82 8d       	ldd	r24, Z+26	; 0x1a
     720:	93 8d       	ldd	r25, Z+27	; 0x1b
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <__vector_3+0xc2>
     726:	a3 89       	ldd	r26, Z+19	; 0x13
     728:	b4 89       	ldd	r27, Z+20	; 0x14
     72a:	9c 91       	ld	r25, X
     72c:	85 89       	ldd	r24, Z+21	; 0x15
     72e:	89 2b       	or	r24, r25
     730:	8c 93       	st	X, r24
     732:	ff 91       	pop	r31
     734:	ef 91       	pop	r30
     736:	bf 91       	pop	r27
     738:	af 91       	pop	r26
     73a:	9f 91       	pop	r25
     73c:	8f 91       	pop	r24
     73e:	7f 91       	pop	r23
     740:	6f 91       	pop	r22
     742:	5f 91       	pop	r21
     744:	4f 91       	pop	r20
     746:	3f 91       	pop	r19
     748:	2f 91       	pop	r18
     74a:	0f 90       	pop	r0
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	0f 90       	pop	r0
     750:	1f 90       	pop	r1
     752:	18 95       	reti

00000754 <_ZN14SoftwareSerialD1Ev>:
     754:	2e e0       	ldi	r18, 0x0E	; 14
     756:	31 e0       	ldi	r19, 0x01	; 1
     758:	fc 01       	movw	r30, r24
     75a:	31 83       	std	Z+1, r19	; 0x01
     75c:	20 83       	st	Z, r18
     75e:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <_ZN14SoftwareSerial13stopListeningEv>

00000762 <_ZN14SoftwareSerial5setTXEh>:
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	ec 01       	movw	r28, r24
     76a:	16 2f       	mov	r17, r22
     76c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     76e:	66 95       	lsr	r22
     770:	61 70       	andi	r22, 0x01	; 1
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	68 27       	eor	r22, r24
     776:	81 2f       	mov	r24, r17
     778:	0e 94 f6 06 	call	0xdec	; 0xdec <digitalWrite>
     77c:	61 e0       	ldi	r22, 0x01	; 1
     77e:	81 2f       	mov	r24, r17
     780:	0e 94 ba 06 	call	0xd74	; 0xd74 <pinMode>
     784:	81 2f       	mov	r24, r17
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	fc 01       	movw	r30, r24
     78a:	e4 58       	subi	r30, 0x84	; 132
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	e4 91       	lpm	r30, Z
     790:	e8 8b       	std	Y+16, r30	; 0x10
     792:	fc 01       	movw	r30, r24
     794:	e0 57       	subi	r30, 0x70	; 112
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	e4 91       	lpm	r30, Z
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	e2 55       	subi	r30, 0x52	; 82
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	85 91       	lpm	r24, Z+
     7a6:	94 91       	lpm	r25, Z
     7a8:	9a 8b       	std	Y+18, r25	; 0x12
     7aa:	89 8b       	std	Y+17, r24	; 0x11
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	08 95       	ret

000007b4 <_ZN14SoftwareSerial5setRXEh>:
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
     7bc:	16 2f       	mov	r17, r22
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	81 2f       	mov	r24, r17
     7c2:	0e 94 ba 06 	call	0xd74	; 0xd74 <pinMode>
     7c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7c8:	81 fd       	sbrc	r24, 1
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <_ZN14SoftwareSerial5setRXEh+0x20>
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	81 2f       	mov	r24, r17
     7d0:	0e 94 f6 06 	call	0xdec	; 0xdec <digitalWrite>
     7d4:	1c 87       	std	Y+12, r17	; 0x0c
     7d6:	81 2f       	mov	r24, r17
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	fc 01       	movw	r30, r24
     7dc:	e4 58       	subi	r30, 0x84	; 132
     7de:	ff 4f       	sbci	r31, 0xFF	; 255
     7e0:	e4 91       	lpm	r30, Z
     7e2:	ed 87       	std	Y+13, r30	; 0x0d
     7e4:	fc 01       	movw	r30, r24
     7e6:	e0 57       	subi	r30, 0x70	; 112
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	e4 91       	lpm	r30, Z
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	ec 55       	subi	r30, 0x5C	; 92
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	85 91       	lpm	r24, Z+
     7f8:	94 91       	lpm	r25, Z
     7fa:	9f 87       	std	Y+15, r25	; 0x0f
     7fc:	8e 87       	std	Y+14, r24	; 0x0e
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	08 95       	ret

00000806 <_ZN14SoftwareSerialC1Ehhb>:
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	ec 01       	movw	r28, r24
     80e:	16 2f       	mov	r17, r22
     810:	1b 82       	std	Y+3, r1	; 0x03
     812:	1a 82       	std	Y+2, r1	; 0x02
     814:	88 ee       	ldi	r24, 0xE8	; 232
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	a0 e0       	ldi	r26, 0x00	; 0
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	8c 83       	std	Y+4, r24	; 0x04
     81e:	9d 83       	std	Y+5, r25	; 0x05
     820:	ae 83       	std	Y+6, r26	; 0x06
     822:	bf 83       	std	Y+7, r27	; 0x07
     824:	8e e0       	ldi	r24, 0x0E	; 14
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	99 83       	std	Y+1, r25	; 0x01
     82a:	88 83       	st	Y, r24
     82c:	1f 8a       	std	Y+23, r1	; 0x17
     82e:	1e 8a       	std	Y+22, r1	; 0x16
     830:	19 8e       	std	Y+25, r1	; 0x19
     832:	18 8e       	std	Y+24, r1	; 0x18
     834:	1b 8e       	std	Y+27, r1	; 0x1b
     836:	1a 8e       	std	Y+26, r1	; 0x1a
     838:	1d 8e       	std	Y+29, r1	; 0x1d
     83a:	1c 8e       	std	Y+28, r1	; 0x1c
     83c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     83e:	8e 7f       	andi	r24, 0xFE	; 254
     840:	20 fb       	bst	r18, 0
     842:	81 f9       	bld	r24, 1
     844:	8e 8f       	std	Y+30, r24	; 0x1e
     846:	64 2f       	mov	r22, r20
     848:	ce 01       	movw	r24, r28
     84a:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN14SoftwareSerial5setTXEh>
     84e:	61 2f       	mov	r22, r17
     850:	ce 01       	movw	r24, r28
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_ZN14SoftwareSerial5setRXEh>

0000085c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	ec 01       	movw	r28, r24
     862:	9a 01       	movw	r18, r20
     864:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     866:	1b 8e       	std	Y+27, r1	; 0x1b
     868:	1a 8e       	std	Y+26, r1	; 0x1a
     86a:	19 8e       	std	Y+25, r1	; 0x19
     86c:	18 8e       	std	Y+24, r1	; 0x18
     86e:	1f 8a       	std	Y+23, r1	; 0x17
     870:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     872:	60 e8       	ldi	r22, 0x80	; 128
     874:	74 e8       	ldi	r23, 0x84	; 132
     876:	8e e1       	ldi	r24, 0x1E	; 30
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 30 08 	call	0x1060	; 0x1060 <__divmodsi4>
     87e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     880:	24 30       	cpi	r18, 0x04	; 4
     882:	31 05       	cpc	r19, r1
     884:	18 f0       	brcs	.+6      	; 0x88c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     886:	c9 01       	movw	r24, r18
     888:	03 97       	sbiw	r24, 0x03	; 3
     88a:	02 c0       	rjmp	.+4      	; 0x890 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     890:	9d 8f       	std	Y+29, r25	; 0x1d
     892:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     894:	6c 85       	ldd	r22, Y+12	; 0x0c
     896:	66 31       	cpi	r22, 0x16	; 22
     898:	08 f0       	brcs	.+2      	; 0x89c <_ZN14SoftwareSerial5beginEl+0x40>
     89a:	69 c0       	rjmp	.+210    	; 0x96e <__stack+0x6f>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     89c:	c9 01       	movw	r24, r18
     89e:	96 95       	lsr	r25
     8a0:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     8a2:	84 31       	cpi	r24, 0x14	; 20
     8a4:	91 05       	cpc	r25, r1
     8a6:	10 f0       	brcs	.+4      	; 0x8ac <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
     8a8:	43 97       	sbiw	r24, 0x13	; 19
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     8b0:	9f 8b       	std	Y+23, r25	; 0x17
     8b2:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     8b4:	36 97       	sbiw	r30, 0x06	; 6
     8b6:	18 f0       	brcs	.+6      	; 0x8be <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
     8b8:	c9 01       	movw	r24, r18
     8ba:	05 97       	sbiw	r24, 0x05	; 5
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     8c2:	99 8f       	std	Y+25, r25	; 0x19
     8c4:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     8c6:	c9 01       	movw	r24, r18
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	28 0f       	add	r18, r24
     8ce:	39 1f       	adc	r19, r25
     8d0:	36 95       	lsr	r19
     8d2:	27 95       	ror	r18
     8d4:	36 95       	lsr	r19
     8d6:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     8d8:	2d 30       	cpi	r18, 0x0D	; 13
     8da:	31 05       	cpc	r19, r1
     8dc:	18 f0       	brcs	.+6      	; 0x8e4 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
     8de:	2c 50       	subi	r18, 0x0C	; 12
     8e0:	31 09       	sbc	r19, r1
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     8e8:	3b 8f       	std	Y+27, r19	; 0x1b
     8ea:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
     8ec:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     8f0:	68 30       	cpi	r22, 0x08	; 8
     8f2:	50 f0       	brcs	.+20     	; 0x908 <__stack+0x9>
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	6e 30       	cpi	r22, 0x0E	; 14
     8f8:	08 f4       	brcc	.+2      	; 0x8fc <_ZN14SoftwareSerial5beginEl+0xa0>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__stack+0x3>
     900:	88 0f       	add	r24, r24
     902:	2a 95       	dec	r18
     904:	ea f7       	brpl	.-6      	; 0x900 <__stack+0x1>
     906:	01 c0       	rjmp	.+2      	; 0x90a <__stack+0xb>
     908:	84 e0       	ldi	r24, 0x04	; 4
     90a:	89 2b       	or	r24, r25
     90c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
     910:	9c 85       	ldd	r25, Y+12	; 0x0c
     912:	98 30       	cpi	r25, 0x08	; 8
     914:	38 f0       	brcs	.+14     	; 0x924 <__stack+0x25>
     916:	9e 30       	cpi	r25, 0x0E	; 14
     918:	40 f0       	brcs	.+16     	; 0x92a <__stack+0x2b>
     91a:	96 31       	cpi	r25, 0x16	; 22
     91c:	48 f0       	brcs	.+18     	; 0x930 <__stack+0x31>
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	08 c0       	rjmp	.+16     	; 0x934 <__stack+0x35>
     924:	2d e6       	ldi	r18, 0x6D	; 109
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0x35>
     92a:	2b e6       	ldi	r18, 0x6B	; 107
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
     930:	2c e6       	ldi	r18, 0x6C	; 108
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	3c 8b       	std	Y+20, r19	; 0x14
     936:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
     938:	98 30       	cpi	r25, 0x08	; 8
     93a:	30 f4       	brcc	.+12     	; 0x948 <__stack+0x49>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	01 c0       	rjmp	.+2      	; 0x942 <__stack+0x43>
     940:	88 0f       	add	r24, r24
     942:	9a 95       	dec	r25
     944:	ea f7       	brpl	.-6      	; 0x940 <__stack+0x41>
     946:	0e c0       	rjmp	.+28     	; 0x964 <__stack+0x65>
     948:	29 2f       	mov	r18, r25
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	9e 30       	cpi	r25, 0x0E	; 14
     94e:	18 f4       	brcc	.+6      	; 0x956 <__stack+0x57>
     950:	28 50       	subi	r18, 0x08	; 8
     952:	31 09       	sbc	r19, r1
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0x5b>
     956:	2e 50       	subi	r18, 0x0E	; 14
     958:	31 09       	sbc	r19, r1
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	01 c0       	rjmp	.+2      	; 0x960 <__stack+0x61>
     95e:	88 0f       	add	r24, r24
     960:	2a 95       	dec	r18
     962:	ea f7       	brpl	.-6      	; 0x95e <__stack+0x5f>
     964:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     966:	8c 8d       	ldd	r24, Y+28	; 0x1c
     968:	9d 8d       	ldd	r25, Y+29	; 0x1d
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <__stack+0x6b>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     96e:	ce 01       	movw	r24, r28
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
     974:	0c 94 07 03 	jmp	0x60e	; 0x60e <_ZN14SoftwareSerial6listenEv>

00000978 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     978:	1f 92       	push	r1
     97a:	0f 92       	push	r0
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	0f 92       	push	r0
     980:	11 24       	eor	r1, r1
     982:	2f 93       	push	r18
     984:	8f 93       	push	r24
     986:	9f 93       	push	r25
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     98c:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <Serial+0x10>
     990:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <Serial+0x11>
     994:	80 81       	ld	r24, Z
     996:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <Serial+0x16>
     99a:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <Serial+0x17>
     99e:	82 fd       	sbrc	r24, 2
     9a0:	12 c0       	rjmp	.+36     	; 0x9c6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     9a2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9a4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <Serial+0x19>
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9ac:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <Serial+0x1a>
     9b0:	82 17       	cp	r24, r18
     9b2:	51 f0       	breq	.+20     	; 0x9c8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     9b4:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <Serial+0x19>
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	e7 53       	subi	r30, 0x37	; 55
     9bc:	fe 4f       	sbci	r31, 0xFE	; 254
     9be:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     9c0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <Serial+0x19>
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9c6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	9f 91       	pop	r25
     9ce:	8f 91       	pop	r24
     9d0:	2f 91       	pop	r18
     9d2:	0f 90       	pop	r0
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti

000009dc <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1
     9e6:	2f 93       	push	r18
     9e8:	3f 93       	push	r19
     9ea:	4f 93       	push	r20
     9ec:	5f 93       	push	r21
     9ee:	6f 93       	push	r22
     9f0:	7f 93       	push	r23
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	af 93       	push	r26
     9f8:	bf 93       	push	r27
     9fa:	ef 93       	push	r30
     9fc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     9fe:	89 ec       	ldi	r24, 0xC9	; 201
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     a28:	89 ec       	ldi	r24, 0xC9	; 201
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN14HardwareSerial9availableEv>
     a30:	21 e0       	ldi	r18, 0x01	; 1
     a32:	89 2b       	or	r24, r25
     a34:	09 f4       	brne	.+2      	; 0xa38 <_Z17Serial0_availablev+0x10>
     a36:	20 e0       	ldi	r18, 0x00	; 0
}
     a38:	82 2f       	mov	r24, r18
     a3a:	08 95       	ret

00000a3c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     a3c:	e9 ec       	ldi	r30, 0xC9	; 201
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	13 82       	std	Z+3, r1	; 0x03
     a42:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     a44:	88 ee       	ldi	r24, 0xE8	; 232
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	84 83       	std	Z+4, r24	; 0x04
     a4e:	95 83       	std	Z+5, r25	; 0x05
     a50:	a6 83       	std	Z+6, r26	; 0x06
     a52:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a54:	8f e2       	ldi	r24, 0x2F	; 47
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	80 83       	st	Z, r24
     a5c:	85 ec       	ldi	r24, 0xC5	; 197
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	95 87       	std	Z+13, r25	; 0x0d
     a62:	84 87       	std	Z+12, r24	; 0x0c
     a64:	84 ec       	ldi	r24, 0xC4	; 196
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	97 87       	std	Z+15, r25	; 0x0f
     a6a:	86 87       	std	Z+14, r24	; 0x0e
     a6c:	80 ec       	ldi	r24, 0xC0	; 192
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	91 8b       	std	Z+17, r25	; 0x11
     a72:	80 8b       	std	Z+16, r24	; 0x10
     a74:	81 ec       	ldi	r24, 0xC1	; 193
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	93 8b       	std	Z+19, r25	; 0x13
     a7a:	82 8b       	std	Z+18, r24	; 0x12
     a7c:	82 ec       	ldi	r24, 0xC2	; 194
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	95 8b       	std	Z+21, r25	; 0x15
     a82:	84 8b       	std	Z+20, r24	; 0x14
     a84:	86 ec       	ldi	r24, 0xC6	; 198
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	97 8b       	std	Z+23, r25	; 0x17
     a8a:	86 8b       	std	Z+22, r24	; 0x16
     a8c:	11 8e       	std	Z+25, r1	; 0x19
     a8e:	12 8e       	std	Z+26, r1	; 0x1a
     a90:	13 8e       	std	Z+27, r1	; 0x1b
     a92:	14 8e       	std	Z+28, r1	; 0x1c
     a94:	08 95       	ret

00000a96 <initVariant>:
     a96:	08 95       	ret

00000a98 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     a98:	0e 94 56 06 	call	0xcac	; 0xcac <init>

	initVariant();
     a9c:	0e 94 4b 05 	call	0xa96	; 0xa96 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     aa0:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     aa4:	c2 e6       	ldi	r28, 0x62	; 98
     aa6:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
     aa8:	0e 94 bc 00 	call	0x178	; 0x178 <loop>
		if (serialEventRun) serialEventRun();
     aac:	20 97       	sbiw	r28, 0x00	; 0
     aae:	e1 f3       	breq	.-8      	; 0xaa8 <main+0x10>
     ab0:	0e 94 62 07 	call	0xec4	; 0xec4 <_Z14serialEventRunv>
     ab4:	f9 cf       	rjmp	.-14     	; 0xaa8 <main+0x10>

00000ab6 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	6c 01       	movw	r12, r24
     ac8:	7a 01       	movw	r14, r20
     aca:	8b 01       	movw	r16, r22
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	d0 e0       	ldi	r29, 0x00	; 0
     ad0:	ce 15       	cp	r28, r14
     ad2:	df 05       	cpc	r29, r15
     ad4:	81 f0       	breq	.+32     	; 0xaf6 <_ZN5Print5writeEPKhj+0x40>
     ad6:	d8 01       	movw	r26, r16
     ad8:	6d 91       	ld	r22, X+
     ada:	8d 01       	movw	r16, r26
     adc:	d6 01       	movw	r26, r12
     ade:	ed 91       	ld	r30, X+
     ae0:	fc 91       	ld	r31, X
     ae2:	01 90       	ld	r0, Z+
     ae4:	f0 81       	ld	r31, Z
     ae6:	e0 2d       	mov	r30, r0
     ae8:	c6 01       	movw	r24, r12
     aea:	09 95       	icall
     aec:	89 2b       	or	r24, r25
     aee:	11 f0       	breq	.+4      	; 0xaf4 <_ZN5Print5writeEPKhj+0x3e>
     af0:	21 96       	adiw	r28, 0x01	; 1
     af2:	ee cf       	rjmp	.-36     	; 0xad0 <_ZN5Print5writeEPKhj+0x1a>
     af4:	7e 01       	movw	r14, r28
     af6:	c7 01       	movw	r24, r14
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	08 95       	ret

00000b0a <_ZN5Print5writeEPKc>:
     b0a:	61 15       	cp	r22, r1
     b0c:	71 05       	cpc	r23, r1
     b0e:	79 f0       	breq	.+30     	; 0xb2e <_ZN5Print5writeEPKc+0x24>
     b10:	fb 01       	movw	r30, r22
     b12:	01 90       	ld	r0, Z+
     b14:	00 20       	and	r0, r0
     b16:	e9 f7       	brne	.-6      	; 0xb12 <_ZN5Print5writeEPKc+0x8>
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	af 01       	movw	r20, r30
     b1c:	46 1b       	sub	r20, r22
     b1e:	57 0b       	sbc	r21, r23
     b20:	dc 01       	movw	r26, r24
     b22:	ed 91       	ld	r30, X+
     b24:	fc 91       	ld	r31, X
     b26:	02 80       	ldd	r0, Z+2	; 0x02
     b28:	f3 81       	ldd	r31, Z+3	; 0x03
     b2a:	e0 2d       	mov	r30, r0
     b2c:	09 94       	ijmp
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	08 95       	ret

00000b34 <_ZN5Print7printlnEv>:
     b34:	6c e1       	ldi	r22, 0x1C	; 28
     b36:	71 e0       	ldi	r23, 0x01	; 1
     b38:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <_ZN5Print5writeEPKc>

00000b3c <_ZN5Print11printNumberEmh>:
     b3c:	8f 92       	push	r8
     b3e:	9f 92       	push	r9
     b40:	af 92       	push	r10
     b42:	bf 92       	push	r11
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	a1 97       	sbiw	r28, 0x21	; 33
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	7c 01       	movw	r14, r24
     b62:	fa 01       	movw	r30, r20
     b64:	cb 01       	movw	r24, r22
     b66:	19 a2       	std	Y+33, r1	; 0x21
     b68:	22 30       	cpi	r18, 0x02	; 2
     b6a:	08 f4       	brcc	.+2      	; 0xb6e <_ZN5Print11printNumberEmh+0x32>
     b6c:	2a e0       	ldi	r18, 0x0A	; 10
     b6e:	8e 01       	movw	r16, r28
     b70:	0f 5d       	subi	r16, 0xDF	; 223
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	82 2e       	mov	r8, r18
     b76:	91 2c       	mov	r9, r1
     b78:	a1 2c       	mov	r10, r1
     b7a:	b1 2c       	mov	r11, r1
     b7c:	bf 01       	movw	r22, r30
     b7e:	a5 01       	movw	r20, r10
     b80:	94 01       	movw	r18, r8
     b82:	0e 94 0e 08 	call	0x101c	; 0x101c <__udivmodsi4>
     b86:	f9 01       	movw	r30, r18
     b88:	ca 01       	movw	r24, r20
     b8a:	01 50       	subi	r16, 0x01	; 1
     b8c:	11 09       	sbc	r17, r1
     b8e:	6a 30       	cpi	r22, 0x0A	; 10
     b90:	10 f4       	brcc	.+4      	; 0xb96 <_ZN5Print11printNumberEmh+0x5a>
     b92:	60 5d       	subi	r22, 0xD0	; 208
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <_ZN5Print11printNumberEmh+0x5c>
     b96:	69 5c       	subi	r22, 0xC9	; 201
     b98:	d8 01       	movw	r26, r16
     b9a:	6c 93       	st	X, r22
     b9c:	23 2b       	or	r18, r19
     b9e:	24 2b       	or	r18, r20
     ba0:	25 2b       	or	r18, r21
     ba2:	61 f7       	brne	.-40     	; 0xb7c <_ZN5Print11printNumberEmh+0x40>
     ba4:	b8 01       	movw	r22, r16
     ba6:	c7 01       	movw	r24, r14
     ba8:	0e 94 85 05 	call	0xb0a	; 0xb0a <_ZN5Print5writeEPKc>
     bac:	a1 96       	adiw	r28, 0x21	; 33
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	9f 90       	pop	r9
     bca:	8f 90       	pop	r8
     bcc:	08 95       	ret

00000bce <_ZN5Print5printEmi>:
     bce:	21 15       	cp	r18, r1
     bd0:	31 05       	cpc	r19, r1
     bd2:	41 f4       	brne	.+16     	; 0xbe4 <_ZN5Print5printEmi+0x16>
     bd4:	dc 01       	movw	r26, r24
     bd6:	ed 91       	ld	r30, X+
     bd8:	fc 91       	ld	r31, X
     bda:	01 90       	ld	r0, Z+
     bdc:	f0 81       	ld	r31, Z
     bde:	e0 2d       	mov	r30, r0
     be0:	64 2f       	mov	r22, r20
     be2:	09 94       	ijmp
     be4:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <_ZN5Print11printNumberEmh>

00000be8 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
     be8:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
     bea:	ab 01       	movw	r20, r22
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	0c 94 e7 05 	jmp	0xbce	; 0xbce <_ZN5Print5printEmi>

00000bf4 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     bfe:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <_ZN5Print5printEji>
     c02:	8c 01       	movw	r16, r24
  n += println();
     c04:	ce 01       	movw	r24, r28
     c06:	0e 94 9a 05 	call	0xb34	; 0xb34 <_ZN5Print7printlnEv>
  return n;
}
     c0a:	80 0f       	add	r24, r16
     c0c:	91 1f       	adc	r25, r17
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     c18:	1f 92       	push	r1
     c1a:	0f 92       	push	r0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	0f 92       	push	r0
     c20:	11 24       	eor	r1, r1
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <timer0_millis>
     c32:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <timer0_millis+0x1>
     c36:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <timer0_millis+0x2>
     c3a:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <timer0_millis+0x3>
     c3e:	30 91 66 02 	lds	r19, 0x0266	; 0x800266 <timer0_fract>
     c42:	23 e0       	ldi	r18, 0x03	; 3
     c44:	23 0f       	add	r18, r19
     c46:	2d 37       	cpi	r18, 0x7D	; 125
     c48:	20 f4       	brcc	.+8      	; 0xc52 <__vector_16+0x3a>
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	a1 1d       	adc	r26, r1
     c4e:	b1 1d       	adc	r27, r1
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <__vector_16+0x44>
     c52:	26 e8       	ldi	r18, 0x86	; 134
     c54:	23 0f       	add	r18, r19
     c56:	02 96       	adiw	r24, 0x02	; 2
     c58:	a1 1d       	adc	r26, r1
     c5a:	b1 1d       	adc	r27, r1
     c5c:	20 93 66 02 	sts	0x0266, r18	; 0x800266 <timer0_fract>
     c60:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <timer0_millis>
     c64:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <timer0_millis+0x1>
     c68:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <timer0_millis+0x2>
     c6c:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <timer0_millis+0x3>
     c70:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <timer0_overflow_count>
     c74:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <timer0_overflow_count+0x1>
     c78:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <timer0_overflow_count+0x2>
     c7c:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <timer0_overflow_count+0x3>
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	a1 1d       	adc	r26, r1
     c84:	b1 1d       	adc	r27, r1
     c86:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <timer0_overflow_count>
     c8a:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <timer0_overflow_count+0x1>
     c8e:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <timer0_overflow_count+0x2>
     c92:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <timer0_overflow_count+0x3>
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     cac:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     cae:	84 b5       	in	r24, 0x24	; 36
     cb0:	82 60       	ori	r24, 0x02	; 2
     cb2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     cb4:	84 b5       	in	r24, 0x24	; 36
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     cba:	85 b5       	in	r24, 0x25	; 37
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     cc0:	85 b5       	in	r24, 0x25	; 37
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     cc6:	ee e6       	ldi	r30, 0x6E	; 110
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     cd0:	e1 e8       	ldi	r30, 0x81	; 129
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     cd6:	80 81       	ld	r24, Z
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ce2:	e0 e8       	ldi	r30, 0x80	; 128
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     cec:	e1 eb       	ldi	r30, 0xB1	; 177
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	84 60       	ori	r24, 0x04	; 4
     cf4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     cf6:	e0 eb       	ldi	r30, 0xB0	; 176
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	81 60       	ori	r24, 0x01	; 1
     cfe:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d00:	ea e7       	ldi	r30, 0x7A	; 122
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	84 60       	ori	r24, 0x04	; 4
     d08:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     d0a:	80 81       	ld	r24, Z
     d0c:	82 60       	ori	r24, 0x02	; 2
     d0e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     d10:	80 81       	ld	r24, Z
     d12:	81 60       	ori	r24, 0x01	; 1
     d14:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d16:	80 81       	ld	r24, Z
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     d1c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     d20:	08 95       	ret

00000d22 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	81 f0       	breq	.+32     	; 0xd46 <turnOffPWM+0x24>
     d26:	28 f4       	brcc	.+10     	; 0xd32 <turnOffPWM+0x10>
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	99 f0       	breq	.+38     	; 0xd52 <turnOffPWM+0x30>
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	a1 f0       	breq	.+40     	; 0xd58 <turnOffPWM+0x36>
     d30:	08 95       	ret
     d32:	87 30       	cpi	r24, 0x07	; 7
     d34:	a9 f0       	breq	.+42     	; 0xd60 <turnOffPWM+0x3e>
     d36:	88 30       	cpi	r24, 0x08	; 8
     d38:	b9 f0       	breq	.+46     	; 0xd68 <turnOffPWM+0x46>
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	d1 f4       	brne	.+52     	; 0xd72 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     d3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d42:	8f 7d       	andi	r24, 0xDF	; 223
     d44:	03 c0       	rjmp	.+6      	; 0xd4c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     d46:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d4a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     d4c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d50:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     d52:	84 b5       	in	r24, 0x24	; 36
     d54:	8f 77       	andi	r24, 0x7F	; 127
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     d58:	84 b5       	in	r24, 0x24	; 36
     d5a:	8f 7d       	andi	r24, 0xDF	; 223
     d5c:	84 bd       	out	0x24, r24	; 36
     d5e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     d60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     d64:	8f 77       	andi	r24, 0x7F	; 127
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     d68:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     d6c:	8f 7d       	andi	r24, 0xDF	; 223
     d6e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     d72:	08 95       	ret

00000d74 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	fc 01       	movw	r30, r24
     d7c:	e4 58       	subi	r30, 0x84	; 132
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     d82:	fc 01       	movw	r30, r24
     d84:	e0 57       	subi	r30, 0x70	; 112
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     d8a:	88 23       	and	r24, r24
     d8c:	61 f1       	breq	.+88     	; 0xde6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	fc 01       	movw	r30, r24
     d96:	e8 54       	subi	r30, 0x48	; 72
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	c5 91       	lpm	r28, Z+
     d9c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     d9e:	fc 01       	movw	r30, r24
     da0:	e2 55       	subi	r30, 0x52	; 82
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	a5 91       	lpm	r26, Z+
     da6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     da8:	61 11       	cpse	r22, r1
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     dac:	9f b7       	in	r25, 0x3f	; 63
                cli();
     dae:	f8 94       	cli
		*reg &= ~bit;
     db0:	88 81       	ld	r24, Y
     db2:	20 95       	com	r18
     db4:	82 23       	and	r24, r18
     db6:	88 83       	st	Y, r24
		*out &= ~bit;
     db8:	ec 91       	ld	r30, X
     dba:	2e 23       	and	r18, r30
     dbc:	0b c0       	rjmp	.+22     	; 0xdd4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     dbe:	62 30       	cpi	r22, 0x02	; 2
     dc0:	61 f4       	brne	.+24     	; 0xdda <pinMode+0x66>
		uint8_t oldSREG = SREG;
     dc2:	9f b7       	in	r25, 0x3f	; 63
                cli();
     dc4:	f8 94       	cli
		*reg &= ~bit;
     dc6:	88 81       	ld	r24, Y
     dc8:	32 2f       	mov	r19, r18
     dca:	30 95       	com	r19
     dcc:	83 23       	and	r24, r19
     dce:	88 83       	st	Y, r24
		*out |= bit;
     dd0:	ec 91       	ld	r30, X
     dd2:	2e 2b       	or	r18, r30
     dd4:	2c 93       	st	X, r18
		SREG = oldSREG;
     dd6:	9f bf       	out	0x3f, r25	; 63
     dd8:	06 c0       	rjmp	.+12     	; 0xde6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     dda:	8f b7       	in	r24, 0x3f	; 63
                cli();
     ddc:	f8 94       	cli
		*reg |= bit;
     dde:	e8 81       	ld	r30, Y
     de0:	2e 2b       	or	r18, r30
     de2:	28 83       	st	Y, r18
		SREG = oldSREG;
     de4:	8f bf       	out	0x3f, r24	; 63
	}
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	f9 01       	movw	r30, r18
     df8:	e8 59       	subi	r30, 0x98	; 152
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     dfe:	f9 01       	movw	r30, r18
     e00:	e4 58       	subi	r30, 0x84	; 132
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     e06:	f9 01       	movw	r30, r18
     e08:	e0 57       	subi	r30, 0x70	; 112
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     e0e:	cc 23       	and	r28, r28
     e10:	c1 f0       	breq	.+48     	; 0xe42 <digitalWrite+0x56>
     e12:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     e14:	81 11       	cpse	r24, r1
     e16:	0e 94 91 06 	call	0xd22	; 0xd22 <turnOffPWM>

	out = portOutputRegister(port);
     e1a:	ec 2f       	mov	r30, r28
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	e2 55       	subi	r30, 0x52	; 82
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	a5 91       	lpm	r26, Z+
     e28:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     e2a:	9f b7       	in	r25, 0x3f	; 63
	cli();
     e2c:	f8 94       	cli

	if (val == LOW) {
     e2e:	11 11       	cpse	r17, r1
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <digitalWrite+0x4e>
		*out &= ~bit;
     e32:	8c 91       	ld	r24, X
     e34:	d0 95       	com	r29
     e36:	d8 23       	and	r29, r24
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <digitalWrite+0x52>
	} else {
		*out |= bit;
     e3a:	ec 91       	ld	r30, X
     e3c:	de 2b       	or	r29, r30
     e3e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     e40:	9f bf       	out	0x3f, r25	; 63
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	08 95       	ret

00000e4a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     e4a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     e4c:	91 8d       	ldd	r25, Z+25	; 0x19
     e4e:	22 8d       	ldd	r18, Z+26	; 0x1a
     e50:	89 2f       	mov	r24, r25
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	80 5c       	subi	r24, 0xC0	; 192
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	82 1b       	sub	r24, r18
     e5a:	91 09       	sbc	r25, r1
}
     e5c:	8f 73       	andi	r24, 0x3F	; 63
     e5e:	99 27       	eor	r25, r25
     e60:	08 95       	ret

00000e62 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     e62:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     e64:	91 8d       	ldd	r25, Z+25	; 0x19
     e66:	82 8d       	ldd	r24, Z+26	; 0x1a
     e68:	98 17       	cp	r25, r24
     e6a:	31 f0       	breq	.+12     	; 0xe78 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     e6c:	82 8d       	ldd	r24, Z+26	; 0x1a
     e6e:	e8 0f       	add	r30, r24
     e70:	f1 1d       	adc	r31, r1
     e72:	85 8d       	ldd	r24, Z+29	; 0x1d
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     e7c:	08 95       	ret

00000e7e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     e7e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     e80:	91 8d       	ldd	r25, Z+25	; 0x19
     e82:	82 8d       	ldd	r24, Z+26	; 0x1a
     e84:	98 17       	cp	r25, r24
     e86:	61 f0       	breq	.+24     	; 0xea0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     e88:	82 8d       	ldd	r24, Z+26	; 0x1a
     e8a:	df 01       	movw	r26, r30
     e8c:	a8 0f       	add	r26, r24
     e8e:	b1 1d       	adc	r27, r1
     e90:	5d 96       	adiw	r26, 0x1d	; 29
     e92:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     e94:	92 8d       	ldd	r25, Z+26	; 0x1a
     e96:	9f 5f       	subi	r25, 0xFF	; 255
     e98:	9f 73       	andi	r25, 0x3F	; 63
     e9a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     ea4:	08 95       	ret

00000ea6 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     ea6:	fc 01       	movw	r30, r24
     ea8:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     eaa:	44 8d       	ldd	r20, Z+28	; 0x1c
     eac:	25 2f       	mov	r18, r21
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	84 2f       	mov	r24, r20
     eb2:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     eb4:	82 1b       	sub	r24, r18
     eb6:	93 0b       	sbc	r25, r19
     eb8:	54 17       	cp	r21, r20
     eba:	10 f0       	brcs	.+4      	; 0xec0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     ebc:	cf 96       	adiw	r24, 0x3f	; 63
     ebe:	08 95       	ret
  return tail - head - 1;
     ec0:	01 97       	sbiw	r24, 0x01	; 1
}
     ec2:	08 95       	ret

00000ec4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     ec4:	84 e1       	ldi	r24, 0x14	; 20
     ec6:	95 e0       	ldi	r25, 0x05	; 5
     ec8:	89 2b       	or	r24, r25
     eca:	49 f0       	breq	.+18     	; 0xede <_Z14serialEventRunv+0x1a>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	89 2b       	or	r24, r25
     ed2:	29 f0       	breq	.+10     	; 0xede <_Z14serialEventRunv+0x1a>
     ed4:	0e 94 14 05 	call	0xa28	; 0xa28 <_Z17Serial0_availablev>
     ed8:	81 11       	cpse	r24, r1
     eda:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     ede:	08 95       	ret

00000ee0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     ee0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     ee2:	84 8d       	ldd	r24, Z+28	; 0x1c
     ee4:	df 01       	movw	r26, r30
     ee6:	a8 0f       	add	r26, r24
     ee8:	b1 1d       	adc	r27, r1
     eea:	a3 5a       	subi	r26, 0xA3	; 163
     eec:	bf 4f       	sbci	r27, 0xFF	; 255
     eee:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     ef0:	84 8d       	ldd	r24, Z+28	; 0x1c
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	8f 73       	andi	r24, 0x3F	; 63
     ef8:	99 27       	eor	r25, r25
     efa:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     efc:	a6 89       	ldd	r26, Z+22	; 0x16
     efe:	b7 89       	ldd	r27, Z+23	; 0x17
     f00:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     f02:	a0 89       	ldd	r26, Z+16	; 0x10
     f04:	b1 89       	ldd	r27, Z+17	; 0x11
     f06:	8c 91       	ld	r24, X
     f08:	80 64       	ori	r24, 0x40	; 64
     f0a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     f0c:	93 8d       	ldd	r25, Z+27	; 0x1b
     f0e:	84 8d       	ldd	r24, Z+28	; 0x1c
     f10:	98 13       	cpse	r25, r24
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     f14:	02 88       	ldd	r0, Z+18	; 0x12
     f16:	f3 89       	ldd	r31, Z+19	; 0x13
     f18:	e0 2d       	mov	r30, r0
     f1a:	80 81       	ld	r24, Z
     f1c:	8f 7d       	andi	r24, 0xDF	; 223
     f1e:	80 83       	st	Z, r24
     f20:	08 95       	ret

00000f22 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	ec 01       	movw	r28, r24
  _written = true;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     f34:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f36:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f38:	98 13       	cpse	r25, r24
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <_ZN14HardwareSerial5writeEh+0x24>
     f3c:	e8 89       	ldd	r30, Y+16	; 0x10
     f3e:	f9 89       	ldd	r31, Y+17	; 0x11
     f40:	80 81       	ld	r24, Z
     f42:	85 fd       	sbrc	r24, 5
     f44:	24 c0       	rjmp	.+72     	; 0xf8e <_ZN14HardwareSerial5writeEh+0x6c>
     f46:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     f48:	0b 8d       	ldd	r16, Y+27	; 0x1b
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	0f 5f       	subi	r16, 0xFF	; 255
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	0f 73       	andi	r16, 0x3F	; 63
     f52:	11 27       	eor	r17, r17
     f54:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     f56:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f58:	e8 12       	cpse	r14, r24
     f5a:	0c c0       	rjmp	.+24     	; 0xf74 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	07 fc       	sbrc	r0, 7
     f60:	fa cf       	rjmp	.-12     	; 0xf56 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     f62:	e8 89       	ldd	r30, Y+16	; 0x10
     f64:	f9 89       	ldd	r31, Y+17	; 0x11
     f66:	80 81       	ld	r24, Z
     f68:	85 ff       	sbrs	r24, 5
     f6a:	f5 cf       	rjmp	.-22     	; 0xf56 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     f6c:	ce 01       	movw	r24, r28
     f6e:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     f72:	f1 cf       	rjmp	.-30     	; 0xf56 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f76:	fe 01       	movw	r30, r28
     f78:	e8 0f       	add	r30, r24
     f7a:	f1 1d       	adc	r31, r1
     f7c:	e3 5a       	subi	r30, 0xA3	; 163
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     f82:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     f84:	ea 89       	ldd	r30, Y+18	; 0x12
     f86:	fb 89       	ldd	r31, Y+19	; 0x13
     f88:	80 81       	ld	r24, Z
     f8a:	80 62       	ori	r24, 0x20	; 32
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     f8e:	ee 89       	ldd	r30, Y+22	; 0x16
     f90:	ff 89       	ldd	r31, Y+23	; 0x17
     f92:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     f94:	e8 89       	ldd	r30, Y+16	; 0x10
     f96:	f9 89       	ldd	r31, Y+17	; 0x11
     f98:	80 81       	ld	r24, Z
     f9a:	80 64       	ori	r24, 0x40	; 64
     f9c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	08 95       	ret

00000fb0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     fb6:	88 8d       	ldd	r24, Y+24	; 0x18
     fb8:	88 23       	and	r24, r24
     fba:	c9 f0       	breq	.+50     	; 0xfee <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     fbc:	ea 89       	ldd	r30, Y+18	; 0x12
     fbe:	fb 89       	ldd	r31, Y+19	; 0x13
     fc0:	80 81       	ld	r24, Z
     fc2:	85 fd       	sbrc	r24, 5
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <_ZN14HardwareSerial5flushEv+0x20>
     fc6:	a8 89       	ldd	r26, Y+16	; 0x10
     fc8:	b9 89       	ldd	r27, Y+17	; 0x11
     fca:	8c 91       	ld	r24, X
     fcc:	86 fd       	sbrc	r24, 6
     fce:	0f c0       	rjmp	.+30     	; 0xfee <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	07 fc       	sbrc	r0, 7
     fd4:	f5 cf       	rjmp	.-22     	; 0xfc0 <_ZN14HardwareSerial5flushEv+0x10>
     fd6:	80 81       	ld	r24, Z
     fd8:	85 ff       	sbrs	r24, 5
     fda:	f2 cf       	rjmp	.-28     	; 0xfc0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     fdc:	a8 89       	ldd	r26, Y+16	; 0x10
     fde:	b9 89       	ldd	r27, Y+17	; 0x11
     fe0:	8c 91       	ld	r24, X
     fe2:	85 ff       	sbrs	r24, 5
     fe4:	ed cf       	rjmp	.-38     	; 0xfc0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     fe6:	ce 01       	movw	r24, r28
     fe8:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     fec:	e7 cf       	rjmp	.-50     	; 0xfbc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <__divmodhi4>:
     ff4:	97 fb       	bst	r25, 7
     ff6:	07 2e       	mov	r0, r23
     ff8:	16 f4       	brtc	.+4      	; 0xffe <__divmodhi4+0xa>
     ffa:	00 94       	com	r0
     ffc:	07 d0       	rcall	.+14     	; 0x100c <__divmodhi4_neg1>
     ffe:	77 fd       	sbrc	r23, 7
    1000:	09 d0       	rcall	.+18     	; 0x1014 <__divmodhi4_neg2>
    1002:	0e 94 4f 08 	call	0x109e	; 0x109e <__udivmodhi4>
    1006:	07 fc       	sbrc	r0, 7
    1008:	05 d0       	rcall	.+10     	; 0x1014 <__divmodhi4_neg2>
    100a:	3e f4       	brtc	.+14     	; 0x101a <__divmodhi4_exit>

0000100c <__divmodhi4_neg1>:
    100c:	90 95       	com	r25
    100e:	81 95       	neg	r24
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	08 95       	ret

00001014 <__divmodhi4_neg2>:
    1014:	70 95       	com	r23
    1016:	61 95       	neg	r22
    1018:	7f 4f       	sbci	r23, 0xFF	; 255

0000101a <__divmodhi4_exit>:
    101a:	08 95       	ret

0000101c <__udivmodsi4>:
    101c:	a1 e2       	ldi	r26, 0x21	; 33
    101e:	1a 2e       	mov	r1, r26
    1020:	aa 1b       	sub	r26, r26
    1022:	bb 1b       	sub	r27, r27
    1024:	fd 01       	movw	r30, r26
    1026:	0d c0       	rjmp	.+26     	; 0x1042 <__udivmodsi4_ep>

00001028 <__udivmodsi4_loop>:
    1028:	aa 1f       	adc	r26, r26
    102a:	bb 1f       	adc	r27, r27
    102c:	ee 1f       	adc	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	a2 17       	cp	r26, r18
    1032:	b3 07       	cpc	r27, r19
    1034:	e4 07       	cpc	r30, r20
    1036:	f5 07       	cpc	r31, r21
    1038:	20 f0       	brcs	.+8      	; 0x1042 <__udivmodsi4_ep>
    103a:	a2 1b       	sub	r26, r18
    103c:	b3 0b       	sbc	r27, r19
    103e:	e4 0b       	sbc	r30, r20
    1040:	f5 0b       	sbc	r31, r21

00001042 <__udivmodsi4_ep>:
    1042:	66 1f       	adc	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	88 1f       	adc	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	1a 94       	dec	r1
    104c:	69 f7       	brne	.-38     	; 0x1028 <__udivmodsi4_loop>
    104e:	60 95       	com	r22
    1050:	70 95       	com	r23
    1052:	80 95       	com	r24
    1054:	90 95       	com	r25
    1056:	9b 01       	movw	r18, r22
    1058:	ac 01       	movw	r20, r24
    105a:	bd 01       	movw	r22, r26
    105c:	cf 01       	movw	r24, r30
    105e:	08 95       	ret

00001060 <__divmodsi4>:
    1060:	05 2e       	mov	r0, r21
    1062:	97 fb       	bst	r25, 7
    1064:	1e f4       	brtc	.+6      	; 0x106c <__divmodsi4+0xc>
    1066:	00 94       	com	r0
    1068:	0e 94 47 08 	call	0x108e	; 0x108e <__negsi2>
    106c:	57 fd       	sbrc	r21, 7
    106e:	07 d0       	rcall	.+14     	; 0x107e <__divmodsi4_neg2>
    1070:	0e 94 0e 08 	call	0x101c	; 0x101c <__udivmodsi4>
    1074:	07 fc       	sbrc	r0, 7
    1076:	03 d0       	rcall	.+6      	; 0x107e <__divmodsi4_neg2>
    1078:	4e f4       	brtc	.+18     	; 0x108c <__divmodsi4_exit>
    107a:	0c 94 47 08 	jmp	0x108e	; 0x108e <__negsi2>

0000107e <__divmodsi4_neg2>:
    107e:	50 95       	com	r21
    1080:	40 95       	com	r20
    1082:	30 95       	com	r19
    1084:	21 95       	neg	r18
    1086:	3f 4f       	sbci	r19, 0xFF	; 255
    1088:	4f 4f       	sbci	r20, 0xFF	; 255
    108a:	5f 4f       	sbci	r21, 0xFF	; 255

0000108c <__divmodsi4_exit>:
    108c:	08 95       	ret

0000108e <__negsi2>:
    108e:	90 95       	com	r25
    1090:	80 95       	com	r24
    1092:	70 95       	com	r23
    1094:	61 95       	neg	r22
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	8f 4f       	sbci	r24, 0xFF	; 255
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	08 95       	ret

0000109e <__udivmodhi4>:
    109e:	aa 1b       	sub	r26, r26
    10a0:	bb 1b       	sub	r27, r27
    10a2:	51 e1       	ldi	r21, 0x11	; 17
    10a4:	07 c0       	rjmp	.+14     	; 0x10b4 <__udivmodhi4_ep>

000010a6 <__udivmodhi4_loop>:
    10a6:	aa 1f       	adc	r26, r26
    10a8:	bb 1f       	adc	r27, r27
    10aa:	a6 17       	cp	r26, r22
    10ac:	b7 07       	cpc	r27, r23
    10ae:	10 f0       	brcs	.+4      	; 0x10b4 <__udivmodhi4_ep>
    10b0:	a6 1b       	sub	r26, r22
    10b2:	b7 0b       	sbc	r27, r23

000010b4 <__udivmodhi4_ep>:
    10b4:	88 1f       	adc	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	5a 95       	dec	r21
    10ba:	a9 f7       	brne	.-22     	; 0x10a6 <__udivmodhi4_loop>
    10bc:	80 95       	com	r24
    10be:	90 95       	com	r25
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	08 95       	ret

000010c6 <__tablejump2__>:
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	05 90       	lpm	r0, Z+
    10cc:	f4 91       	lpm	r31, Z
    10ce:	e0 2d       	mov	r30, r0
    10d0:	09 94       	ijmp

000010d2 <__do_global_dtors>:
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	c3 e6       	ldi	r28, 0x63	; 99
    10d6:	d0 e0       	ldi	r29, 0x00	; 0
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <__do_global_dtors+0x10>
    10da:	fe 01       	movw	r30, r28
    10dc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__tablejump2__>
    10e0:	21 96       	adiw	r28, 0x01	; 1
    10e2:	c4 36       	cpi	r28, 0x64	; 100
    10e4:	d1 07       	cpc	r29, r17
    10e6:	c9 f7       	brne	.-14     	; 0x10da <__do_global_dtors+0x8>
    10e8:	f8 94       	cli

000010ea <__stop_program>:
    10ea:	ff cf       	rjmp	.-2      	; 0x10ea <__stop_program>
