
dojo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000fca  0000105e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000131  0080012e  0080012e  0000108c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000af79  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021ec  00000000  00000000  0000c45d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002573  00000000  00000000  0000e649  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b3c  00000000  00000000  00010bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000028b4  00000000  00000000  000116f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004021  00000000  00000000  00013fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  00017fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_3>
  10:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_3>
  14:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_3>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_16>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_18>
  4c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_19>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	b4 00       	.word	0x00b4	; ????
  c4:	14 05       	cpc	r17, r4

000000c6 <__ctors_end>:
  c6:	c2 00       	.word	0x00c2	; ????

000000c8 <__dtors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ea ec       	ldi	r30, 0xCA	; 202
  dc:	ff e0       	ldi	r31, 0x0F	; 15
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	ae 32       	cpi	r26, 0x2E	; 46
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	ae e2       	ldi	r26, 0x2E	; 46
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	af 35       	cpi	r26, 0x5F	; 95
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c3 e6       	ldi	r28, 0x63	; 99
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	fe 01       	movw	r30, r28
 106:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__tablejump2__>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	d1 07       	cpc	r29, r17
 10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
 110:	0e 94 42 05 	call	0xa84	; 0xa84 <main>
 114:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__do_global_dtors>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:

// state init
void setup()
{
	// all Baudrates to 9600 of UART-Connection
	mySerial.begin(9600);
 11c:	40 e8       	ldi	r20, 0x80	; 128
 11e:	55 e2       	ldi	r21, 0x25	; 37
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	8d e4       	ldi	r24, 0x4D	; 77
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 24 04 	call	0x848	; 0x848 <_ZN14SoftwareSerial5beginEl>
	BTSerial.begin(9600);	
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	55 e2       	ldi	r21, 0x25	; 37
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	8e e2       	ldi	r24, 0x2E	; 46
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 24 04 	call	0x848	; 0x848 <_ZN14SoftwareSerial5beginEl>
	// Mux- and Vibro Ports to output
	DDRC = 0xff;	
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	87 b9       	out	0x07, r24	; 7
	// For WTV setting ports individual
	DDRB |= 0b00111011;	
 140:	84 b1       	in	r24, 0x04	; 4
 142:	8b 63       	ori	r24, 0x3B	; 59
 144:	84 b9       	out	0x04, r24	; 4
	// buttons as inputs
	DDRD |= 0b00010000;
 146:	54 9a       	sbi	0x0a, 4	; 10
	multiplexController(FTDI_PATH);	
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 ca 00 	call	0x194	; 0x194 <_Z19multiplexControlleri>
	pinSetupWTV();		
 150:	0e 94 05 01 	call	0x20a	; 0x20a <_Z11pinSetupWTVv>
	//Setup LED Power on
	digitalWrite(STATUS_LED, LOW);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	0e 94 65 06 	call	0xcca	; 0xcca <digitalWrite>
	// get first response from the hm-11
	firstResponse();
 15c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_Z13firstResponsev>

00000160 <_Z17dojo_statemachinev>:
	unsigned int buffer = 0;
	
	switch (state)
	{
	case SCAN:
		buffer = scan();
 160:	0c 94 3e 02 	jmp	0x47c	; 0x47c <_Z4scanv>

00000164 <loop>:
	}
}

void loop()
{
 	dojo_statemachine();
 164:	0c 94 b0 00 	jmp	0x160	; 0x160 <_Z17dojo_statemachinev>

00000168 <_GLOBAL__sub_I_mySerial>:
﻿#include "include/Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	8d e4       	ldi	r24, 0x4D	; 77
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN14SoftwareSerialC1Ehhb>
SoftwareSerial BTSerial(2,3);	//(RX | TX) - PINS
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	43 e0       	ldi	r20, 0x03	; 3
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	8e e2       	ldi	r24, 0x2E	; 46
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <_ZN14SoftwareSerialC1Ehhb>

00000184 <_GLOBAL__sub_D_mySerial>:
 184:	8e e2       	ldi	r24, 0x2E	; 46
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN14SoftwareSerialD1Ev>
﻿#include "include/Dojo.h"

SoftwareSerial mySerial(0,1);	//usual RX,TX
 18c:	8d e4       	ldi	r24, 0x4D	; 77
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0c 94 a0 03 	jmp	0x740	; 0x740 <_ZN14SoftwareSerialD1Ev>

00000194 <_Z19multiplexControlleri>:
		}
		_delay_us(100);
		digitalWrite(WTV_CLK, HIGH);
		command = command<<1;
	}
}
 194:	98 b1       	in	r25, 0x08	; 8
 196:	18 b8       	out	0x08, r1	; 8
 198:	98 b1       	in	r25, 0x08	; 8
 19a:	89 2b       	or	r24, r25
 19c:	88 b9       	out	0x08, r24	; 8
 19e:	08 95       	ret

000001a0 <_Z15vibroControllerb>:
 1a0:	88 23       	and	r24, r24
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <_Z15vibroControllerb+0x18>
 1a4:	45 9a       	sbi	0x08, 5	; 8
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	9c e0       	ldi	r25, 0x0C	; 12
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <_Z15vibroControllerb+0xc>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_Z15vibroControllerb+0x16>
 1b6:	00 00       	nop
 1b8:	98 b1       	in	r25, 0x08	; 8
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	89 27       	eor	r24, r25
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	08 95       	ret

000001c2 <_Z13testComparingj>:
 1c2:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <_ZZ13testComparingjE7compare>
 1c6:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <_ZZ13testComparingjE7compare+0x1>
 1ca:	28 17       	cp	r18, r24
 1cc:	39 07       	cpc	r19, r25
 1ce:	d1 f0       	breq	.+52     	; 0x204 <_Z13testComparingj+0x42>
 1d0:	00 97       	sbiw	r24, 0x00	; 0
 1d2:	c1 f0       	breq	.+48     	; 0x204 <_Z13testComparingj+0x42>
 1d4:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <_ZZ13testComparingjE7compare+0x1>
 1d8:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <_ZZ13testComparingjE7compare>
 1dc:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <closest_Beacon+0x1>
 1e0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <closest_Beacon>
 1e4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <closest_Beacon+0x5>
 1e8:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <closest_Beacon+0x4>
 1ec:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <closest_Beacon+0x3>
 1f0:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <closest_Beacon+0x2>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z15vibroControllerb>
 1fa:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <_ZZ13testComparingjE7compare>
 1fe:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <_ZZ13testComparingjE7compare+0x1>
 202:	08 95       	ret
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret

0000020a <_Z11pinSetupWTVv>:
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	0e 94 29 06 	call	0xc52	; 0xc52 <pinMode>
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	89 e0       	ldi	r24, 0x09	; 9
 216:	0e 94 65 06 	call	0xcca	; 0xcca <digitalWrite>
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	8c e0       	ldi	r24, 0x0C	; 12
 21e:	0e 94 29 06 	call	0xc52	; 0xc52 <pinMode>
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	0e 94 65 06 	call	0xcca	; 0xcca <digitalWrite>
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	0e 94 29 06 	call	0xc52	; 0xc52 <pinMode>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	8d e0       	ldi	r24, 0x0D	; 13
 236:	0c 94 65 06 	jmp	0xcca	; 0xcca <digitalWrite>

0000023a <_Z11sendCommandi.part.2>:
	}
	firstBeacon = false;
	return closest_Beacon.UUID_value;
}

void sendCommand(int com)
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
	switch(com)
	{
		case 1:
		for(int i = 0; i < 2; i++)
		{
			BTSerial.write(command_AT[i]);
 23e:	c8 e0       	ldi	r28, 0x08	; 8
 240:	d1 e0       	ldi	r29, 0x01	; 1
 242:	68 81       	ld	r22, Y
 244:	8e e2       	ldi	r24, 0x2E	; 46
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN14SoftwareSerial5writeEh>
 24c:	69 81       	ldd	r22, Y+1	; 0x01
 24e:	8e e2       	ldi	r24, 0x2E	; 46
 250:	91 e0       	ldi	r25, 0x01	; 1
		break;
		default:
			//do nothing
		break;
	}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
	switch(com)
	{
		case 1:
		for(int i = 0; i < 2; i++)
		{
			BTSerial.write(command_AT[i]);
 256:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_ZN14SoftwareSerial5writeEh>

0000025a <_Z11sendCommandi>:
	firstBeacon = false;
	return closest_Beacon.UUID_value;
}

void sendCommand(int com)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
	switch(com)
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	91 05       	cpc	r25, r1
 262:	29 f0       	breq	.+10     	; 0x26e <_Z11sendCommandi+0x14>
 264:	02 97       	sbiw	r24, 0x02	; 2
 266:	81 f4       	brne	.+32     	; 0x288 <_Z11sendCommandi+0x2e>
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d1 e0       	ldi	r29, 0x01	; 1
 26c:	04 c0       	rjmp	.+8      	; 0x276 <_Z11sendCommandi+0x1c>
		break;
		default:
			//do nothing
		break;
	}
}
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_Z11sendCommandi.part.2>
		}
		break;
		case 2:
		for(int i = 0; i < 8; i++)
		{
			BTSerial.write(command_ATDISI[i]);
 276:	69 91       	ld	r22, Y+
 278:	8e e2       	ldi	r24, 0x2E	; 46
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 66 02 	call	0x4cc	; 0x4cc <_ZN14SoftwareSerial5writeEh>
		{
			BTSerial.write(command_AT[i]);
		}
		break;
		case 2:
		for(int i = 0; i < 8; i++)
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	c8 30       	cpi	r28, 0x08	; 8
 284:	d8 07       	cpc	r29, r24
 286:	b9 f7       	brne	.-18     	; 0x276 <_Z11sendCommandi+0x1c>
		break;
		default:
			//do nothing
		break;
	}
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <_Z10readAnswerv>:

int readAnswer()
{
	int incomingByte;
	
	while(!BTSerial.available())
 28e:	8e e2       	ldi	r24, 0x2E	; 46
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN14SoftwareSerial9availableEv>
 296:	89 2b       	or	r24, r25
 298:	d1 f3       	breq	.-12     	; 0x28e <_Z10readAnswerv>
	{/*wait until datas are available to read*/}
	
	incomingByte = BTSerial.read();
 29a:	8e e2       	ldi	r24, 0x2E	; 46
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0c 94 45 02 	jmp	0x48a	; 0x48a <_ZN14SoftwareSerial4readEv>

000002a2 <_Z13firstResponsev>:
char command_ATDISI[8] = {'A','T','+','D','I','S','I','?'};
char endString[8];

void firstResponse()
{
	while(!BTSerial.available())
 2a2:	8e e2       	ldi	r24, 0x2E	; 46
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 cf 02 	call	0x59e	; 0x59e <_ZN14SoftwareSerial9availableEv>
 2aa:	89 2b       	or	r24, r25
 2ac:	99 f4       	brne	.+38     	; 0x2d4 <_Z13firstResponsev+0x32>
 2ae:	0e 94 1d 01 	call	0x23a	; 0x23a <_Z11sendCommandi.part.2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	88 e0       	ldi	r24, 0x08	; 8
 2b6:	9d e3       	ldi	r25, 0x3D	; 61
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <_Z13firstResponsev+0x16>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <_Z13firstResponsev+0x20>
 2c2:	00 00       	nop
 2c4:	ee cf       	rjmp	.-36     	; 0x2a2 <_Z13firstResponsev>
	
	while (1)
	{
		if (readAnswer() == 79)
		{
			if (readAnswer() == 75)
 2c6:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
 2ca:	8b 34       	cpi	r24, 0x4B	; 75
 2cc:	91 05       	cpc	r25, r1
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <_Z13firstResponsev+0x3e>
			{
				break;
			}
			else
			{
				firstResponse();
 2d0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z13firstResponsev>
		_delay_ms(2500);
	}
	
	while (1)
	{
		if (readAnswer() == 79)
 2d4:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
 2d8:	8f 34       	cpi	r24, 0x4F	; 79
 2da:	91 05       	cpc	r25, r1
 2dc:	c9 f7       	brne	.-14     	; 0x2d0 <_Z13firstResponsev+0x2e>
 2de:	f3 cf       	rjmp	.-26     	; 0x2c6 <_Z13firstResponsev+0x24>
 2e0:	08 95       	ret

000002e2 <_Z12readValueDeci>:
	
	return beacon;
}

unsigned int readValueDec(int array_length)
{
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ff 92       	push	r15
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	6c 01       	movw	r12, r24
	unsigned int value = 0;
	
	for(int i = 0; i < array_length; i++)
 2f2:	00 e0       	ldi	r16, 0x00	; 0
 2f4:	10 e0       	ldi	r17, 0x00	; 0
	return beacon;
}

unsigned int readValueDec(int array_length)
{
	unsigned int value = 0;
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
 2fa:	8a e0       	ldi	r24, 0x0A	; 10
 2fc:	f8 2e       	mov	r15, r24
	
	for(int i = 0; i < array_length; i++)
 2fe:	0c 15       	cp	r16, r12
 300:	1d 05       	cpc	r17, r13
 302:	74 f4       	brge	.+28     	; 0x320 <_Z12readValueDeci+0x3e>
	{
		value = (value * 10) + (readAnswer() - '0');
 304:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
 308:	fc 9e       	mul	r15, r28
 30a:	90 01       	movw	r18, r0
 30c:	fd 9e       	mul	r15, r29
 30e:	30 0d       	add	r19, r0
 310:	11 24       	eor	r1, r1
 312:	e9 01       	movw	r28, r18
 314:	e0 97       	sbiw	r28, 0x30	; 48
 316:	c8 0f       	add	r28, r24
 318:	d9 1f       	adc	r29, r25

unsigned int readValueDec(int array_length)
{
	unsigned int value = 0;
	
	for(int i = 0; i < array_length; i++)
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	ef cf       	rjmp	.-34     	; 0x2fe <_Z12readValueDeci+0x1c>
	{
		value = (value * 10) + (readAnswer() - '0');
	}	
	return value;
}
 320:	ce 01       	movw	r24, r28
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	df 90       	pop	r13
 32e:	cf 90       	pop	r12
 330:	08 95       	ret

00000332 <_Z12getUUID_RSSIv>:
		closest_Beacon = buff;
	}
}

struct BEACON_VALUES_DEC getUUID_RSSI()
{
 332:	ef 92       	push	r14
 334:	ff 92       	push	r15
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 d0       	rcall	.+0      	; 0x340 <_Z12getUUID_RSSIv+0xe>
 340:	00 d0       	rcall	.+0      	; 0x342 <_Z12getUUID_RSSIv+0x10>
 342:	00 d0       	rcall	.+0      	; 0x344 <_Z12getUUID_RSSIv+0x12>
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
	BEACON_VALUES_DEC beacon;
	
	while(readAnswer() != ':')
 348:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
 34c:	ca 97       	sbiw	r24, 0x3a	; 58
 34e:	e1 f7       	brne	.-8      	; 0x348 <_Z12getUUID_RSSIv+0x16>
	{/*/wait until ':' is recived/*/}
	beacon.UUID_value = readValueDec(UUID_ARRAY_LENGTH);
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z12readValueDeci>
 358:	08 2f       	mov	r16, r24
 35a:	e9 2e       	mov	r14, r25
	
	while (readAnswer() != ':')
 35c:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
 360:	ca 97       	sbiw	r24, 0x3a	; 58
 362:	e1 f7       	brne	.-8      	; 0x35c <_Z12getUUID_RSSIv+0x2a>
	{/*/wait until ":" is recieved/*/}
	beacon.MAJOR_value = readValueDec(MAJOR_ARRAY_LENGTH);
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z12readValueDeci>
 36c:	18 2f       	mov	r17, r24
 36e:	f9 2e       	mov	r15, r25
	
	while(readAnswer() != '-')
 370:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
 374:	8d 97       	sbiw	r24, 0x2d	; 45
 376:	e1 f7       	brne	.-8      	; 0x370 <_Z12getUUID_RSSIv+0x3e>
	{/*/wait until '-' is recived/*/}
	beacon.RSSI_value = readValueDec(RSSI_ARRAY_LENGTH);
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z12readValueDeci>
	
	return beacon;
 380:	20 2f       	mov	r18, r16
 382:	3e 2d       	mov	r19, r14
 384:	ac 01       	movw	r20, r24
 386:	61 2f       	mov	r22, r17
 388:	7f 2d       	mov	r23, r15
}
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	26 96       	adiw	r28, 0x06	; 6
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	08 95       	ret

000003a8 <_Z13compareBeaconv>:
	
	return incomingByte;
}

void compareBeacon()
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <_Z13compareBeaconv+0x6>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <_Z13compareBeaconv+0x8>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <_Z13compareBeaconv+0xa>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
	BEACON_VALUES_DEC buff = getUUID_RSSI();
 3b6:	0e 94 99 01 	call	0x332	; 0x332 <_Z12getUUID_RSSIv>
 3ba:	29 83       	std	Y+1, r18	; 0x01
 3bc:	3a 83       	std	Y+2, r19	; 0x02
 3be:	4b 83       	std	Y+3, r20	; 0x03
 3c0:	5c 83       	std	Y+4, r21	; 0x04
 3c2:	6d 83       	std	Y+5, r22	; 0x05
 3c4:	7e 83       	std	Y+6, r23	; 0x06
	
	if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && firstBeacon == false)
 3c6:	8d 81       	ldd	r24, Y+5	; 0x05
 3c8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ca:	03 97       	sbiw	r24, 0x03	; 3
 3cc:	e9 f4       	brne	.+58     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	return incomingByte;
}

void compareBeacon()
{
	BEACON_VALUES_DEC buff = getUUID_RSSI();
 3ce:	8b 81       	ldd	r24, Y+3	; 0x03
 3d0:	9c 81       	ldd	r25, Y+4	; 0x04
	
	if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && firstBeacon == false)
 3d2:	8b 35       	cpi	r24, 0x5B	; 91
 3d4:	91 05       	cpc	r25, r1
 3d6:	c0 f4       	brcc	.+48     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3d8:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <firstBeacon>
 3dc:	21 11       	cpse	r18, r1
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <_Z13compareBeaconv+0x40>
	{
		firstBeacon = true;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <firstBeacon>
 3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <_Z13compareBeaconv+0x4e>
		closest_Beacon = buff;
	}
	else if (buff.MAJOR_value == FILTER_MAJOR_VALUE && buff.RSSI_value <= RSSI_STRENGTH && closest_Beacon.RSSI_value > buff.RSSI_value && firstBeacon == true)
 3e8:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <closest_Beacon+0x2>
 3ec:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <closest_Beacon+0x3>
 3f0:	82 17       	cp	r24, r18
 3f2:	93 07       	cpc	r25, r19
 3f4:	48 f4       	brcc	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		closest_Beacon = buff;
 3f6:	86 e0       	ldi	r24, 0x06	; 6
 3f8:	fe 01       	movw	r30, r28
 3fa:	31 96       	adiw	r30, 0x01	; 1
 3fc:	ae e6       	ldi	r26, 0x6E	; 110
 3fe:	b1 e0       	ldi	r27, 0x01	; 1
 400:	01 90       	ld	r0, Z+
 402:	0d 92       	st	X+, r0
 404:	8a 95       	dec	r24
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
	}
}
 408:	26 96       	adiw	r28, 0x06	; 6
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <_Z17scanClosestBeaconv>:
		}
	}
}

unsigned int scanClosestBeacon()
{
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
	int compare_koeff;
	sendCommand(2);
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 2d 01 	call	0x25a	; 0x25a <_Z11sendCommandi>
	
	while(1)
	{
		compare_koeff = readAnswer();
 428:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
		
		if(compare_koeff == 58)
 42c:	8a 33       	cpi	r24, 0x3A	; 58
 42e:	91 05       	cpc	r25, r1
 430:	c1 f4       	brne	.+48     	; 0x462 <_Z17scanClosestBeaconv+0x48>
 432:	c8 e0       	ldi	r28, 0x08	; 8
 434:	d0 e0       	ldi	r29, 0x00	; 0
 436:	11 e0       	ldi	r17, 0x01	; 1
		{
			boolean state_zero = true;
			
			for(int i = 0; i < 8; i++)			//search for !=0 in FactoryID
			{
				if(readAnswer() != 48)
 438:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
 43c:	c0 97       	sbiw	r24, 0x30	; 48
 43e:	09 f0       	breq	.+2      	; 0x442 <_Z17scanClosestBeaconv+0x28>
				{
					state_zero = false;
 440:	10 e0       	ldi	r17, 0x00	; 0
 442:	21 97       	sbiw	r28, 0x01	; 1
		
		if(compare_koeff == 58)
		{
			boolean state_zero = true;
			
			for(int i = 0; i < 8; i++)			//search for !=0 in FactoryID
 444:	c9 f7       	brne	.-14     	; 0x438 <_Z17scanClosestBeaconv+0x1e>
				if(readAnswer() != 48)
				{
					state_zero = false;
				}
			}
			if(state_zero == false)
 446:	11 11       	cpse	r17, r1
 448:	03 c0       	rjmp	.+6      	; 0x450 <_Z17scanClosestBeaconv+0x36>
			{
				state_zero = true;
				compareBeacon();
 44a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z13compareBeaconv>
				continue;
 44e:	ec cf       	rjmp	.-40     	; 0x428 <_Z17scanClosestBeaconv+0xe>
 450:	c4 e0       	ldi	r28, 0x04	; 4
 452:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else
			{
				for(int i = 0; i < 4; i++)
				{
					while(readAnswer() != 58)
 454:	0e 94 47 01 	call	0x28e	; 0x28e <_Z10readAnswerv>
 458:	ca 97       	sbiw	r24, 0x3a	; 58
 45a:	e1 f7       	brne	.-8      	; 0x454 <_Z17scanClosestBeaconv+0x3a>
 45c:	21 97       	sbiw	r28, 0x01	; 1
				compareBeacon();
				continue;
			}
			else
			{
				for(int i = 0; i < 4; i++)
 45e:	d1 f7       	brne	.-12     	; 0x454 <_Z17scanClosestBeaconv+0x3a>
 460:	e3 cf       	rjmp	.-58     	; 0x428 <_Z17scanClosestBeaconv+0xe>
					{/*wait until ':' is recived*/}
				}
				continue;
			}
		}
		else if (compare_koeff == 69)
 462:	85 34       	cpi	r24, 0x45	; 69
 464:	91 05       	cpc	r25, r1
 466:	01 f7       	brne	.-64     	; 0x428 <_Z17scanClosestBeaconv+0xe>
		{
			// 			countBeacon = 1;
			break;
		}
	}
	firstBeacon = false;
 468:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <firstBeacon>
	return closest_Beacon.UUID_value;
}
 46c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <closest_Beacon>
 470:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <closest_Beacon+0x1>
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	08 95       	ret

0000047c <_Z4scanv>:
	}
}

unsigned int scan()
{
	return testComparing(scanClosestBeacon());
 47c:	0e 94 0d 02 	call	0x41a	; 0x41a <_Z17scanClosestBeaconv>
 480:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_Z13testComparingj>

00000484 <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	08 95       	ret

0000048a <_ZN14SoftwareSerial4readEv>:
 48a:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <_ZN14SoftwareSerial13active_objectE>
 48e:	30 91 b8 01 	lds	r19, 0x01B8	; 0x8001b8 <_ZN14SoftwareSerial13active_objectE+0x1>
 492:	28 17       	cp	r18, r24
 494:	39 07       	cpc	r19, r25
 496:	b9 f4       	brne	.+46     	; 0x4c6 <_ZN14SoftwareSerial4readEv+0x3c>
 498:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 49c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 4a0:	98 17       	cp	r25, r24
 4a2:	89 f0       	breq	.+34     	; 0x4c6 <_ZN14SoftwareSerial4readEv+0x3c>
 4a4:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	e9 58       	subi	r30, 0x89	; 137
 4ac:	fe 4f       	sbci	r31, 0xFE	; 254
 4ae:	80 81       	ld	r24, Z
 4b0:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	2f 5f       	subi	r18, 0xFF	; 255
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	2f 73       	andi	r18, 0x3F	; 63
 4bc:	33 27       	eor	r19, r19
 4be:	20 93 75 01 	sts	0x0175, r18	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	08 95       	ret
 4c6:	8f ef       	ldi	r24, 0xFF	; 255
 4c8:	9f ef       	ldi	r25, 0xFF	; 255
 4ca:	08 95       	ret

000004cc <_ZN14SoftwareSerial5writeEh>:
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	dc 01       	movw	r26, r24
 4d4:	5c 96       	adiw	r26, 0x1c	; 28
 4d6:	8d 91       	ld	r24, X+
 4d8:	9c 91       	ld	r25, X
 4da:	5d 97       	sbiw	r26, 0x1d	; 29
 4dc:	00 97       	sbiw	r24, 0x00	; 0
 4de:	39 f4       	brne	.+14     	; 0x4ee <_ZN14SoftwareSerial5writeEh+0x22>
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	13 96       	adiw	r26, 0x03	; 3
 4e6:	3c 93       	st	X, r19
 4e8:	2e 93       	st	-X, r18
 4ea:	12 97       	sbiw	r26, 0x02	; 2
 4ec:	3b c0       	rjmp	.+118    	; 0x564 <_ZN14SoftwareSerial5writeEh+0x98>
 4ee:	51 96       	adiw	r26, 0x11	; 17
 4f0:	ed 91       	ld	r30, X+
 4f2:	fc 91       	ld	r31, X
 4f4:	52 97       	sbiw	r26, 0x12	; 18
 4f6:	50 96       	adiw	r26, 0x10	; 16
 4f8:	2c 91       	ld	r18, X
 4fa:	50 97       	sbiw	r26, 0x10	; 16
 4fc:	32 2f       	mov	r19, r18
 4fe:	30 95       	com	r19
 500:	1f b7       	in	r17, 0x3f	; 63
 502:	5e 96       	adiw	r26, 0x1e	; 30
 504:	4c 91       	ld	r20, X
 506:	5e 97       	sbiw	r26, 0x1e	; 30
 508:	74 2f       	mov	r23, r20
 50a:	72 70       	andi	r23, 0x02	; 2
 50c:	41 fd       	sbrc	r20, 1
 50e:	60 95       	com	r22
 510:	f8 94       	cli
 512:	40 81       	ld	r20, Z
 514:	77 23       	and	r23, r23
 516:	11 f0       	breq	.+4      	; 0x51c <_ZN14SoftwareSerial5writeEh+0x50>
 518:	42 2b       	or	r20, r18
 51a:	01 c0       	rjmp	.+2      	; 0x51e <_ZN14SoftwareSerial5writeEh+0x52>
 51c:	43 23       	and	r20, r19
 51e:	40 83       	st	Z, r20
 520:	ec 01       	movw	r28, r24
 522:	21 97       	sbiw	r28, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <_ZN14SoftwareSerial5writeEh+0x56>
 526:	48 e0       	ldi	r20, 0x08	; 8
 528:	50 81       	ld	r21, Z
 52a:	60 ff       	sbrs	r22, 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <_ZN14SoftwareSerial5writeEh+0x66>
 52e:	52 2b       	or	r21, r18
 530:	01 c0       	rjmp	.+2      	; 0x534 <_ZN14SoftwareSerial5writeEh+0x68>
 532:	53 23       	and	r21, r19
 534:	50 83       	st	Z, r21
 536:	ec 01       	movw	r28, r24
 538:	21 97       	sbiw	r28, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <_ZN14SoftwareSerial5writeEh+0x6c>
 53c:	66 95       	lsr	r22
 53e:	41 50       	subi	r20, 0x01	; 1
 540:	99 f7       	brne	.-26     	; 0x528 <_ZN14SoftwareSerial5writeEh+0x5c>
 542:	80 81       	ld	r24, Z
 544:	77 23       	and	r23, r23
 546:	19 f0       	breq	.+6      	; 0x54e <_ZN14SoftwareSerial5writeEh+0x82>
 548:	83 23       	and	r24, r19
 54a:	80 83       	st	Z, r24
 54c:	02 c0       	rjmp	.+4      	; 0x552 <_ZN14SoftwareSerial5writeEh+0x86>
 54e:	28 2b       	or	r18, r24
 550:	20 83       	st	Z, r18
 552:	1f bf       	out	0x3f, r17	; 63
 554:	5c 96       	adiw	r26, 0x1c	; 28
 556:	8d 91       	ld	r24, X+
 558:	9c 91       	ld	r25, X
 55a:	5d 97       	sbiw	r26, 0x1d	; 29
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <_ZN14SoftwareSerial5writeEh+0x90>
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	08 95       	ret

0000056c <_ZN14SoftwareSerial5flushEv>:
 56c:	08 95       	ret

0000056e <_ZN14SoftwareSerial4peekEv>:
 56e:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <_ZN14SoftwareSerial13active_objectE>
 572:	30 91 b8 01 	lds	r19, 0x01B8	; 0x8001b8 <_ZN14SoftwareSerial13active_objectE+0x1>
 576:	28 17       	cp	r18, r24
 578:	39 07       	cpc	r19, r25
 57a:	71 f4       	brne	.+28     	; 0x598 <_ZN14SoftwareSerial4peekEv+0x2a>
 57c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 580:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 584:	98 17       	cp	r25, r24
 586:	41 f0       	breq	.+16     	; 0x598 <_ZN14SoftwareSerial4peekEv+0x2a>
 588:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	e9 58       	subi	r30, 0x89	; 137
 590:	fe 4f       	sbci	r31, 0xFE	; 254
 592:	80 81       	ld	r24, Z
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	08 95       	ret
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	9f ef       	ldi	r25, 0xFF	; 255
 59c:	08 95       	ret

0000059e <_ZN14SoftwareSerial9availableEv>:
 59e:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <_ZN14SoftwareSerial13active_objectE>
 5a2:	30 91 b8 01 	lds	r19, 0x01B8	; 0x8001b8 <_ZN14SoftwareSerial13active_objectE+0x1>
 5a6:	28 17       	cp	r18, r24
 5a8:	39 07       	cpc	r19, r25
 5aa:	71 f4       	brne	.+28     	; 0x5c8 <_ZN14SoftwareSerial9availableEv+0x2a>
 5ac:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 5b0:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	80 5c       	subi	r24, 0xC0	; 192
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	82 1b       	sub	r24, r18
 5bc:	91 09       	sbc	r25, r1
 5be:	60 e4       	ldi	r22, 0x40	; 64
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	0e 94 69 07 	call	0xed2	; 0xed2 <__divmodhi4>
 5c6:	08 95       	ret
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	08 95       	ret

000005ce <_ZN14SoftwareSerial13stopListeningEv>:
 5ce:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <_ZN14SoftwareSerial13active_objectE>
 5d2:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <_ZN14SoftwareSerial13active_objectE+0x1>
 5d6:	e8 17       	cp	r30, r24
 5d8:	f9 07       	cpc	r31, r25
 5da:	69 f4       	brne	.+26     	; 0x5f6 <_ZN14SoftwareSerial13stopListeningEv+0x28>
 5dc:	a3 89       	ldd	r26, Z+19	; 0x13
 5de:	b4 89       	ldd	r27, Z+20	; 0x14
 5e0:	9c 91       	ld	r25, X
 5e2:	85 89       	ldd	r24, Z+21	; 0x15
 5e4:	80 95       	com	r24
 5e6:	89 23       	and	r24, r25
 5e8:	8c 93       	st	X, r24
 5ea:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <_ZN14SoftwareSerial13active_objectE+0x1>
 5ee:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <_ZN14SoftwareSerial13active_objectE>
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	08 95       	ret
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 95       	ret

000005fa <_ZN14SoftwareSerial6listenEv>:
 5fa:	cf 93       	push	r28
 5fc:	df 93       	push	r29
 5fe:	ec 01       	movw	r28, r24
 600:	8a 8d       	ldd	r24, Y+26	; 0x1a
 602:	9b 8d       	ldd	r25, Y+27	; 0x1b
 604:	89 2b       	or	r24, r25
 606:	f1 f0       	breq	.+60     	; 0x644 <_ZN14SoftwareSerial6listenEv+0x4a>
 608:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_ZN14SoftwareSerial13active_objectE>
 60c:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <_ZN14SoftwareSerial13active_objectE+0x1>
 610:	c8 17       	cp	r28, r24
 612:	d9 07       	cpc	r29, r25
 614:	b9 f0       	breq	.+46     	; 0x644 <_ZN14SoftwareSerial6listenEv+0x4a>
 616:	00 97       	sbiw	r24, 0x00	; 0
 618:	11 f0       	breq	.+4      	; 0x61e <_ZN14SoftwareSerial6listenEv+0x24>
 61a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <_ZN14SoftwareSerial13stopListeningEv>
 61e:	8e 8d       	ldd	r24, Y+30	; 0x1e
 620:	8e 7f       	andi	r24, 0xFE	; 254
 622:	8e 8f       	std	Y+30, r24	; 0x1e
 624:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 628:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 62c:	d0 93 b8 01 	sts	0x01B8, r29	; 0x8001b8 <_ZN14SoftwareSerial13active_objectE+0x1>
 630:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <_ZN14SoftwareSerial13active_objectE>
 634:	eb 89       	ldd	r30, Y+19	; 0x13
 636:	fc 89       	ldd	r31, Y+20	; 0x14
 638:	90 81       	ld	r25, Z
 63a:	8d 89       	ldd	r24, Y+21	; 0x15
 63c:	89 2b       	or	r24, r25
 63e:	80 83       	st	Z, r24
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	01 c0       	rjmp	.+2      	; 0x646 <_ZN14SoftwareSerial6listenEv+0x4c>
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <__vector_3>:
 64c:	1f 92       	push	r1
 64e:	0f 92       	push	r0
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	0f 92       	push	r0
 654:	11 24       	eor	r1, r1
 656:	2f 93       	push	r18
 658:	3f 93       	push	r19
 65a:	4f 93       	push	r20
 65c:	5f 93       	push	r21
 65e:	6f 93       	push	r22
 660:	7f 93       	push	r23
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	af 93       	push	r26
 668:	bf 93       	push	r27
 66a:	ef 93       	push	r30
 66c:	ff 93       	push	r31
 66e:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <_ZN14SoftwareSerial13active_objectE>
 672:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <_ZN14SoftwareSerial13active_objectE+0x1>
 676:	30 97       	sbiw	r30, 0x00	; 0
 678:	09 f4       	brne	.+2      	; 0x67c <__vector_3+0x30>
 67a:	51 c0       	rjmp	.+162    	; 0x71e <__vector_3+0xd2>
 67c:	96 8d       	ldd	r25, Z+30	; 0x1e
 67e:	a6 85       	ldd	r26, Z+14	; 0x0e
 680:	b7 85       	ldd	r27, Z+15	; 0x0f
 682:	85 85       	ldd	r24, Z+13	; 0x0d
 684:	91 ff       	sbrs	r25, 1
 686:	04 c0       	rjmp	.+8      	; 0x690 <__vector_3+0x44>
 688:	9c 91       	ld	r25, X
 68a:	89 23       	and	r24, r25
 68c:	29 f4       	brne	.+10     	; 0x698 <__vector_3+0x4c>
 68e:	47 c0       	rjmp	.+142    	; 0x71e <__vector_3+0xd2>
 690:	9c 91       	ld	r25, X
 692:	89 23       	and	r24, r25
 694:	09 f0       	breq	.+2      	; 0x698 <__vector_3+0x4c>
 696:	43 c0       	rjmp	.+134    	; 0x71e <__vector_3+0xd2>
 698:	a3 89       	ldd	r26, Z+19	; 0x13
 69a:	b4 89       	ldd	r27, Z+20	; 0x14
 69c:	9c 91       	ld	r25, X
 69e:	85 89       	ldd	r24, Z+21	; 0x15
 6a0:	80 95       	com	r24
 6a2:	89 23       	and	r24, r25
 6a4:	8c 93       	st	X, r24
 6a6:	86 89       	ldd	r24, Z+22	; 0x16
 6a8:	97 89       	ldd	r25, Z+23	; 0x17
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <__vector_3+0x5e>
 6ae:	60 8d       	ldd	r22, Z+24	; 0x18
 6b0:	71 8d       	ldd	r23, Z+25	; 0x19
 6b2:	a6 85       	ldd	r26, Z+14	; 0x0e
 6b4:	b7 85       	ldd	r27, Z+15	; 0x0f
 6b6:	55 85       	ldd	r21, Z+13	; 0x0d
 6b8:	38 e0       	ldi	r19, 0x08	; 8
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	cb 01       	movw	r24, r22
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <__vector_3+0x72>
 6c2:	82 2f       	mov	r24, r18
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	95 95       	asr	r25
 6c8:	87 95       	ror	r24
 6ca:	28 2f       	mov	r18, r24
 6cc:	4c 91       	ld	r20, X
 6ce:	45 23       	and	r20, r21
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <__vector_3+0x88>
 6d2:	20 68       	ori	r18, 0x80	; 128
 6d4:	31 50       	subi	r19, 0x01	; 1
 6d6:	91 f7       	brne	.-28     	; 0x6bc <__vector_3+0x70>
 6d8:	86 8d       	ldd	r24, Z+30	; 0x1e
 6da:	81 fd       	sbrc	r24, 1
 6dc:	20 95       	com	r18
 6de:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	8f 73       	andi	r24, 0x3F	; 63
 6e8:	99 27       	eor	r25, r25
 6ea:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <_ZN14SoftwareSerial20_receive_buffer_headE>
 6ee:	38 17       	cp	r19, r24
 6f0:	49 f0       	breq	.+18     	; 0x704 <__vector_3+0xb8>
 6f2:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	a9 58       	subi	r26, 0x89	; 137
 6fa:	be 4f       	sbci	r27, 0xFE	; 254
 6fc:	2c 93       	st	X, r18
 6fe:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 702:	03 c0       	rjmp	.+6      	; 0x70a <__vector_3+0xbe>
 704:	86 8d       	ldd	r24, Z+30	; 0x1e
 706:	81 60       	ori	r24, 0x01	; 1
 708:	86 8f       	std	Z+30, r24	; 0x1e
 70a:	82 8d       	ldd	r24, Z+26	; 0x1a
 70c:	93 8d       	ldd	r25, Z+27	; 0x1b
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <__vector_3+0xc2>
 712:	a3 89       	ldd	r26, Z+19	; 0x13
 714:	b4 89       	ldd	r27, Z+20	; 0x14
 716:	9c 91       	ld	r25, X
 718:	85 89       	ldd	r24, Z+21	; 0x15
 71a:	89 2b       	or	r24, r25
 71c:	8c 93       	st	X, r24
 71e:	ff 91       	pop	r31
 720:	ef 91       	pop	r30
 722:	bf 91       	pop	r27
 724:	af 91       	pop	r26
 726:	9f 91       	pop	r25
 728:	8f 91       	pop	r24
 72a:	7f 91       	pop	r23
 72c:	6f 91       	pop	r22
 72e:	5f 91       	pop	r21
 730:	4f 91       	pop	r20
 732:	3f 91       	pop	r19
 734:	2f 91       	pop	r18
 736:	0f 90       	pop	r0
 738:	0f be       	out	0x3f, r0	; 63
 73a:	0f 90       	pop	r0
 73c:	1f 90       	pop	r1
 73e:	18 95       	reti

00000740 <_ZN14SoftwareSerialD1Ev>:
 740:	2e e0       	ldi	r18, 0x0E	; 14
 742:	31 e0       	ldi	r19, 0x01	; 1
 744:	fc 01       	movw	r30, r24
 746:	31 83       	std	Z+1, r19	; 0x01
 748:	20 83       	st	Z, r18
 74a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_ZN14SoftwareSerial13stopListeningEv>

0000074e <_ZN14SoftwareSerial5setTXEh>:
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	ec 01       	movw	r28, r24
 756:	16 2f       	mov	r17, r22
 758:	6e 8d       	ldd	r22, Y+30	; 0x1e
 75a:	66 95       	lsr	r22
 75c:	61 70       	andi	r22, 0x01	; 1
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	68 27       	eor	r22, r24
 762:	81 2f       	mov	r24, r17
 764:	0e 94 65 06 	call	0xcca	; 0xcca <digitalWrite>
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	81 2f       	mov	r24, r17
 76c:	0e 94 29 06 	call	0xc52	; 0xc52 <pinMode>
 770:	81 2f       	mov	r24, r17
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	fc 01       	movw	r30, r24
 776:	e4 58       	subi	r30, 0x84	; 132
 778:	ff 4f       	sbci	r31, 0xFF	; 255
 77a:	e4 91       	lpm	r30, Z
 77c:	e8 8b       	std	Y+16, r30	; 0x10
 77e:	fc 01       	movw	r30, r24
 780:	e0 57       	subi	r30, 0x70	; 112
 782:	ff 4f       	sbci	r31, 0xFF	; 255
 784:	e4 91       	lpm	r30, Z
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	e2 55       	subi	r30, 0x52	; 82
 78e:	ff 4f       	sbci	r31, 0xFF	; 255
 790:	85 91       	lpm	r24, Z+
 792:	94 91       	lpm	r25, Z
 794:	9a 8b       	std	Y+18, r25	; 0x12
 796:	89 8b       	std	Y+17, r24	; 0x11
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	1f 91       	pop	r17
 79e:	08 95       	ret

000007a0 <_ZN14SoftwareSerial5setRXEh>:
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	ec 01       	movw	r28, r24
 7a8:	16 2f       	mov	r17, r22
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	81 2f       	mov	r24, r17
 7ae:	0e 94 29 06 	call	0xc52	; 0xc52 <pinMode>
 7b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
 7b4:	81 fd       	sbrc	r24, 1
 7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <_ZN14SoftwareSerial5setRXEh+0x20>
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	81 2f       	mov	r24, r17
 7bc:	0e 94 65 06 	call	0xcca	; 0xcca <digitalWrite>
 7c0:	1c 87       	std	Y+12, r17	; 0x0c
 7c2:	81 2f       	mov	r24, r17
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	fc 01       	movw	r30, r24
 7c8:	e4 58       	subi	r30, 0x84	; 132
 7ca:	ff 4f       	sbci	r31, 0xFF	; 255
 7cc:	e4 91       	lpm	r30, Z
 7ce:	ed 87       	std	Y+13, r30	; 0x0d
 7d0:	fc 01       	movw	r30, r24
 7d2:	e0 57       	subi	r30, 0x70	; 112
 7d4:	ff 4f       	sbci	r31, 0xFF	; 255
 7d6:	e4 91       	lpm	r30, Z
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	ec 55       	subi	r30, 0x5C	; 92
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	85 91       	lpm	r24, Z+
 7e4:	94 91       	lpm	r25, Z
 7e6:	9f 87       	std	Y+15, r25	; 0x0f
 7e8:	8e 87       	std	Y+14, r24	; 0x0e
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	08 95       	ret

000007f2 <_ZN14SoftwareSerialC1Ehhb>:
 7f2:	1f 93       	push	r17
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	ec 01       	movw	r28, r24
 7fa:	16 2f       	mov	r17, r22
 7fc:	1b 82       	std	Y+3, r1	; 0x03
 7fe:	1a 82       	std	Y+2, r1	; 0x02
 800:	88 ee       	ldi	r24, 0xE8	; 232
 802:	93 e0       	ldi	r25, 0x03	; 3
 804:	a0 e0       	ldi	r26, 0x00	; 0
 806:	b0 e0       	ldi	r27, 0x00	; 0
 808:	8c 83       	std	Y+4, r24	; 0x04
 80a:	9d 83       	std	Y+5, r25	; 0x05
 80c:	ae 83       	std	Y+6, r26	; 0x06
 80e:	bf 83       	std	Y+7, r27	; 0x07
 810:	8e e0       	ldi	r24, 0x0E	; 14
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	99 83       	std	Y+1, r25	; 0x01
 816:	88 83       	st	Y, r24
 818:	1f 8a       	std	Y+23, r1	; 0x17
 81a:	1e 8a       	std	Y+22, r1	; 0x16
 81c:	19 8e       	std	Y+25, r1	; 0x19
 81e:	18 8e       	std	Y+24, r1	; 0x18
 820:	1b 8e       	std	Y+27, r1	; 0x1b
 822:	1a 8e       	std	Y+26, r1	; 0x1a
 824:	1d 8e       	std	Y+29, r1	; 0x1d
 826:	1c 8e       	std	Y+28, r1	; 0x1c
 828:	8e 8d       	ldd	r24, Y+30	; 0x1e
 82a:	8e 7f       	andi	r24, 0xFE	; 254
 82c:	20 fb       	bst	r18, 0
 82e:	81 f9       	bld	r24, 1
 830:	8e 8f       	std	Y+30, r24	; 0x1e
 832:	64 2f       	mov	r22, r20
 834:	ce 01       	movw	r24, r28
 836:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN14SoftwareSerial5setTXEh>
 83a:	61 2f       	mov	r22, r17
 83c:	ce 01       	movw	r24, r28
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_ZN14SoftwareSerial5setRXEh>

00000848 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	ec 01       	movw	r28, r24
 84e:	9a 01       	movw	r18, r20
 850:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
 852:	1b 8e       	std	Y+27, r1	; 0x1b
 854:	1a 8e       	std	Y+26, r1	; 0x1a
 856:	19 8e       	std	Y+25, r1	; 0x19
 858:	18 8e       	std	Y+24, r1	; 0x18
 85a:	1f 8a       	std	Y+23, r1	; 0x17
 85c:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
 85e:	60 e8       	ldi	r22, 0x80	; 128
 860:	74 e8       	ldi	r23, 0x84	; 132
 862:	8e e1       	ldi	r24, 0x1E	; 30
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__divmodsi4>
 86a:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 86c:	24 30       	cpi	r18, 0x04	; 4
 86e:	31 05       	cpc	r19, r1
 870:	18 f0       	brcs	.+6      	; 0x878 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
 872:	c9 01       	movw	r24, r18
 874:	03 97       	sbiw	r24, 0x03	; 3
 876:	02 c0       	rjmp	.+4      	; 0x87c <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
 87c:	9d 8f       	std	Y+29, r25	; 0x1d
 87e:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
 880:	6c 85       	ldd	r22, Y+12	; 0x0c
 882:	66 31       	cpi	r22, 0x16	; 22
 884:	08 f0       	brcs	.+2      	; 0x888 <_ZN14SoftwareSerial5beginEl+0x40>
 886:	69 c0       	rjmp	.+210    	; 0x95a <__stack+0x5b>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 888:	c9 01       	movw	r24, r18
 88a:	96 95       	lsr	r25
 88c:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 88e:	84 31       	cpi	r24, 0x14	; 20
 890:	91 05       	cpc	r25, r1
 892:	10 f0       	brcs	.+4      	; 0x898 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
 894:	43 97       	sbiw	r24, 0x13	; 19
 896:	02 c0       	rjmp	.+4      	; 0x89c <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 89c:	9f 8b       	std	Y+23, r25	; 0x17
 89e:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 8a0:	36 97       	sbiw	r30, 0x06	; 6
 8a2:	18 f0       	brcs	.+6      	; 0x8aa <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
 8a4:	c9 01       	movw	r24, r18
 8a6:	05 97       	sbiw	r24, 0x05	; 5
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
 8ae:	99 8f       	std	Y+25, r25	; 0x19
 8b0:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 8b2:	c9 01       	movw	r24, r18
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	28 0f       	add	r18, r24
 8ba:	39 1f       	adc	r19, r25
 8bc:	36 95       	lsr	r19
 8be:	27 95       	ror	r18
 8c0:	36 95       	lsr	r19
 8c2:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 8c4:	2d 30       	cpi	r18, 0x0D	; 13
 8c6:	31 05       	cpc	r19, r1
 8c8:	18 f0       	brcs	.+6      	; 0x8d0 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
 8ca:	2c 50       	subi	r18, 0x0C	; 12
 8cc:	31 09       	sbc	r19, r1
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
 8d0:	21 e0       	ldi	r18, 0x01	; 1
 8d2:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 8d4:	3b 8f       	std	Y+27, r19	; 0x1b
 8d6:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
 8d8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 8dc:	68 30       	cpi	r22, 0x08	; 8
 8de:	50 f0       	brcs	.+20     	; 0x8f4 <_ZN14SoftwareSerial5beginEl+0xac>
 8e0:	21 e0       	ldi	r18, 0x01	; 1
 8e2:	6e 30       	cpi	r22, 0x0E	; 14
 8e4:	08 f4       	brcc	.+2      	; 0x8e8 <_ZN14SoftwareSerial5beginEl+0xa0>
 8e6:	20 e0       	ldi	r18, 0x00	; 0
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	01 c0       	rjmp	.+2      	; 0x8ee <_ZN14SoftwareSerial5beginEl+0xa6>
 8ec:	88 0f       	add	r24, r24
 8ee:	2a 95       	dec	r18
 8f0:	ea f7       	brpl	.-6      	; 0x8ec <_ZN14SoftwareSerial5beginEl+0xa4>
 8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <_ZN14SoftwareSerial5beginEl+0xae>
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	89 2b       	or	r24, r25
 8f8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
 8fc:	9c 85       	ldd	r25, Y+12	; 0x0c
 8fe:	98 30       	cpi	r25, 0x08	; 8
 900:	38 f0       	brcs	.+14     	; 0x910 <__stack+0x11>
 902:	9e 30       	cpi	r25, 0x0E	; 14
 904:	40 f0       	brcs	.+16     	; 0x916 <__stack+0x17>
 906:	96 31       	cpi	r25, 0x16	; 22
 908:	48 f0       	brcs	.+18     	; 0x91c <__stack+0x1d>
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	08 c0       	rjmp	.+16     	; 0x920 <__stack+0x21>
 910:	2d e6       	ldi	r18, 0x6D	; 109
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	05 c0       	rjmp	.+10     	; 0x920 <__stack+0x21>
 916:	2b e6       	ldi	r18, 0x6B	; 107
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0x21>
 91c:	2c e6       	ldi	r18, 0x6C	; 108
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	3c 8b       	std	Y+20, r19	; 0x14
 922:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
 924:	98 30       	cpi	r25, 0x08	; 8
 926:	30 f4       	brcc	.+12     	; 0x934 <__stack+0x35>
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	01 c0       	rjmp	.+2      	; 0x92e <__stack+0x2f>
 92c:	88 0f       	add	r24, r24
 92e:	9a 95       	dec	r25
 930:	ea f7       	brpl	.-6      	; 0x92c <__stack+0x2d>
 932:	0e c0       	rjmp	.+28     	; 0x950 <__stack+0x51>
 934:	29 2f       	mov	r18, r25
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	9e 30       	cpi	r25, 0x0E	; 14
 93a:	18 f4       	brcc	.+6      	; 0x942 <__stack+0x43>
 93c:	28 50       	subi	r18, 0x08	; 8
 93e:	31 09       	sbc	r19, r1
 940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0x47>
 942:	2e 50       	subi	r18, 0x0E	; 14
 944:	31 09       	sbc	r19, r1
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	01 c0       	rjmp	.+2      	; 0x94c <__stack+0x4d>
 94a:	88 0f       	add	r24, r24
 94c:	2a 95       	dec	r18
 94e:	ea f7       	brpl	.-6      	; 0x94a <__stack+0x4b>
 950:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 952:	8c 8d       	ldd	r24, Y+28	; 0x1c
 954:	9d 8d       	ldd	r25, Y+29	; 0x1d
 956:	01 97       	sbiw	r24, 0x01	; 1
 958:	f1 f7       	brne	.-4      	; 0x956 <__stack+0x57>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 95a:	ce 01       	movw	r24, r28
}
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 960:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <_ZN14SoftwareSerial6listenEv>

00000964 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 964:	1f 92       	push	r1
 966:	0f 92       	push	r0
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	0f 92       	push	r0
 96c:	11 24       	eor	r1, r1
 96e:	2f 93       	push	r18
 970:	8f 93       	push	r24
 972:	9f 93       	push	r25
 974:	ef 93       	push	r30
 976:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 978:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <Serial+0x10>
 97c:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <Serial+0x11>
 980:	80 81       	ld	r24, Z
 982:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <Serial+0x16>
 986:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <Serial+0x17>
 98a:	82 fd       	sbrc	r24, 2
 98c:	12 c0       	rjmp	.+36     	; 0x9b2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 98e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 990:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <Serial+0x19>
 994:	8f 5f       	subi	r24, 0xFF	; 255
 996:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 998:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <Serial+0x1a>
 99c:	82 17       	cp	r24, r18
 99e:	51 f0       	breq	.+20     	; 0x9b4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 9a0:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <Serial+0x19>
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	e7 54       	subi	r30, 0x47	; 71
 9a8:	fe 4f       	sbci	r31, 0xFE	; 254
 9aa:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 9ac:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <Serial+0x19>
 9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 9b2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 9b4:	ff 91       	pop	r31
 9b6:	ef 91       	pop	r30
 9b8:	9f 91       	pop	r25
 9ba:	8f 91       	pop	r24
 9bc:	2f 91       	pop	r18
 9be:	0f 90       	pop	r0
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	0f 90       	pop	r0
 9c4:	1f 90       	pop	r1
 9c6:	18 95       	reti

000009c8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
 9d2:	2f 93       	push	r18
 9d4:	3f 93       	push	r19
 9d6:	4f 93       	push	r20
 9d8:	5f 93       	push	r21
 9da:	6f 93       	push	r22
 9dc:	7f 93       	push	r23
 9de:	8f 93       	push	r24
 9e0:	9f 93       	push	r25
 9e2:	af 93       	push	r26
 9e4:	bf 93       	push	r27
 9e6:	ef 93       	push	r30
 9e8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 9ea:	89 eb       	ldi	r24, 0xB9	; 185
 9ec:	91 e0       	ldi	r25, 0x01	; 1
 9ee:	0e 94 df 06 	call	0xdbe	; 0xdbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 9f2:	ff 91       	pop	r31
 9f4:	ef 91       	pop	r30
 9f6:	bf 91       	pop	r27
 9f8:	af 91       	pop	r26
 9fa:	9f 91       	pop	r25
 9fc:	8f 91       	pop	r24
 9fe:	7f 91       	pop	r23
 a00:	6f 91       	pop	r22
 a02:	5f 91       	pop	r21
 a04:	4f 91       	pop	r20
 a06:	3f 91       	pop	r19
 a08:	2f 91       	pop	r18
 a0a:	0f 90       	pop	r0
 a0c:	0f be       	out	0x3f, r0	; 63
 a0e:	0f 90       	pop	r0
 a10:	1f 90       	pop	r1
 a12:	18 95       	reti

00000a14 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 a14:	89 eb       	ldi	r24, 0xB9	; 185
 a16:	91 e0       	ldi	r25, 0x01	; 1
 a18:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN14HardwareSerial9availableEv>
 a1c:	21 e0       	ldi	r18, 0x01	; 1
 a1e:	89 2b       	or	r24, r25
 a20:	09 f4       	brne	.+2      	; 0xa24 <_Z17Serial0_availablev+0x10>
 a22:	20 e0       	ldi	r18, 0x00	; 0
}
 a24:	82 2f       	mov	r24, r18
 a26:	08 95       	ret

00000a28 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 a28:	e9 eb       	ldi	r30, 0xB9	; 185
 a2a:	f1 e0       	ldi	r31, 0x01	; 1
 a2c:	13 82       	std	Z+3, r1	; 0x03
 a2e:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 a30:	88 ee       	ldi	r24, 0xE8	; 232
 a32:	93 e0       	ldi	r25, 0x03	; 3
 a34:	a0 e0       	ldi	r26, 0x00	; 0
 a36:	b0 e0       	ldi	r27, 0x00	; 0
 a38:	84 83       	std	Z+4, r24	; 0x04
 a3a:	95 83       	std	Z+5, r25	; 0x05
 a3c:	a6 83       	std	Z+6, r26	; 0x06
 a3e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 a40:	80 e2       	ldi	r24, 0x20	; 32
 a42:	91 e0       	ldi	r25, 0x01	; 1
 a44:	91 83       	std	Z+1, r25	; 0x01
 a46:	80 83       	st	Z, r24
 a48:	85 ec       	ldi	r24, 0xC5	; 197
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	95 87       	std	Z+13, r25	; 0x0d
 a4e:	84 87       	std	Z+12, r24	; 0x0c
 a50:	84 ec       	ldi	r24, 0xC4	; 196
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	97 87       	std	Z+15, r25	; 0x0f
 a56:	86 87       	std	Z+14, r24	; 0x0e
 a58:	80 ec       	ldi	r24, 0xC0	; 192
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	91 8b       	std	Z+17, r25	; 0x11
 a5e:	80 8b       	std	Z+16, r24	; 0x10
 a60:	81 ec       	ldi	r24, 0xC1	; 193
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	93 8b       	std	Z+19, r25	; 0x13
 a66:	82 8b       	std	Z+18, r24	; 0x12
 a68:	82 ec       	ldi	r24, 0xC2	; 194
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	95 8b       	std	Z+21, r25	; 0x15
 a6e:	84 8b       	std	Z+20, r24	; 0x14
 a70:	86 ec       	ldi	r24, 0xC6	; 198
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	97 8b       	std	Z+23, r25	; 0x17
 a76:	86 8b       	std	Z+22, r24	; 0x16
 a78:	11 8e       	std	Z+25, r1	; 0x19
 a7a:	12 8e       	std	Z+26, r1	; 0x1a
 a7c:	13 8e       	std	Z+27, r1	; 0x1b
 a7e:	14 8e       	std	Z+28, r1	; 0x1c
 a80:	08 95       	ret

00000a82 <initVariant>:
 a82:	08 95       	ret

00000a84 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 a84:	0e 94 c5 05 	call	0xb8a	; 0xb8a <init>

	initVariant();
 a88:	0e 94 41 05 	call	0xa82	; 0xa82 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 a8c:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 a90:	c1 ed       	ldi	r28, 0xD1	; 209
 a92:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
 a94:	0e 94 b2 00 	call	0x164	; 0x164 <loop>
		if (serialEventRun) serialEventRun();
 a98:	20 97       	sbiw	r28, 0x00	; 0
 a9a:	e1 f3       	breq	.-8      	; 0xa94 <main+0x10>
 a9c:	0e 94 d1 06 	call	0xda2	; 0xda2 <_Z14serialEventRunv>
 aa0:	f9 cf       	rjmp	.-14     	; 0xa94 <main+0x10>

00000aa2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 aa2:	cf 92       	push	r12
 aa4:	df 92       	push	r13
 aa6:	ef 92       	push	r14
 aa8:	ff 92       	push	r15
 aaa:	0f 93       	push	r16
 aac:	1f 93       	push	r17
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	6c 01       	movw	r12, r24
 ab4:	7a 01       	movw	r14, r20
 ab6:	8b 01       	movw	r16, r22
  size_t n = 0;
 ab8:	c0 e0       	ldi	r28, 0x00	; 0
 aba:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 abc:	ce 15       	cp	r28, r14
 abe:	df 05       	cpc	r29, r15
 ac0:	81 f0       	breq	.+32     	; 0xae2 <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 ac2:	d8 01       	movw	r26, r16
 ac4:	6d 91       	ld	r22, X+
 ac6:	8d 01       	movw	r16, r26
 ac8:	d6 01       	movw	r26, r12
 aca:	ed 91       	ld	r30, X+
 acc:	fc 91       	ld	r31, X
 ace:	01 90       	ld	r0, Z+
 ad0:	f0 81       	ld	r31, Z
 ad2:	e0 2d       	mov	r30, r0
 ad4:	c6 01       	movw	r24, r12
 ad6:	09 95       	icall
 ad8:	89 2b       	or	r24, r25
 ada:	11 f0       	breq	.+4      	; 0xae0 <_ZN5Print5writeEPKhj+0x3e>
 adc:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 ade:	ee cf       	rjmp	.-36     	; 0xabc <_ZN5Print5writeEPKhj+0x1a>
 ae0:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 ae2:	c7 01       	movw	r24, r14
 ae4:	df 91       	pop	r29
 ae6:	cf 91       	pop	r28
 ae8:	1f 91       	pop	r17
 aea:	0f 91       	pop	r16
 aec:	ff 90       	pop	r15
 aee:	ef 90       	pop	r14
 af0:	df 90       	pop	r13
 af2:	cf 90       	pop	r12
 af4:	08 95       	ret

00000af6 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 af6:	1f 92       	push	r1
 af8:	0f 92       	push	r0
 afa:	0f b6       	in	r0, 0x3f	; 63
 afc:	0f 92       	push	r0
 afe:	11 24       	eor	r1, r1
 b00:	2f 93       	push	r18
 b02:	3f 93       	push	r19
 b04:	8f 93       	push	r24
 b06:	9f 93       	push	r25
 b08:	af 93       	push	r26
 b0a:	bf 93       	push	r27
 b0c:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <timer0_millis>
 b10:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <timer0_millis+0x1>
 b14:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <timer0_millis+0x2>
 b18:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <timer0_millis+0x3>
 b1c:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <timer0_fract>
 b20:	23 e0       	ldi	r18, 0x03	; 3
 b22:	23 0f       	add	r18, r19
 b24:	2d 37       	cpi	r18, 0x7D	; 125
 b26:	20 f4       	brcc	.+8      	; 0xb30 <__vector_16+0x3a>
 b28:	01 96       	adiw	r24, 0x01	; 1
 b2a:	a1 1d       	adc	r26, r1
 b2c:	b1 1d       	adc	r27, r1
 b2e:	05 c0       	rjmp	.+10     	; 0xb3a <__vector_16+0x44>
 b30:	26 e8       	ldi	r18, 0x86	; 134
 b32:	23 0f       	add	r18, r19
 b34:	02 96       	adiw	r24, 0x02	; 2
 b36:	a1 1d       	adc	r26, r1
 b38:	b1 1d       	adc	r27, r1
 b3a:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <timer0_fract>
 b3e:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <timer0_millis>
 b42:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <timer0_millis+0x1>
 b46:	a0 93 59 02 	sts	0x0259, r26	; 0x800259 <timer0_millis+0x2>
 b4a:	b0 93 5a 02 	sts	0x025A, r27	; 0x80025a <timer0_millis+0x3>
 b4e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <timer0_overflow_count>
 b52:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <timer0_overflow_count+0x1>
 b56:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <timer0_overflow_count+0x2>
 b5a:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <timer0_overflow_count+0x3>
 b5e:	01 96       	adiw	r24, 0x01	; 1
 b60:	a1 1d       	adc	r26, r1
 b62:	b1 1d       	adc	r27, r1
 b64:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <timer0_overflow_count>
 b68:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <timer0_overflow_count+0x1>
 b6c:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <timer0_overflow_count+0x2>
 b70:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <timer0_overflow_count+0x3>
 b74:	bf 91       	pop	r27
 b76:	af 91       	pop	r26
 b78:	9f 91       	pop	r25
 b7a:	8f 91       	pop	r24
 b7c:	3f 91       	pop	r19
 b7e:	2f 91       	pop	r18
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	0f 90       	pop	r0
 b86:	1f 90       	pop	r1
 b88:	18 95       	reti

00000b8a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 b8a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 b8c:	84 b5       	in	r24, 0x24	; 36
 b8e:	82 60       	ori	r24, 0x02	; 2
 b90:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 b92:	84 b5       	in	r24, 0x24	; 36
 b94:	81 60       	ori	r24, 0x01	; 1
 b96:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 b98:	85 b5       	in	r24, 0x25	; 37
 b9a:	82 60       	ori	r24, 0x02	; 2
 b9c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 b9e:	85 b5       	in	r24, 0x25	; 37
 ba0:	81 60       	ori	r24, 0x01	; 1
 ba2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 ba4:	ee e6       	ldi	r30, 0x6E	; 110
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	81 60       	ori	r24, 0x01	; 1
 bac:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 bae:	e1 e8       	ldi	r30, 0x81	; 129
 bb0:	f0 e0       	ldi	r31, 0x00	; 0
 bb2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 bb4:	80 81       	ld	r24, Z
 bb6:	82 60       	ori	r24, 0x02	; 2
 bb8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 bba:	80 81       	ld	r24, Z
 bbc:	81 60       	ori	r24, 0x01	; 1
 bbe:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 bc0:	e0 e8       	ldi	r30, 0x80	; 128
 bc2:	f0 e0       	ldi	r31, 0x00	; 0
 bc4:	80 81       	ld	r24, Z
 bc6:	81 60       	ori	r24, 0x01	; 1
 bc8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 bca:	e1 eb       	ldi	r30, 0xB1	; 177
 bcc:	f0 e0       	ldi	r31, 0x00	; 0
 bce:	80 81       	ld	r24, Z
 bd0:	84 60       	ori	r24, 0x04	; 4
 bd2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 bd4:	e0 eb       	ldi	r30, 0xB0	; 176
 bd6:	f0 e0       	ldi	r31, 0x00	; 0
 bd8:	80 81       	ld	r24, Z
 bda:	81 60       	ori	r24, 0x01	; 1
 bdc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 bde:	ea e7       	ldi	r30, 0x7A	; 122
 be0:	f0 e0       	ldi	r31, 0x00	; 0
 be2:	80 81       	ld	r24, Z
 be4:	84 60       	ori	r24, 0x04	; 4
 be6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 be8:	80 81       	ld	r24, Z
 bea:	82 60       	ori	r24, 0x02	; 2
 bec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 bee:	80 81       	ld	r24, Z
 bf0:	81 60       	ori	r24, 0x01	; 1
 bf2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 bf4:	80 81       	ld	r24, Z
 bf6:	80 68       	ori	r24, 0x80	; 128
 bf8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 bfa:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 bfe:	08 95       	ret

00000c00 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 c00:	83 30       	cpi	r24, 0x03	; 3
 c02:	81 f0       	breq	.+32     	; 0xc24 <turnOffPWM+0x24>
 c04:	28 f4       	brcc	.+10     	; 0xc10 <turnOffPWM+0x10>
 c06:	81 30       	cpi	r24, 0x01	; 1
 c08:	99 f0       	breq	.+38     	; 0xc30 <turnOffPWM+0x30>
 c0a:	82 30       	cpi	r24, 0x02	; 2
 c0c:	a1 f0       	breq	.+40     	; 0xc36 <turnOffPWM+0x36>
 c0e:	08 95       	ret
 c10:	87 30       	cpi	r24, 0x07	; 7
 c12:	a9 f0       	breq	.+42     	; 0xc3e <turnOffPWM+0x3e>
 c14:	88 30       	cpi	r24, 0x08	; 8
 c16:	b9 f0       	breq	.+46     	; 0xc46 <turnOffPWM+0x46>
 c18:	84 30       	cpi	r24, 0x04	; 4
 c1a:	d1 f4       	brne	.+52     	; 0xc50 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 c1c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 c20:	8f 7d       	andi	r24, 0xDF	; 223
 c22:	03 c0       	rjmp	.+6      	; 0xc2a <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 c24:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 c28:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 c2a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 c2e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 c30:	84 b5       	in	r24, 0x24	; 36
 c32:	8f 77       	andi	r24, 0x7F	; 127
 c34:	02 c0       	rjmp	.+4      	; 0xc3a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 c36:	84 b5       	in	r24, 0x24	; 36
 c38:	8f 7d       	andi	r24, 0xDF	; 223
 c3a:	84 bd       	out	0x24, r24	; 36
 c3c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 c3e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 c42:	8f 77       	andi	r24, 0x7F	; 127
 c44:	03 c0       	rjmp	.+6      	; 0xc4c <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 c46:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 c4a:	8f 7d       	andi	r24, 0xDF	; 223
 c4c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 c50:	08 95       	ret

00000c52 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 c52:	cf 93       	push	r28
 c54:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	fc 01       	movw	r30, r24
 c5a:	e4 58       	subi	r30, 0x84	; 132
 c5c:	ff 4f       	sbci	r31, 0xFF	; 255
 c5e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 c60:	fc 01       	movw	r30, r24
 c62:	e0 57       	subi	r30, 0x70	; 112
 c64:	ff 4f       	sbci	r31, 0xFF	; 255
 c66:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 c68:	88 23       	and	r24, r24
 c6a:	61 f1       	breq	.+88     	; 0xcc4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	88 0f       	add	r24, r24
 c70:	99 1f       	adc	r25, r25
 c72:	fc 01       	movw	r30, r24
 c74:	e8 54       	subi	r30, 0x48	; 72
 c76:	ff 4f       	sbci	r31, 0xFF	; 255
 c78:	c5 91       	lpm	r28, Z+
 c7a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 c7c:	fc 01       	movw	r30, r24
 c7e:	e2 55       	subi	r30, 0x52	; 82
 c80:	ff 4f       	sbci	r31, 0xFF	; 255
 c82:	a5 91       	lpm	r26, Z+
 c84:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 c86:	61 11       	cpse	r22, r1
 c88:	09 c0       	rjmp	.+18     	; 0xc9c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 c8a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 c8c:	f8 94       	cli
		*reg &= ~bit;
 c8e:	88 81       	ld	r24, Y
 c90:	20 95       	com	r18
 c92:	82 23       	and	r24, r18
 c94:	88 83       	st	Y, r24
		*out &= ~bit;
 c96:	ec 91       	ld	r30, X
 c98:	2e 23       	and	r18, r30
 c9a:	0b c0       	rjmp	.+22     	; 0xcb2 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 c9c:	62 30       	cpi	r22, 0x02	; 2
 c9e:	61 f4       	brne	.+24     	; 0xcb8 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 ca0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ca2:	f8 94       	cli
		*reg &= ~bit;
 ca4:	88 81       	ld	r24, Y
 ca6:	32 2f       	mov	r19, r18
 ca8:	30 95       	com	r19
 caa:	83 23       	and	r24, r19
 cac:	88 83       	st	Y, r24
		*out |= bit;
 cae:	ec 91       	ld	r30, X
 cb0:	2e 2b       	or	r18, r30
 cb2:	2c 93       	st	X, r18
		SREG = oldSREG;
 cb4:	9f bf       	out	0x3f, r25	; 63
 cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 cb8:	8f b7       	in	r24, 0x3f	; 63
                cli();
 cba:	f8 94       	cli
		*reg |= bit;
 cbc:	e8 81       	ld	r30, Y
 cbe:	2e 2b       	or	r18, r30
 cc0:	28 83       	st	Y, r18
		SREG = oldSREG;
 cc2:	8f bf       	out	0x3f, r24	; 63
	}
}
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	08 95       	ret

00000cca <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 cd0:	28 2f       	mov	r18, r24
 cd2:	30 e0       	ldi	r19, 0x00	; 0
 cd4:	f9 01       	movw	r30, r18
 cd6:	e8 59       	subi	r30, 0x98	; 152
 cd8:	ff 4f       	sbci	r31, 0xFF	; 255
 cda:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 cdc:	f9 01       	movw	r30, r18
 cde:	e4 58       	subi	r30, 0x84	; 132
 ce0:	ff 4f       	sbci	r31, 0xFF	; 255
 ce2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 ce4:	f9 01       	movw	r30, r18
 ce6:	e0 57       	subi	r30, 0x70	; 112
 ce8:	ff 4f       	sbci	r31, 0xFF	; 255
 cea:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 cec:	cc 23       	and	r28, r28
 cee:	c1 f0       	breq	.+48     	; 0xd20 <digitalWrite+0x56>
 cf0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 cf2:	81 11       	cpse	r24, r1
 cf4:	0e 94 00 06 	call	0xc00	; 0xc00 <turnOffPWM>

	out = portOutputRegister(port);
 cf8:	ec 2f       	mov	r30, r28
 cfa:	f0 e0       	ldi	r31, 0x00	; 0
 cfc:	ee 0f       	add	r30, r30
 cfe:	ff 1f       	adc	r31, r31
 d00:	e2 55       	subi	r30, 0x52	; 82
 d02:	ff 4f       	sbci	r31, 0xFF	; 255
 d04:	a5 91       	lpm	r26, Z+
 d06:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 d08:	9f b7       	in	r25, 0x3f	; 63
	cli();
 d0a:	f8 94       	cli

	if (val == LOW) {
 d0c:	11 11       	cpse	r17, r1
 d0e:	04 c0       	rjmp	.+8      	; 0xd18 <digitalWrite+0x4e>
		*out &= ~bit;
 d10:	8c 91       	ld	r24, X
 d12:	d0 95       	com	r29
 d14:	d8 23       	and	r29, r24
 d16:	02 c0       	rjmp	.+4      	; 0xd1c <digitalWrite+0x52>
	} else {
		*out |= bit;
 d18:	ec 91       	ld	r30, X
 d1a:	de 2b       	or	r29, r30
 d1c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 d1e:	9f bf       	out	0x3f, r25	; 63
}
 d20:	df 91       	pop	r29
 d22:	cf 91       	pop	r28
 d24:	1f 91       	pop	r17
 d26:	08 95       	ret

00000d28 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 d28:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 d2a:	91 8d       	ldd	r25, Z+25	; 0x19
 d2c:	22 8d       	ldd	r18, Z+26	; 0x1a
 d2e:	89 2f       	mov	r24, r25
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	80 5c       	subi	r24, 0xC0	; 192
 d34:	9f 4f       	sbci	r25, 0xFF	; 255
 d36:	82 1b       	sub	r24, r18
 d38:	91 09       	sbc	r25, r1
}
 d3a:	8f 73       	andi	r24, 0x3F	; 63
 d3c:	99 27       	eor	r25, r25
 d3e:	08 95       	ret

00000d40 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 d40:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 d42:	91 8d       	ldd	r25, Z+25	; 0x19
 d44:	82 8d       	ldd	r24, Z+26	; 0x1a
 d46:	98 17       	cp	r25, r24
 d48:	31 f0       	breq	.+12     	; 0xd56 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 d4a:	82 8d       	ldd	r24, Z+26	; 0x1a
 d4c:	e8 0f       	add	r30, r24
 d4e:	f1 1d       	adc	r31, r1
 d50:	85 8d       	ldd	r24, Z+29	; 0x1d
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 d56:	8f ef       	ldi	r24, 0xFF	; 255
 d58:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 d5a:	08 95       	ret

00000d5c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 d5c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 d5e:	91 8d       	ldd	r25, Z+25	; 0x19
 d60:	82 8d       	ldd	r24, Z+26	; 0x1a
 d62:	98 17       	cp	r25, r24
 d64:	61 f0       	breq	.+24     	; 0xd7e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 d66:	82 8d       	ldd	r24, Z+26	; 0x1a
 d68:	df 01       	movw	r26, r30
 d6a:	a8 0f       	add	r26, r24
 d6c:	b1 1d       	adc	r27, r1
 d6e:	5d 96       	adiw	r26, 0x1d	; 29
 d70:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 d72:	92 8d       	ldd	r25, Z+26	; 0x1a
 d74:	9f 5f       	subi	r25, 0xFF	; 255
 d76:	9f 73       	andi	r25, 0x3F	; 63
 d78:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 d7e:	8f ef       	ldi	r24, 0xFF	; 255
 d80:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 d82:	08 95       	ret

00000d84 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 d84:	fc 01       	movw	r30, r24
 d86:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 d88:	44 8d       	ldd	r20, Z+28	; 0x1c
 d8a:	25 2f       	mov	r18, r21
 d8c:	30 e0       	ldi	r19, 0x00	; 0
 d8e:	84 2f       	mov	r24, r20
 d90:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 d92:	82 1b       	sub	r24, r18
 d94:	93 0b       	sbc	r25, r19
 d96:	54 17       	cp	r21, r20
 d98:	10 f0       	brcs	.+4      	; 0xd9e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 d9a:	cf 96       	adiw	r24, 0x3f	; 63
 d9c:	08 95       	ret
  return tail - head - 1;
 d9e:	01 97       	sbiw	r24, 0x01	; 1
}
 da0:	08 95       	ret

00000da2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 da2:	8a e0       	ldi	r24, 0x0A	; 10
 da4:	95 e0       	ldi	r25, 0x05	; 5
 da6:	89 2b       	or	r24, r25
 da8:	49 f0       	breq	.+18     	; 0xdbc <_Z14serialEventRunv+0x1a>
 daa:	80 e0       	ldi	r24, 0x00	; 0
 dac:	90 e0       	ldi	r25, 0x00	; 0
 dae:	89 2b       	or	r24, r25
 db0:	29 f0       	breq	.+10     	; 0xdbc <_Z14serialEventRunv+0x1a>
 db2:	0e 94 0a 05 	call	0xa14	; 0xa14 <_Z17Serial0_availablev>
 db6:	81 11       	cpse	r24, r1
 db8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 dbc:	08 95       	ret

00000dbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 dbe:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 dc0:	84 8d       	ldd	r24, Z+28	; 0x1c
 dc2:	df 01       	movw	r26, r30
 dc4:	a8 0f       	add	r26, r24
 dc6:	b1 1d       	adc	r27, r1
 dc8:	a3 5a       	subi	r26, 0xA3	; 163
 dca:	bf 4f       	sbci	r27, 0xFF	; 255
 dcc:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 dce:	84 8d       	ldd	r24, Z+28	; 0x1c
 dd0:	90 e0       	ldi	r25, 0x00	; 0
 dd2:	01 96       	adiw	r24, 0x01	; 1
 dd4:	8f 73       	andi	r24, 0x3F	; 63
 dd6:	99 27       	eor	r25, r25
 dd8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 dda:	a6 89       	ldd	r26, Z+22	; 0x16
 ddc:	b7 89       	ldd	r27, Z+23	; 0x17
 dde:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 de0:	a0 89       	ldd	r26, Z+16	; 0x10
 de2:	b1 89       	ldd	r27, Z+17	; 0x11
 de4:	8c 91       	ld	r24, X
 de6:	80 64       	ori	r24, 0x40	; 64
 de8:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 dea:	93 8d       	ldd	r25, Z+27	; 0x1b
 dec:	84 8d       	ldd	r24, Z+28	; 0x1c
 dee:	98 13       	cpse	r25, r24
 df0:	06 c0       	rjmp	.+12     	; 0xdfe <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 df2:	02 88       	ldd	r0, Z+18	; 0x12
 df4:	f3 89       	ldd	r31, Z+19	; 0x13
 df6:	e0 2d       	mov	r30, r0
 df8:	80 81       	ld	r24, Z
 dfa:	8f 7d       	andi	r24, 0xDF	; 223
 dfc:	80 83       	st	Z, r24
 dfe:	08 95       	ret

00000e00 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 e00:	ef 92       	push	r14
 e02:	ff 92       	push	r15
 e04:	0f 93       	push	r16
 e06:	1f 93       	push	r17
 e08:	cf 93       	push	r28
 e0a:	df 93       	push	r29
 e0c:	ec 01       	movw	r28, r24
  _written = true;
 e0e:	81 e0       	ldi	r24, 0x01	; 1
 e10:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 e12:	9b 8d       	ldd	r25, Y+27	; 0x1b
 e14:	8c 8d       	ldd	r24, Y+28	; 0x1c
 e16:	98 13       	cpse	r25, r24
 e18:	05 c0       	rjmp	.+10     	; 0xe24 <_ZN14HardwareSerial5writeEh+0x24>
 e1a:	e8 89       	ldd	r30, Y+16	; 0x10
 e1c:	f9 89       	ldd	r31, Y+17	; 0x11
 e1e:	80 81       	ld	r24, Z
 e20:	85 fd       	sbrc	r24, 5
 e22:	24 c0       	rjmp	.+72     	; 0xe6c <_ZN14HardwareSerial5writeEh+0x6c>
 e24:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 e26:	0b 8d       	ldd	r16, Y+27	; 0x1b
 e28:	10 e0       	ldi	r17, 0x00	; 0
 e2a:	0f 5f       	subi	r16, 0xFF	; 255
 e2c:	1f 4f       	sbci	r17, 0xFF	; 255
 e2e:	0f 73       	andi	r16, 0x3F	; 63
 e30:	11 27       	eor	r17, r17
 e32:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 e34:	8c 8d       	ldd	r24, Y+28	; 0x1c
 e36:	e8 12       	cpse	r14, r24
 e38:	0c c0       	rjmp	.+24     	; 0xe52 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 e3a:	0f b6       	in	r0, 0x3f	; 63
 e3c:	07 fc       	sbrc	r0, 7
 e3e:	fa cf       	rjmp	.-12     	; 0xe34 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 e40:	e8 89       	ldd	r30, Y+16	; 0x10
 e42:	f9 89       	ldd	r31, Y+17	; 0x11
 e44:	80 81       	ld	r24, Z
 e46:	85 ff       	sbrs	r24, 5
 e48:	f5 cf       	rjmp	.-22     	; 0xe34 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 e4a:	ce 01       	movw	r24, r28
 e4c:	0e 94 df 06 	call	0xdbe	; 0xdbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 e50:	f1 cf       	rjmp	.-30     	; 0xe34 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
 e54:	fe 01       	movw	r30, r28
 e56:	e8 0f       	add	r30, r24
 e58:	f1 1d       	adc	r31, r1
 e5a:	e3 5a       	subi	r30, 0xA3	; 163
 e5c:	ff 4f       	sbci	r31, 0xFF	; 255
 e5e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 e60:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 e62:	ea 89       	ldd	r30, Y+18	; 0x12
 e64:	fb 89       	ldd	r31, Y+19	; 0x13
 e66:	80 81       	ld	r24, Z
 e68:	80 62       	ori	r24, 0x20	; 32
 e6a:	07 c0       	rjmp	.+14     	; 0xe7a <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 e6c:	ee 89       	ldd	r30, Y+22	; 0x16
 e6e:	ff 89       	ldd	r31, Y+23	; 0x17
 e70:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 e72:	e8 89       	ldd	r30, Y+16	; 0x10
 e74:	f9 89       	ldd	r31, Y+17	; 0x11
 e76:	80 81       	ld	r24, Z
 e78:	80 64       	ori	r24, 0x40	; 64
 e7a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 e7c:	81 e0       	ldi	r24, 0x01	; 1
 e7e:	90 e0       	ldi	r25, 0x00	; 0
 e80:	df 91       	pop	r29
 e82:	cf 91       	pop	r28
 e84:	1f 91       	pop	r17
 e86:	0f 91       	pop	r16
 e88:	ff 90       	pop	r15
 e8a:	ef 90       	pop	r14
 e8c:	08 95       	ret

00000e8e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 e8e:	cf 93       	push	r28
 e90:	df 93       	push	r29
 e92:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 e94:	88 8d       	ldd	r24, Y+24	; 0x18
 e96:	88 23       	and	r24, r24
 e98:	c9 f0       	breq	.+50     	; 0xecc <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 e9a:	ea 89       	ldd	r30, Y+18	; 0x12
 e9c:	fb 89       	ldd	r31, Y+19	; 0x13
 e9e:	80 81       	ld	r24, Z
 ea0:	85 fd       	sbrc	r24, 5
 ea2:	05 c0       	rjmp	.+10     	; 0xeae <_ZN14HardwareSerial5flushEv+0x20>
 ea4:	a8 89       	ldd	r26, Y+16	; 0x10
 ea6:	b9 89       	ldd	r27, Y+17	; 0x11
 ea8:	8c 91       	ld	r24, X
 eaa:	86 fd       	sbrc	r24, 6
 eac:	0f c0       	rjmp	.+30     	; 0xecc <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 eae:	0f b6       	in	r0, 0x3f	; 63
 eb0:	07 fc       	sbrc	r0, 7
 eb2:	f5 cf       	rjmp	.-22     	; 0xe9e <_ZN14HardwareSerial5flushEv+0x10>
 eb4:	80 81       	ld	r24, Z
 eb6:	85 ff       	sbrs	r24, 5
 eb8:	f2 cf       	rjmp	.-28     	; 0xe9e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 eba:	a8 89       	ldd	r26, Y+16	; 0x10
 ebc:	b9 89       	ldd	r27, Y+17	; 0x11
 ebe:	8c 91       	ld	r24, X
 ec0:	85 ff       	sbrs	r24, 5
 ec2:	ed cf       	rjmp	.-38     	; 0xe9e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 ec4:	ce 01       	movw	r24, r28
 ec6:	0e 94 df 06 	call	0xdbe	; 0xdbe <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 eca:	e7 cf       	rjmp	.-50     	; 0xe9a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 ecc:	df 91       	pop	r29
 ece:	cf 91       	pop	r28
 ed0:	08 95       	ret

00000ed2 <__divmodhi4>:
 ed2:	97 fb       	bst	r25, 7
 ed4:	07 2e       	mov	r0, r23
 ed6:	16 f4       	brtc	.+4      	; 0xedc <__divmodhi4+0xa>
 ed8:	00 94       	com	r0
 eda:	07 d0       	rcall	.+14     	; 0xeea <__divmodhi4_neg1>
 edc:	77 fd       	sbrc	r23, 7
 ede:	09 d0       	rcall	.+18     	; 0xef2 <__divmodhi4_neg2>
 ee0:	0e 94 be 07 	call	0xf7c	; 0xf7c <__udivmodhi4>
 ee4:	07 fc       	sbrc	r0, 7
 ee6:	05 d0       	rcall	.+10     	; 0xef2 <__divmodhi4_neg2>
 ee8:	3e f4       	brtc	.+14     	; 0xef8 <__divmodhi4_exit>

00000eea <__divmodhi4_neg1>:
 eea:	90 95       	com	r25
 eec:	81 95       	neg	r24
 eee:	9f 4f       	sbci	r25, 0xFF	; 255
 ef0:	08 95       	ret

00000ef2 <__divmodhi4_neg2>:
 ef2:	70 95       	com	r23
 ef4:	61 95       	neg	r22
 ef6:	7f 4f       	sbci	r23, 0xFF	; 255

00000ef8 <__divmodhi4_exit>:
 ef8:	08 95       	ret

00000efa <__udivmodsi4>:
 efa:	a1 e2       	ldi	r26, 0x21	; 33
 efc:	1a 2e       	mov	r1, r26
 efe:	aa 1b       	sub	r26, r26
 f00:	bb 1b       	sub	r27, r27
 f02:	fd 01       	movw	r30, r26
 f04:	0d c0       	rjmp	.+26     	; 0xf20 <__udivmodsi4_ep>

00000f06 <__udivmodsi4_loop>:
 f06:	aa 1f       	adc	r26, r26
 f08:	bb 1f       	adc	r27, r27
 f0a:	ee 1f       	adc	r30, r30
 f0c:	ff 1f       	adc	r31, r31
 f0e:	a2 17       	cp	r26, r18
 f10:	b3 07       	cpc	r27, r19
 f12:	e4 07       	cpc	r30, r20
 f14:	f5 07       	cpc	r31, r21
 f16:	20 f0       	brcs	.+8      	; 0xf20 <__udivmodsi4_ep>
 f18:	a2 1b       	sub	r26, r18
 f1a:	b3 0b       	sbc	r27, r19
 f1c:	e4 0b       	sbc	r30, r20
 f1e:	f5 0b       	sbc	r31, r21

00000f20 <__udivmodsi4_ep>:
 f20:	66 1f       	adc	r22, r22
 f22:	77 1f       	adc	r23, r23
 f24:	88 1f       	adc	r24, r24
 f26:	99 1f       	adc	r25, r25
 f28:	1a 94       	dec	r1
 f2a:	69 f7       	brne	.-38     	; 0xf06 <__udivmodsi4_loop>
 f2c:	60 95       	com	r22
 f2e:	70 95       	com	r23
 f30:	80 95       	com	r24
 f32:	90 95       	com	r25
 f34:	9b 01       	movw	r18, r22
 f36:	ac 01       	movw	r20, r24
 f38:	bd 01       	movw	r22, r26
 f3a:	cf 01       	movw	r24, r30
 f3c:	08 95       	ret

00000f3e <__divmodsi4>:
 f3e:	05 2e       	mov	r0, r21
 f40:	97 fb       	bst	r25, 7
 f42:	1e f4       	brtc	.+6      	; 0xf4a <__divmodsi4+0xc>
 f44:	00 94       	com	r0
 f46:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__negsi2>
 f4a:	57 fd       	sbrc	r21, 7
 f4c:	07 d0       	rcall	.+14     	; 0xf5c <__divmodsi4_neg2>
 f4e:	0e 94 7d 07 	call	0xefa	; 0xefa <__udivmodsi4>
 f52:	07 fc       	sbrc	r0, 7
 f54:	03 d0       	rcall	.+6      	; 0xf5c <__divmodsi4_neg2>
 f56:	4e f4       	brtc	.+18     	; 0xf6a <__divmodsi4_exit>
 f58:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__negsi2>

00000f5c <__divmodsi4_neg2>:
 f5c:	50 95       	com	r21
 f5e:	40 95       	com	r20
 f60:	30 95       	com	r19
 f62:	21 95       	neg	r18
 f64:	3f 4f       	sbci	r19, 0xFF	; 255
 f66:	4f 4f       	sbci	r20, 0xFF	; 255
 f68:	5f 4f       	sbci	r21, 0xFF	; 255

00000f6a <__divmodsi4_exit>:
 f6a:	08 95       	ret

00000f6c <__negsi2>:
 f6c:	90 95       	com	r25
 f6e:	80 95       	com	r24
 f70:	70 95       	com	r23
 f72:	61 95       	neg	r22
 f74:	7f 4f       	sbci	r23, 0xFF	; 255
 f76:	8f 4f       	sbci	r24, 0xFF	; 255
 f78:	9f 4f       	sbci	r25, 0xFF	; 255
 f7a:	08 95       	ret

00000f7c <__udivmodhi4>:
 f7c:	aa 1b       	sub	r26, r26
 f7e:	bb 1b       	sub	r27, r27
 f80:	51 e1       	ldi	r21, 0x11	; 17
 f82:	07 c0       	rjmp	.+14     	; 0xf92 <__udivmodhi4_ep>

00000f84 <__udivmodhi4_loop>:
 f84:	aa 1f       	adc	r26, r26
 f86:	bb 1f       	adc	r27, r27
 f88:	a6 17       	cp	r26, r22
 f8a:	b7 07       	cpc	r27, r23
 f8c:	10 f0       	brcs	.+4      	; 0xf92 <__udivmodhi4_ep>
 f8e:	a6 1b       	sub	r26, r22
 f90:	b7 0b       	sbc	r27, r23

00000f92 <__udivmodhi4_ep>:
 f92:	88 1f       	adc	r24, r24
 f94:	99 1f       	adc	r25, r25
 f96:	5a 95       	dec	r21
 f98:	a9 f7       	brne	.-22     	; 0xf84 <__udivmodhi4_loop>
 f9a:	80 95       	com	r24
 f9c:	90 95       	com	r25
 f9e:	bc 01       	movw	r22, r24
 fa0:	cd 01       	movw	r24, r26
 fa2:	08 95       	ret

00000fa4 <__tablejump2__>:
 fa4:	ee 0f       	add	r30, r30
 fa6:	ff 1f       	adc	r31, r31
 fa8:	05 90       	lpm	r0, Z+
 faa:	f4 91       	lpm	r31, Z
 fac:	e0 2d       	mov	r30, r0
 fae:	09 94       	ijmp

00000fb0 <__do_global_dtors>:
 fb0:	10 e0       	ldi	r17, 0x00	; 0
 fb2:	c3 e6       	ldi	r28, 0x63	; 99
 fb4:	d0 e0       	ldi	r29, 0x00	; 0
 fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <__do_global_dtors+0x10>
 fb8:	fe 01       	movw	r30, r28
 fba:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__tablejump2__>
 fbe:	21 96       	adiw	r28, 0x01	; 1
 fc0:	c4 36       	cpi	r28, 0x64	; 100
 fc2:	d1 07       	cpc	r29, r17
 fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__do_global_dtors+0x8>
 fc6:	f8 94       	cli

00000fc8 <__stop_program>:
 fc8:	ff cf       	rjmp	.-2      	; 0xfc8 <__stop_program>
