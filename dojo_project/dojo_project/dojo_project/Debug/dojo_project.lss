
dojo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000dc6  00000e5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  0080014e  0080014e  00000ea8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ad07  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020ae  00000000  00000000  0000c007  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000234b  00000000  00000000  0000e0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b3c  00000000  00000000  00010400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002826  00000000  00000000  00010f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e23  00000000  00000000  00013762  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  00017585  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_3>
  10:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_3>
  14:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_3>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_16>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_18>
  4c:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_19>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	a2 00       	.word	0x00a2	; ????
  c4:	b0 03       	fmuls	r19, r16

000000c6 <__ctors_end>:
  c6:	b0 00       	.word	0x00b0	; ????

000000c8 <__dtors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e6 ec       	ldi	r30, 0xC6	; 198
  dc:	fd e0       	ldi	r31, 0x0D	; 13
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	ae 34       	cpi	r26, 0x4E	; 78
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	ae e4       	ldi	r26, 0x4E	; 78
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a6 37       	cpi	r26, 0x76	; 118
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c3 e6       	ldi	r28, 0x63	; 99
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	fe 01       	movw	r30, r28
 106:	0e 94 d0 06 	call	0xda0	; 0xda0 <__tablejump2__>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	d1 07       	cpc	r29, r17
 10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
 110:	0e 94 de 03 	call	0x7bc	; 0x7bc <main>
 114:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__do_global_dtors>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
	}
}

void scan()
{
	testComparing(scanClosestBeacon()); 
 11c:	40 e8       	ldi	r20, 0x80	; 128
 11e:	55 e2       	ldi	r21, 0x25	; 37
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	8d e6       	ldi	r24, 0x6D	; 109
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN14SoftwareSerial5beginEl>
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	55 e2       	ldi	r21, 0x25	; 37
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	8e e4       	ldi	r24, 0x4E	; 78
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN14SoftwareSerial5beginEl>
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	87 b9       	out	0x07, r24	; 7
 140:	8a b9       	out	0x0a, r24	; 10
 142:	08 95       	ret

00000144 <_GLOBAL__sub_I_mySerial>:
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8d e6       	ldi	r24, 0x6D	; 109
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 95 02 	call	0x52a	; 0x52a <_ZN14SoftwareSerialC1Ehhb>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	43 e0       	ldi	r20, 0x03	; 3
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	8e e4       	ldi	r24, 0x4E	; 78
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0c 94 95 02 	jmp	0x52a	; 0x52a <_ZN14SoftwareSerialC1Ehhb>

00000160 <_GLOBAL__sub_D_mySerial>:
 160:	8e e4       	ldi	r24, 0x4E	; 78
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN14SoftwareSerialD1Ev>
 168:	8d e6       	ldi	r24, 0x6D	; 109
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0c 94 3c 02 	jmp	0x478	; 0x478 <_ZN14SoftwareSerialD1Ev>

00000170 <_Z10readAnswerv>:
 170:	8e e4       	ldi	r24, 0x4E	; 78
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN14SoftwareSerial9availableEv>
 178:	89 2b       	or	r24, r25
 17a:	d1 f3       	breq	.-12     	; 0x170 <_Z10readAnswerv>
 17c:	8e e4       	ldi	r24, 0x4E	; 78
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_ZN14SoftwareSerial4readEv>

00000184 <loop>:
	 digitalWrite(WTV_CLK, HIGH);
}

void loop()
{
	if (BTSerial.available())
 184:	8e e4       	ldi	r24, 0x4E	; 78
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_ZN14SoftwareSerial9availableEv>
 18c:	89 2b       	or	r24, r25
 18e:	41 f0       	breq	.+16     	; 0x1a0 <loop+0x1c>
	{
		mySerial.write(readAnswer());
 190:	0e 94 b8 00 	call	0x170	; 0x170 <_Z10readAnswerv>
 194:	68 2f       	mov	r22, r24
 196:	8d e6       	ldi	r24, 0x6D	; 109
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 02 01 	call	0x204	; 0x204 <_ZN14SoftwareSerial5writeEh>
 19e:	08 c0       	rjmp	.+16     	; 0x1b0 <loop+0x2c>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	67 e2       	ldi	r22, 0x27	; 39
 1a6:	71 e0       	ldi	r23, 0x01	; 1
 1a8:	8d e6       	ldi	r24, 0x6D	; 109
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 ed 03 	call	0x7da	; 0x7da <_ZN5Print5writeEPKhj>
		mySerial.write("a");
	}
// 	scan();
// 	delay(2000);
// 	mySerial.println("works!");
	delay(500);	
 1b0:	64 ef       	ldi	r22, 0xF4	; 244
 1b2:	71 e0       	ldi	r23, 0x01	; 1
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0c 94 86 04 	jmp	0x90c	; 0x90c <delay>

000001bc <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <_ZN14SoftwareSerial4readEv>:
 1c2:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <_ZN14SoftwareSerial13active_objectE>
 1c6:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <_ZN14SoftwareSerial13active_objectE+0x1>
 1ca:	28 17       	cp	r18, r24
 1cc:	39 07       	cpc	r19, r25
 1ce:	b9 f4       	brne	.+46     	; 0x1fe <_ZN14SoftwareSerial4readEv+0x3c>
 1d0:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 1d4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN14SoftwareSerial20_receive_buffer_tailE>
 1d8:	98 17       	cp	r25, r24
 1da:	89 f0       	breq	.+34     	; 0x1fe <_ZN14SoftwareSerial4readEv+0x3c>
 1dc:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	e2 57       	subi	r30, 0x72	; 114
 1e4:	fe 4f       	sbci	r31, 0xFE	; 254
 1e6:	80 81       	ld	r24, Z
 1e8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	2f 73       	andi	r18, 0x3F	; 63
 1f4:	33 27       	eor	r19, r19
 1f6:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	9f ef       	ldi	r25, 0xFF	; 255
 202:	08 95       	ret

00000204 <_ZN14SoftwareSerial5writeEh>:
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	dc 01       	movw	r26, r24
 20c:	5c 96       	adiw	r26, 0x1c	; 28
 20e:	8d 91       	ld	r24, X+
 210:	9c 91       	ld	r25, X
 212:	5d 97       	sbiw	r26, 0x1d	; 29
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	39 f4       	brne	.+14     	; 0x226 <_ZN14SoftwareSerial5writeEh+0x22>
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	13 96       	adiw	r26, 0x03	; 3
 21e:	3c 93       	st	X, r19
 220:	2e 93       	st	-X, r18
 222:	12 97       	sbiw	r26, 0x02	; 2
 224:	3b c0       	rjmp	.+118    	; 0x29c <_ZN14SoftwareSerial5writeEh+0x98>
 226:	51 96       	adiw	r26, 0x11	; 17
 228:	ed 91       	ld	r30, X+
 22a:	fc 91       	ld	r31, X
 22c:	52 97       	sbiw	r26, 0x12	; 18
 22e:	50 96       	adiw	r26, 0x10	; 16
 230:	2c 91       	ld	r18, X
 232:	50 97       	sbiw	r26, 0x10	; 16
 234:	32 2f       	mov	r19, r18
 236:	30 95       	com	r19
 238:	1f b7       	in	r17, 0x3f	; 63
 23a:	5e 96       	adiw	r26, 0x1e	; 30
 23c:	4c 91       	ld	r20, X
 23e:	5e 97       	sbiw	r26, 0x1e	; 30
 240:	74 2f       	mov	r23, r20
 242:	72 70       	andi	r23, 0x02	; 2
 244:	41 fd       	sbrc	r20, 1
 246:	60 95       	com	r22
 248:	f8 94       	cli
 24a:	40 81       	ld	r20, Z
 24c:	77 23       	and	r23, r23
 24e:	11 f0       	breq	.+4      	; 0x254 <_ZN14SoftwareSerial5writeEh+0x50>
 250:	42 2b       	or	r20, r18
 252:	01 c0       	rjmp	.+2      	; 0x256 <_ZN14SoftwareSerial5writeEh+0x52>
 254:	43 23       	and	r20, r19
 256:	40 83       	st	Z, r20
 258:	ec 01       	movw	r28, r24
 25a:	21 97       	sbiw	r28, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <_ZN14SoftwareSerial5writeEh+0x56>
 25e:	48 e0       	ldi	r20, 0x08	; 8
 260:	50 81       	ld	r21, Z
 262:	60 ff       	sbrs	r22, 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <_ZN14SoftwareSerial5writeEh+0x66>
 266:	52 2b       	or	r21, r18
 268:	01 c0       	rjmp	.+2      	; 0x26c <_ZN14SoftwareSerial5writeEh+0x68>
 26a:	53 23       	and	r21, r19
 26c:	50 83       	st	Z, r21
 26e:	ec 01       	movw	r28, r24
 270:	21 97       	sbiw	r28, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <_ZN14SoftwareSerial5writeEh+0x6c>
 274:	66 95       	lsr	r22
 276:	41 50       	subi	r20, 0x01	; 1
 278:	99 f7       	brne	.-26     	; 0x260 <_ZN14SoftwareSerial5writeEh+0x5c>
 27a:	80 81       	ld	r24, Z
 27c:	77 23       	and	r23, r23
 27e:	19 f0       	breq	.+6      	; 0x286 <_ZN14SoftwareSerial5writeEh+0x82>
 280:	83 23       	and	r24, r19
 282:	80 83       	st	Z, r24
 284:	02 c0       	rjmp	.+4      	; 0x28a <_ZN14SoftwareSerial5writeEh+0x86>
 286:	28 2b       	or	r18, r24
 288:	20 83       	st	Z, r18
 28a:	1f bf       	out	0x3f, r17	; 63
 28c:	5c 96       	adiw	r26, 0x1c	; 28
 28e:	8d 91       	ld	r24, X+
 290:	9c 91       	ld	r25, X
 292:	5d 97       	sbiw	r26, 0x1d	; 29
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <_ZN14SoftwareSerial5writeEh+0x90>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <_ZN14SoftwareSerial5flushEv>:
 2a4:	08 95       	ret

000002a6 <_ZN14SoftwareSerial4peekEv>:
 2a6:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <_ZN14SoftwareSerial13active_objectE>
 2aa:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <_ZN14SoftwareSerial13active_objectE+0x1>
 2ae:	28 17       	cp	r18, r24
 2b0:	39 07       	cpc	r19, r25
 2b2:	71 f4       	brne	.+28     	; 0x2d0 <_ZN14SoftwareSerial4peekEv+0x2a>
 2b4:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 2b8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN14SoftwareSerial20_receive_buffer_tailE>
 2bc:	98 17       	cp	r25, r24
 2be:	41 f0       	breq	.+16     	; 0x2d0 <_ZN14SoftwareSerial4peekEv+0x2a>
 2c0:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e2 57       	subi	r30, 0x72	; 114
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	80 81       	ld	r24, Z
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	9f ef       	ldi	r25, 0xFF	; 255
 2d4:	08 95       	ret

000002d6 <_ZN14SoftwareSerial9availableEv>:
 2d6:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <_ZN14SoftwareSerial13active_objectE>
 2da:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <_ZN14SoftwareSerial13active_objectE+0x1>
 2de:	28 17       	cp	r18, r24
 2e0:	39 07       	cpc	r19, r25
 2e2:	71 f4       	brne	.+28     	; 0x300 <_ZN14SoftwareSerial9availableEv+0x2a>
 2e4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN14SoftwareSerial20_receive_buffer_tailE>
 2e8:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	80 5c       	subi	r24, 0xC0	; 192
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	82 1b       	sub	r24, r18
 2f4:	91 09       	sbc	r25, r1
 2f6:	60 e4       	ldi	r22, 0x40	; 64
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	0e 94 67 06 	call	0xcce	; 0xcce <__divmodhi4>
 2fe:	08 95       	ret
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	08 95       	ret

00000306 <_ZN14SoftwareSerial13stopListeningEv>:
 306:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <_ZN14SoftwareSerial13active_objectE>
 30a:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <_ZN14SoftwareSerial13active_objectE+0x1>
 30e:	e8 17       	cp	r30, r24
 310:	f9 07       	cpc	r31, r25
 312:	69 f4       	brne	.+26     	; 0x32e <_ZN14SoftwareSerial13stopListeningEv+0x28>
 314:	a3 89       	ldd	r26, Z+19	; 0x13
 316:	b4 89       	ldd	r27, Z+20	; 0x14
 318:	9c 91       	ld	r25, X
 31a:	85 89       	ldd	r24, Z+21	; 0x15
 31c:	80 95       	com	r24
 31e:	89 23       	and	r24, r25
 320:	8c 93       	st	X, r24
 322:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <_ZN14SoftwareSerial13active_objectE+0x1>
 326:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZN14SoftwareSerial13active_objectE>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret

00000332 <_ZN14SoftwareSerial6listenEv>:
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
 338:	8a 8d       	ldd	r24, Y+26	; 0x1a
 33a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 33c:	89 2b       	or	r24, r25
 33e:	f1 f0       	breq	.+60     	; 0x37c <_ZN14SoftwareSerial6listenEv+0x4a>
 340:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <_ZN14SoftwareSerial13active_objectE>
 344:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <_ZN14SoftwareSerial13active_objectE+0x1>
 348:	c8 17       	cp	r28, r24
 34a:	d9 07       	cpc	r29, r25
 34c:	b9 f0       	breq	.+46     	; 0x37c <_ZN14SoftwareSerial6listenEv+0x4a>
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	11 f0       	breq	.+4      	; 0x356 <_ZN14SoftwareSerial6listenEv+0x24>
 352:	0e 94 83 01 	call	0x306	; 0x306 <_ZN14SoftwareSerial13stopListeningEv>
 356:	8e 8d       	ldd	r24, Y+30	; 0x1e
 358:	8e 7f       	andi	r24, 0xFE	; 254
 35a:	8e 8f       	std	Y+30, r24	; 0x1e
 35c:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <_ZN14SoftwareSerial20_receive_buffer_tailE>
 360:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 364:	d0 93 cf 01 	sts	0x01CF, r29	; 0x8001cf <_ZN14SoftwareSerial13active_objectE+0x1>
 368:	c0 93 ce 01 	sts	0x01CE, r28	; 0x8001ce <_ZN14SoftwareSerial13active_objectE>
 36c:	eb 89       	ldd	r30, Y+19	; 0x13
 36e:	fc 89       	ldd	r31, Y+20	; 0x14
 370:	90 81       	ld	r25, Z
 372:	8d 89       	ldd	r24, Y+21	; 0x15
 374:	89 2b       	or	r24, r25
 376:	80 83       	st	Z, r24
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	01 c0       	rjmp	.+2      	; 0x37e <_ZN14SoftwareSerial6listenEv+0x4c>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <__vector_3>:
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
 3a6:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <_ZN14SoftwareSerial13active_objectE>
 3aa:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <_ZN14SoftwareSerial13active_objectE+0x1>
 3ae:	30 97       	sbiw	r30, 0x00	; 0
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <__vector_3+0x30>
 3b2:	51 c0       	rjmp	.+162    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3b4:	96 8d       	ldd	r25, Z+30	; 0x1e
 3b6:	a6 85       	ldd	r26, Z+14	; 0x0e
 3b8:	b7 85       	ldd	r27, Z+15	; 0x0f
 3ba:	85 85       	ldd	r24, Z+13	; 0x0d
 3bc:	91 ff       	sbrs	r25, 1
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <__vector_3+0x44>
 3c0:	9c 91       	ld	r25, X
 3c2:	89 23       	and	r24, r25
 3c4:	29 f4       	brne	.+10     	; 0x3d0 <__vector_3+0x4c>
 3c6:	47 c0       	rjmp	.+142    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3c8:	9c 91       	ld	r25, X
 3ca:	89 23       	and	r24, r25
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <__vector_3+0x4c>
 3ce:	43 c0       	rjmp	.+134    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3d0:	a3 89       	ldd	r26, Z+19	; 0x13
 3d2:	b4 89       	ldd	r27, Z+20	; 0x14
 3d4:	9c 91       	ld	r25, X
 3d6:	85 89       	ldd	r24, Z+21	; 0x15
 3d8:	80 95       	com	r24
 3da:	89 23       	and	r24, r25
 3dc:	8c 93       	st	X, r24
 3de:	86 89       	ldd	r24, Z+22	; 0x16
 3e0:	97 89       	ldd	r25, Z+23	; 0x17
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <__vector_3+0x5e>
 3e6:	60 8d       	ldd	r22, Z+24	; 0x18
 3e8:	71 8d       	ldd	r23, Z+25	; 0x19
 3ea:	a6 85       	ldd	r26, Z+14	; 0x0e
 3ec:	b7 85       	ldd	r27, Z+15	; 0x0f
 3ee:	55 85       	ldd	r21, Z+13	; 0x0d
 3f0:	38 e0       	ldi	r19, 0x08	; 8
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	cb 01       	movw	r24, r22
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <__vector_3+0x72>
 3fa:	82 2f       	mov	r24, r18
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	95 95       	asr	r25
 400:	87 95       	ror	r24
 402:	28 2f       	mov	r18, r24
 404:	4c 91       	ld	r20, X
 406:	45 23       	and	r20, r21
 408:	09 f0       	breq	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	20 68       	ori	r18, 0x80	; 128
 40c:	31 50       	subi	r19, 0x01	; 1
 40e:	91 f7       	brne	.-28     	; 0x3f4 <__vector_3+0x70>
 410:	86 8d       	ldd	r24, Z+30	; 0x1e
 412:	81 fd       	sbrc	r24, 1
 414:	20 95       	com	r18
 416:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZN14SoftwareSerial20_receive_buffer_tailE>
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	8f 73       	andi	r24, 0x3F	; 63
 420:	99 27       	eor	r25, r25
 422:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <_ZN14SoftwareSerial20_receive_buffer_headE>
 426:	38 17       	cp	r19, r24
 428:	49 f0       	breq	.+18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 42a:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <_ZN14SoftwareSerial20_receive_buffer_tailE>
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	a2 57       	subi	r26, 0x72	; 114
 432:	be 4f       	sbci	r27, 0xFE	; 254
 434:	2c 93       	st	X, r18
 436:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_ZN14SoftwareSerial20_receive_buffer_tailE>
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	86 8d       	ldd	r24, Z+30	; 0x1e
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	86 8f       	std	Z+30, r24	; 0x1e
 442:	82 8d       	ldd	r24, Z+26	; 0x1a
 444:	93 8d       	ldd	r25, Z+27	; 0x1b
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44a:	a3 89       	ldd	r26, Z+19	; 0x13
 44c:	b4 89       	ldd	r27, Z+20	; 0x14
 44e:	9c 91       	ld	r25, X
 450:	85 89       	ldd	r24, Z+21	; 0x15
 452:	89 2b       	or	r24, r25
 454:	8c 93       	st	X, r24
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <_ZN14SoftwareSerialD1Ev>:
 478:	2d e2       	ldi	r18, 0x2D	; 45
 47a:	31 e0       	ldi	r19, 0x01	; 1
 47c:	fc 01       	movw	r30, r24
 47e:	31 83       	std	Z+1, r19	; 0x01
 480:	20 83       	st	Z, r18
 482:	0c 94 83 01 	jmp	0x306	; 0x306 <_ZN14SoftwareSerial13stopListeningEv>

00000486 <_ZN14SoftwareSerial5setTXEh>:
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	ec 01       	movw	r28, r24
 48e:	16 2f       	mov	r17, r22
 490:	6e 8d       	ldd	r22, Y+30	; 0x1e
 492:	66 95       	lsr	r22
 494:	61 70       	andi	r22, 0x01	; 1
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	68 27       	eor	r22, r24
 49a:	81 2f       	mov	r24, r17
 49c:	0e 94 62 05 	call	0xac4	; 0xac4 <digitalWrite>
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	81 2f       	mov	r24, r17
 4a4:	0e 94 26 05 	call	0xa4c	; 0xa4c <pinMode>
 4a8:	81 2f       	mov	r24, r17
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	e4 58       	subi	r30, 0x84	; 132
 4b0:	ff 4f       	sbci	r31, 0xFF	; 255
 4b2:	e4 91       	lpm	r30, Z
 4b4:	e8 8b       	std	Y+16, r30	; 0x10
 4b6:	fc 01       	movw	r30, r24
 4b8:	e0 57       	subi	r30, 0x70	; 112
 4ba:	ff 4f       	sbci	r31, 0xFF	; 255
 4bc:	e4 91       	lpm	r30, Z
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	e2 55       	subi	r30, 0x52	; 82
 4c6:	ff 4f       	sbci	r31, 0xFF	; 255
 4c8:	85 91       	lpm	r24, Z+
 4ca:	94 91       	lpm	r25, Z
 4cc:	9a 8b       	std	Y+18, r25	; 0x12
 4ce:	89 8b       	std	Y+17, r24	; 0x11
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	08 95       	ret

000004d8 <_ZN14SoftwareSerial5setRXEh>:
 4d8:	1f 93       	push	r17
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	ec 01       	movw	r28, r24
 4e0:	16 2f       	mov	r17, r22
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	81 2f       	mov	r24, r17
 4e6:	0e 94 26 05 	call	0xa4c	; 0xa4c <pinMode>
 4ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
 4ec:	81 fd       	sbrc	r24, 1
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <_ZN14SoftwareSerial5setRXEh+0x20>
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	81 2f       	mov	r24, r17
 4f4:	0e 94 62 05 	call	0xac4	; 0xac4 <digitalWrite>
 4f8:	1c 87       	std	Y+12, r17	; 0x0c
 4fa:	81 2f       	mov	r24, r17
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	fc 01       	movw	r30, r24
 500:	e4 58       	subi	r30, 0x84	; 132
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	e4 91       	lpm	r30, Z
 506:	ed 87       	std	Y+13, r30	; 0x0d
 508:	fc 01       	movw	r30, r24
 50a:	e0 57       	subi	r30, 0x70	; 112
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	e4 91       	lpm	r30, Z
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	ec 55       	subi	r30, 0x5C	; 92
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	85 91       	lpm	r24, Z+
 51c:	94 91       	lpm	r25, Z
 51e:	9f 87       	std	Y+15, r25	; 0x0f
 520:	8e 87       	std	Y+14, r24	; 0x0e
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	08 95       	ret

0000052a <_ZN14SoftwareSerialC1Ehhb>:
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	ec 01       	movw	r28, r24
 532:	16 2f       	mov	r17, r22
 534:	1b 82       	std	Y+3, r1	; 0x03
 536:	1a 82       	std	Y+2, r1	; 0x02
 538:	88 ee       	ldi	r24, 0xE8	; 232
 53a:	93 e0       	ldi	r25, 0x03	; 3
 53c:	a0 e0       	ldi	r26, 0x00	; 0
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	8c 83       	std	Y+4, r24	; 0x04
 542:	9d 83       	std	Y+5, r25	; 0x05
 544:	ae 83       	std	Y+6, r26	; 0x06
 546:	bf 83       	std	Y+7, r27	; 0x07
 548:	8d e2       	ldi	r24, 0x2D	; 45
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	99 83       	std	Y+1, r25	; 0x01
 54e:	88 83       	st	Y, r24
 550:	1f 8a       	std	Y+23, r1	; 0x17
 552:	1e 8a       	std	Y+22, r1	; 0x16
 554:	19 8e       	std	Y+25, r1	; 0x19
 556:	18 8e       	std	Y+24, r1	; 0x18
 558:	1b 8e       	std	Y+27, r1	; 0x1b
 55a:	1a 8e       	std	Y+26, r1	; 0x1a
 55c:	1d 8e       	std	Y+29, r1	; 0x1d
 55e:	1c 8e       	std	Y+28, r1	; 0x1c
 560:	8e 8d       	ldd	r24, Y+30	; 0x1e
 562:	8e 7f       	andi	r24, 0xFE	; 254
 564:	20 fb       	bst	r18, 0
 566:	81 f9       	bld	r24, 1
 568:	8e 8f       	std	Y+30, r24	; 0x1e
 56a:	64 2f       	mov	r22, r20
 56c:	ce 01       	movw	r24, r28
 56e:	0e 94 43 02 	call	0x486	; 0x486 <_ZN14SoftwareSerial5setTXEh>
 572:	61 2f       	mov	r22, r17
 574:	ce 01       	movw	r24, r28
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	1f 91       	pop	r17
 57c:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <_ZN14SoftwareSerial5setRXEh>

00000580 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	ec 01       	movw	r28, r24
 586:	9a 01       	movw	r18, r20
 588:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
 58a:	1b 8e       	std	Y+27, r1	; 0x1b
 58c:	1a 8e       	std	Y+26, r1	; 0x1a
 58e:	19 8e       	std	Y+25, r1	; 0x19
 590:	18 8e       	std	Y+24, r1	; 0x18
 592:	1f 8a       	std	Y+23, r1	; 0x17
 594:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
 596:	60 e8       	ldi	r22, 0x80	; 128
 598:	74 e8       	ldi	r23, 0x84	; 132
 59a:	8e e1       	ldi	r24, 0x1E	; 30
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__divmodsi4>
 5a2:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5a4:	24 30       	cpi	r18, 0x04	; 4
 5a6:	31 05       	cpc	r19, r1
 5a8:	18 f0       	brcs	.+6      	; 0x5b0 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
 5aa:	c9 01       	movw	r24, r18
 5ac:	03 97       	sbiw	r24, 0x03	; 3
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
 5b4:	9d 8f       	std	Y+29, r25	; 0x1d
 5b6:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
 5b8:	6c 85       	ldd	r22, Y+12	; 0x0c
 5ba:	66 31       	cpi	r22, 0x16	; 22
 5bc:	08 f0       	brcs	.+2      	; 0x5c0 <_ZN14SoftwareSerial5beginEl+0x40>
 5be:	69 c0       	rjmp	.+210    	; 0x692 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 5c0:	c9 01       	movw	r24, r18
 5c2:	96 95       	lsr	r25
 5c4:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5c6:	84 31       	cpi	r24, 0x14	; 20
 5c8:	91 05       	cpc	r25, r1
 5ca:	10 f0       	brcs	.+4      	; 0x5d0 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
 5cc:	43 97       	sbiw	r24, 0x13	; 19
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 5d4:	9f 8b       	std	Y+23, r25	; 0x17
 5d6:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5d8:	36 97       	sbiw	r30, 0x06	; 6
 5da:	18 f0       	brcs	.+6      	; 0x5e2 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
 5dc:	c9 01       	movw	r24, r18
 5de:	05 97       	sbiw	r24, 0x05	; 5
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
 5e6:	99 8f       	std	Y+25, r25	; 0x19
 5e8:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 5ea:	c9 01       	movw	r24, r18
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	28 0f       	add	r18, r24
 5f2:	39 1f       	adc	r19, r25
 5f4:	36 95       	lsr	r19
 5f6:	27 95       	ror	r18
 5f8:	36 95       	lsr	r19
 5fa:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5fc:	2d 30       	cpi	r18, 0x0D	; 13
 5fe:	31 05       	cpc	r19, r1
 600:	18 f0       	brcs	.+6      	; 0x608 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
 602:	2c 50       	subi	r18, 0x0C	; 12
 604:	31 09       	sbc	r19, r1
 606:	02 c0       	rjmp	.+4      	; 0x60c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 60c:	3b 8f       	std	Y+27, r19	; 0x1b
 60e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
 610:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 614:	68 30       	cpi	r22, 0x08	; 8
 616:	50 f0       	brcs	.+20     	; 0x62c <_ZN14SoftwareSerial5beginEl+0xac>
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	6e 30       	cpi	r22, 0x0E	; 14
 61c:	08 f4       	brcc	.+2      	; 0x620 <_ZN14SoftwareSerial5beginEl+0xa0>
 61e:	20 e0       	ldi	r18, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	01 c0       	rjmp	.+2      	; 0x626 <_ZN14SoftwareSerial5beginEl+0xa6>
 624:	88 0f       	add	r24, r24
 626:	2a 95       	dec	r18
 628:	ea f7       	brpl	.-6      	; 0x624 <_ZN14SoftwareSerial5beginEl+0xa4>
 62a:	01 c0       	rjmp	.+2      	; 0x62e <_ZN14SoftwareSerial5beginEl+0xae>
 62c:	84 e0       	ldi	r24, 0x04	; 4
 62e:	89 2b       	or	r24, r25
 630:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
 634:	9c 85       	ldd	r25, Y+12	; 0x0c
 636:	98 30       	cpi	r25, 0x08	; 8
 638:	38 f0       	brcs	.+14     	; 0x648 <_ZN14SoftwareSerial5beginEl+0xc8>
 63a:	9e 30       	cpi	r25, 0x0E	; 14
 63c:	40 f0       	brcs	.+16     	; 0x64e <_ZN14SoftwareSerial5beginEl+0xce>
 63e:	96 31       	cpi	r25, 0x16	; 22
 640:	48 f0       	brcs	.+18     	; 0x654 <_ZN14SoftwareSerial5beginEl+0xd4>
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	08 c0       	rjmp	.+16     	; 0x658 <_ZN14SoftwareSerial5beginEl+0xd8>
 648:	2d e6       	ldi	r18, 0x6D	; 109
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	05 c0       	rjmp	.+10     	; 0x658 <_ZN14SoftwareSerial5beginEl+0xd8>
 64e:	2b e6       	ldi	r18, 0x6B	; 107
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <_ZN14SoftwareSerial5beginEl+0xd8>
 654:	2c e6       	ldi	r18, 0x6C	; 108
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	3c 8b       	std	Y+20, r19	; 0x14
 65a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
 65c:	98 30       	cpi	r25, 0x08	; 8
 65e:	30 f4       	brcc	.+12     	; 0x66c <_ZN14SoftwareSerial5beginEl+0xec>
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	01 c0       	rjmp	.+2      	; 0x666 <_ZN14SoftwareSerial5beginEl+0xe6>
 664:	88 0f       	add	r24, r24
 666:	9a 95       	dec	r25
 668:	ea f7       	brpl	.-6      	; 0x664 <_ZN14SoftwareSerial5beginEl+0xe4>
 66a:	0e c0       	rjmp	.+28     	; 0x688 <_ZN14SoftwareSerial5beginEl+0x108>
 66c:	29 2f       	mov	r18, r25
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	9e 30       	cpi	r25, 0x0E	; 14
 672:	18 f4       	brcc	.+6      	; 0x67a <_ZN14SoftwareSerial5beginEl+0xfa>
 674:	28 50       	subi	r18, 0x08	; 8
 676:	31 09       	sbc	r19, r1
 678:	02 c0       	rjmp	.+4      	; 0x67e <_ZN14SoftwareSerial5beginEl+0xfe>
 67a:	2e 50       	subi	r18, 0x0E	; 14
 67c:	31 09       	sbc	r19, r1
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	01 c0       	rjmp	.+2      	; 0x684 <_ZN14SoftwareSerial5beginEl+0x104>
 682:	88 0f       	add	r24, r24
 684:	2a 95       	dec	r18
 686:	ea f7       	brpl	.-6      	; 0x682 <_ZN14SoftwareSerial5beginEl+0x102>
 688:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 68a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 68c:	9d 8d       	ldd	r25, Y+29	; 0x1d
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 692:	ce 01       	movw	r24, r28
}
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 698:	0c 94 99 01 	jmp	0x332	; 0x332 <_ZN14SoftwareSerial6listenEv>

0000069c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 93       	push	r18
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	ef 93       	push	r30
 6ae:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 6b0:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <Serial+0x10>
 6b4:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <Serial+0x11>
 6b8:	80 81       	ld	r24, Z
 6ba:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <Serial+0x16>
 6be:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <Serial+0x17>
 6c2:	82 fd       	sbrc	r24, 2
 6c4:	12 c0       	rjmp	.+36     	; 0x6ea <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 6c6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 6c8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <Serial+0x19>
 6cc:	8f 5f       	subi	r24, 0xFF	; 255
 6ce:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 6d0:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <Serial+0x1a>
 6d4:	82 17       	cp	r24, r18
 6d6:	51 f0       	breq	.+20     	; 0x6ec <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 6d8:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <Serial+0x19>
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	e0 53       	subi	r30, 0x30	; 48
 6e0:	fe 4f       	sbci	r31, 0xFE	; 254
 6e2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 6e4:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <Serial+0x19>
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 6ea:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	2f 91       	pop	r18
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	2f 93       	push	r18
 70c:	3f 93       	push	r19
 70e:	4f 93       	push	r20
 710:	5f 93       	push	r21
 712:	6f 93       	push	r22
 714:	7f 93       	push	r23
 716:	8f 93       	push	r24
 718:	9f 93       	push	r25
 71a:	af 93       	push	r26
 71c:	bf 93       	push	r27
 71e:	ef 93       	push	r30
 720:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 722:	80 ed       	ldi	r24, 0xD0	; 208
 724:	91 e0       	ldi	r25, 0x01	; 1
 726:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 72a:	ff 91       	pop	r31
 72c:	ef 91       	pop	r30
 72e:	bf 91       	pop	r27
 730:	af 91       	pop	r26
 732:	9f 91       	pop	r25
 734:	8f 91       	pop	r24
 736:	7f 91       	pop	r23
 738:	6f 91       	pop	r22
 73a:	5f 91       	pop	r21
 73c:	4f 91       	pop	r20
 73e:	3f 91       	pop	r19
 740:	2f 91       	pop	r18
 742:	0f 90       	pop	r0
 744:	0f be       	out	0x3f, r0	; 63
 746:	0f 90       	pop	r0
 748:	1f 90       	pop	r1
 74a:	18 95       	reti

0000074c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 74c:	80 ed       	ldi	r24, 0xD0	; 208
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	0e 94 91 05 	call	0xb22	; 0xb22 <_ZN14HardwareSerial9availableEv>
 754:	21 e0       	ldi	r18, 0x01	; 1
 756:	89 2b       	or	r24, r25
 758:	09 f4       	brne	.+2      	; 0x75c <_Z17Serial0_availablev+0x10>
 75a:	20 e0       	ldi	r18, 0x00	; 0
}
 75c:	82 2f       	mov	r24, r18
 75e:	08 95       	ret

00000760 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 760:	e0 ed       	ldi	r30, 0xD0	; 208
 762:	f1 e0       	ldi	r31, 0x01	; 1
 764:	13 82       	std	Z+3, r1	; 0x03
 766:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 768:	88 ee       	ldi	r24, 0xE8	; 232
 76a:	93 e0       	ldi	r25, 0x03	; 3
 76c:	a0 e0       	ldi	r26, 0x00	; 0
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	84 83       	std	Z+4, r24	; 0x04
 772:	95 83       	std	Z+5, r25	; 0x05
 774:	a6 83       	std	Z+6, r26	; 0x06
 776:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 778:	8f e3       	ldi	r24, 0x3F	; 63
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	91 83       	std	Z+1, r25	; 0x01
 77e:	80 83       	st	Z, r24
 780:	85 ec       	ldi	r24, 0xC5	; 197
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	95 87       	std	Z+13, r25	; 0x0d
 786:	84 87       	std	Z+12, r24	; 0x0c
 788:	84 ec       	ldi	r24, 0xC4	; 196
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	97 87       	std	Z+15, r25	; 0x0f
 78e:	86 87       	std	Z+14, r24	; 0x0e
 790:	80 ec       	ldi	r24, 0xC0	; 192
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	91 8b       	std	Z+17, r25	; 0x11
 796:	80 8b       	std	Z+16, r24	; 0x10
 798:	81 ec       	ldi	r24, 0xC1	; 193
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	93 8b       	std	Z+19, r25	; 0x13
 79e:	82 8b       	std	Z+18, r24	; 0x12
 7a0:	82 ec       	ldi	r24, 0xC2	; 194
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	95 8b       	std	Z+21, r25	; 0x15
 7a6:	84 8b       	std	Z+20, r24	; 0x14
 7a8:	86 ec       	ldi	r24, 0xC6	; 198
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	97 8b       	std	Z+23, r25	; 0x17
 7ae:	86 8b       	std	Z+22, r24	; 0x16
 7b0:	11 8e       	std	Z+25, r1	; 0x19
 7b2:	12 8e       	std	Z+26, r1	; 0x1a
 7b4:	13 8e       	std	Z+27, r1	; 0x1b
 7b6:	14 8e       	std	Z+28, r1	; 0x1c
 7b8:	08 95       	ret

000007ba <initVariant>:
 7ba:	08 95       	ret

000007bc <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 7bc:	0e 94 c2 04 	call	0x984	; 0x984 <init>

	initVariant();
 7c0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 7c4:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 7c8:	ce ec       	ldi	r28, 0xCE	; 206
 7ca:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
 7cc:	0e 94 c2 00 	call	0x184	; 0x184 <loop>
		if (serialEventRun) serialEventRun();
 7d0:	20 97       	sbiw	r28, 0x00	; 0
 7d2:	e1 f3       	breq	.-8      	; 0x7cc <main+0x10>
 7d4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_Z14serialEventRunv>
 7d8:	f9 cf       	rjmp	.-14     	; 0x7cc <main+0x10>

000007da <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 7da:	cf 92       	push	r12
 7dc:	df 92       	push	r13
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
 7ea:	6c 01       	movw	r12, r24
 7ec:	7a 01       	movw	r14, r20
 7ee:	8b 01       	movw	r16, r22
  size_t n = 0;
 7f0:	c0 e0       	ldi	r28, 0x00	; 0
 7f2:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 7f4:	ce 15       	cp	r28, r14
 7f6:	df 05       	cpc	r29, r15
 7f8:	81 f0       	breq	.+32     	; 0x81a <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 7fa:	d8 01       	movw	r26, r16
 7fc:	6d 91       	ld	r22, X+
 7fe:	8d 01       	movw	r16, r26
 800:	d6 01       	movw	r26, r12
 802:	ed 91       	ld	r30, X+
 804:	fc 91       	ld	r31, X
 806:	01 90       	ld	r0, Z+
 808:	f0 81       	ld	r31, Z
 80a:	e0 2d       	mov	r30, r0
 80c:	c6 01       	movw	r24, r12
 80e:	09 95       	icall
 810:	89 2b       	or	r24, r25
 812:	11 f0       	breq	.+4      	; 0x818 <_ZN5Print5writeEPKhj+0x3e>
 814:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 816:	ee cf       	rjmp	.-36     	; 0x7f4 <_ZN5Print5writeEPKhj+0x1a>
 818:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 81a:	c7 01       	movw	r24, r14
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	ff 90       	pop	r15
 826:	ef 90       	pop	r14
 828:	df 90       	pop	r13
 82a:	cf 90       	pop	r12
 82c:	08 95       	ret

0000082e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 82e:	1f 92       	push	r1
 830:	0f 92       	push	r0
 832:	0f b6       	in	r0, 0x3f	; 63
 834:	0f 92       	push	r0
 836:	11 24       	eor	r1, r1
 838:	2f 93       	push	r18
 83a:	3f 93       	push	r19
 83c:	8f 93       	push	r24
 83e:	9f 93       	push	r25
 840:	af 93       	push	r26
 842:	bf 93       	push	r27
 844:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <timer0_millis>
 848:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <timer0_millis+0x1>
 84c:	a0 91 70 02 	lds	r26, 0x0270	; 0x800270 <timer0_millis+0x2>
 850:	b0 91 71 02 	lds	r27, 0x0271	; 0x800271 <timer0_millis+0x3>
 854:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <timer0_fract>
 858:	23 e0       	ldi	r18, 0x03	; 3
 85a:	23 0f       	add	r18, r19
 85c:	2d 37       	cpi	r18, 0x7D	; 125
 85e:	20 f4       	brcc	.+8      	; 0x868 <__vector_16+0x3a>
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	a1 1d       	adc	r26, r1
 864:	b1 1d       	adc	r27, r1
 866:	05 c0       	rjmp	.+10     	; 0x872 <__vector_16+0x44>
 868:	26 e8       	ldi	r18, 0x86	; 134
 86a:	23 0f       	add	r18, r19
 86c:	02 96       	adiw	r24, 0x02	; 2
 86e:	a1 1d       	adc	r26, r1
 870:	b1 1d       	adc	r27, r1
 872:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <timer0_fract>
 876:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <timer0_millis>
 87a:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <timer0_millis+0x1>
 87e:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <timer0_millis+0x2>
 882:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <timer0_millis+0x3>
 886:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <timer0_overflow_count>
 88a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <timer0_overflow_count+0x1>
 88e:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <timer0_overflow_count+0x2>
 892:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <timer0_overflow_count+0x3>
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	a1 1d       	adc	r26, r1
 89a:	b1 1d       	adc	r27, r1
 89c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <timer0_overflow_count>
 8a0:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <timer0_overflow_count+0x1>
 8a4:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <timer0_overflow_count+0x2>
 8a8:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <timer0_overflow_count+0x3>
 8ac:	bf 91       	pop	r27
 8ae:	af 91       	pop	r26
 8b0:	9f 91       	pop	r25
 8b2:	8f 91       	pop	r24
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	0f 90       	pop	r0
 8be:	1f 90       	pop	r1
 8c0:	18 95       	reti

000008c2 <micros>:
 8c2:	3f b7       	in	r19, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <timer0_overflow_count>
 8ca:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <timer0_overflow_count+0x1>
 8ce:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <timer0_overflow_count+0x2>
 8d2:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <timer0_overflow_count+0x3>
 8d6:	26 b5       	in	r18, 0x26	; 38
 8d8:	a8 9b       	sbis	0x15, 0	; 21
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <micros+0x24>
 8dc:	2f 3f       	cpi	r18, 0xFF	; 255
 8de:	19 f0       	breq	.+6      	; 0x8e6 <micros+0x24>
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	a1 1d       	adc	r26, r1
 8e4:	b1 1d       	adc	r27, r1
 8e6:	3f bf       	out	0x3f, r19	; 63
 8e8:	ba 2f       	mov	r27, r26
 8ea:	a9 2f       	mov	r26, r25
 8ec:	98 2f       	mov	r25, r24
 8ee:	88 27       	eor	r24, r24
 8f0:	82 0f       	add	r24, r18
 8f2:	91 1d       	adc	r25, r1
 8f4:	a1 1d       	adc	r26, r1
 8f6:	b1 1d       	adc	r27, r1
 8f8:	bc 01       	movw	r22, r24
 8fa:	cd 01       	movw	r24, r26
 8fc:	42 e0       	ldi	r20, 0x02	; 2
 8fe:	66 0f       	add	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	4a 95       	dec	r20
 908:	d1 f7       	brne	.-12     	; 0x8fe <micros+0x3c>
 90a:	08 95       	ret

0000090c <delay>:
 90c:	8f 92       	push	r8
 90e:	9f 92       	push	r9
 910:	af 92       	push	r10
 912:	bf 92       	push	r11
 914:	cf 92       	push	r12
 916:	df 92       	push	r13
 918:	ef 92       	push	r14
 91a:	ff 92       	push	r15
 91c:	6b 01       	movw	r12, r22
 91e:	7c 01       	movw	r14, r24
 920:	0e 94 61 04 	call	0x8c2	; 0x8c2 <micros>
 924:	4b 01       	movw	r8, r22
 926:	5c 01       	movw	r10, r24
 928:	c1 14       	cp	r12, r1
 92a:	d1 04       	cpc	r13, r1
 92c:	e1 04       	cpc	r14, r1
 92e:	f1 04       	cpc	r15, r1
 930:	01 f1       	breq	.+64     	; 0x972 <delay+0x66>
 932:	0e 94 66 06 	call	0xccc	; 0xccc <yield>
 936:	0e 94 61 04 	call	0x8c2	; 0x8c2 <micros>
 93a:	dc 01       	movw	r26, r24
 93c:	cb 01       	movw	r24, r22
 93e:	88 19       	sub	r24, r8
 940:	99 09       	sbc	r25, r9
 942:	aa 09       	sbc	r26, r10
 944:	bb 09       	sbc	r27, r11
 946:	88 3e       	cpi	r24, 0xE8	; 232
 948:	93 40       	sbci	r25, 0x03	; 3
 94a:	a1 05       	cpc	r26, r1
 94c:	b1 05       	cpc	r27, r1
 94e:	60 f3       	brcs	.-40     	; 0x928 <delay+0x1c>
 950:	21 e0       	ldi	r18, 0x01	; 1
 952:	c2 1a       	sub	r12, r18
 954:	d1 08       	sbc	r13, r1
 956:	e1 08       	sbc	r14, r1
 958:	f1 08       	sbc	r15, r1
 95a:	88 ee       	ldi	r24, 0xE8	; 232
 95c:	88 0e       	add	r8, r24
 95e:	83 e0       	ldi	r24, 0x03	; 3
 960:	98 1e       	adc	r9, r24
 962:	a1 1c       	adc	r10, r1
 964:	b1 1c       	adc	r11, r1
 966:	c1 14       	cp	r12, r1
 968:	d1 04       	cpc	r13, r1
 96a:	e1 04       	cpc	r14, r1
 96c:	f1 04       	cpc	r15, r1
 96e:	19 f7       	brne	.-58     	; 0x936 <delay+0x2a>
 970:	db cf       	rjmp	.-74     	; 0x928 <delay+0x1c>
 972:	ff 90       	pop	r15
 974:	ef 90       	pop	r14
 976:	df 90       	pop	r13
 978:	cf 90       	pop	r12
 97a:	bf 90       	pop	r11
 97c:	af 90       	pop	r10
 97e:	9f 90       	pop	r9
 980:	8f 90       	pop	r8
 982:	08 95       	ret

00000984 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 984:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 986:	84 b5       	in	r24, 0x24	; 36
 988:	82 60       	ori	r24, 0x02	; 2
 98a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 98c:	84 b5       	in	r24, 0x24	; 36
 98e:	81 60       	ori	r24, 0x01	; 1
 990:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 992:	85 b5       	in	r24, 0x25	; 37
 994:	82 60       	ori	r24, 0x02	; 2
 996:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 998:	85 b5       	in	r24, 0x25	; 37
 99a:	81 60       	ori	r24, 0x01	; 1
 99c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 99e:	ee e6       	ldi	r30, 0x6E	; 110
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	81 60       	ori	r24, 0x01	; 1
 9a6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9a8:	e1 e8       	ldi	r30, 0x81	; 129
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9ae:	80 81       	ld	r24, Z
 9b0:	82 60       	ori	r24, 0x02	; 2
 9b2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9b4:	80 81       	ld	r24, Z
 9b6:	81 60       	ori	r24, 0x01	; 1
 9b8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9ba:	e0 e8       	ldi	r30, 0x80	; 128
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	81 60       	ori	r24, 0x01	; 1
 9c2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9c4:	e1 eb       	ldi	r30, 0xB1	; 177
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
 9ca:	84 60       	ori	r24, 0x04	; 4
 9cc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9ce:	e0 eb       	ldi	r30, 0xB0	; 176
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	81 60       	ori	r24, 0x01	; 1
 9d6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 9d8:	ea e7       	ldi	r30, 0x7A	; 122
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	80 81       	ld	r24, Z
 9de:	84 60       	ori	r24, 0x04	; 4
 9e0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 9e2:	80 81       	ld	r24, Z
 9e4:	82 60       	ori	r24, 0x02	; 2
 9e6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9e8:	80 81       	ld	r24, Z
 9ea:	81 60       	ori	r24, 0x01	; 1
 9ec:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9ee:	80 81       	ld	r24, Z
 9f0:	80 68       	ori	r24, 0x80	; 128
 9f2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9f4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 9f8:	08 95       	ret

000009fa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 9fa:	83 30       	cpi	r24, 0x03	; 3
 9fc:	81 f0       	breq	.+32     	; 0xa1e <turnOffPWM+0x24>
 9fe:	28 f4       	brcc	.+10     	; 0xa0a <turnOffPWM+0x10>
 a00:	81 30       	cpi	r24, 0x01	; 1
 a02:	99 f0       	breq	.+38     	; 0xa2a <turnOffPWM+0x30>
 a04:	82 30       	cpi	r24, 0x02	; 2
 a06:	a1 f0       	breq	.+40     	; 0xa30 <turnOffPWM+0x36>
 a08:	08 95       	ret
 a0a:	87 30       	cpi	r24, 0x07	; 7
 a0c:	a9 f0       	breq	.+42     	; 0xa38 <turnOffPWM+0x3e>
 a0e:	88 30       	cpi	r24, 0x08	; 8
 a10:	b9 f0       	breq	.+46     	; 0xa40 <turnOffPWM+0x46>
 a12:	84 30       	cpi	r24, 0x04	; 4
 a14:	d1 f4       	brne	.+52     	; 0xa4a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a16:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a1a:	8f 7d       	andi	r24, 0xDF	; 223
 a1c:	03 c0       	rjmp	.+6      	; 0xa24 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a1e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a22:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a24:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 a28:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a2a:	84 b5       	in	r24, 0x24	; 36
 a2c:	8f 77       	andi	r24, 0x7F	; 127
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 a30:	84 b5       	in	r24, 0x24	; 36
 a32:	8f 7d       	andi	r24, 0xDF	; 223
 a34:	84 bd       	out	0x24, r24	; 36
 a36:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 a38:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a3c:	8f 77       	andi	r24, 0x7F	; 127
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 a40:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a44:	8f 7d       	andi	r24, 0xDF	; 223
 a46:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a4a:	08 95       	ret

00000a4c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	fc 01       	movw	r30, r24
 a54:	e4 58       	subi	r30, 0x84	; 132
 a56:	ff 4f       	sbci	r31, 0xFF	; 255
 a58:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a5a:	fc 01       	movw	r30, r24
 a5c:	e0 57       	subi	r30, 0x70	; 112
 a5e:	ff 4f       	sbci	r31, 0xFF	; 255
 a60:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a62:	88 23       	and	r24, r24
 a64:	61 f1       	breq	.+88     	; 0xabe <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	88 0f       	add	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	fc 01       	movw	r30, r24
 a6e:	e8 54       	subi	r30, 0x48	; 72
 a70:	ff 4f       	sbci	r31, 0xFF	; 255
 a72:	c5 91       	lpm	r28, Z+
 a74:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a76:	fc 01       	movw	r30, r24
 a78:	e2 55       	subi	r30, 0x52	; 82
 a7a:	ff 4f       	sbci	r31, 0xFF	; 255
 a7c:	a5 91       	lpm	r26, Z+
 a7e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a80:	61 11       	cpse	r22, r1
 a82:	09 c0       	rjmp	.+18     	; 0xa96 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a84:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a86:	f8 94       	cli
		*reg &= ~bit;
 a88:	88 81       	ld	r24, Y
 a8a:	20 95       	com	r18
 a8c:	82 23       	and	r24, r18
 a8e:	88 83       	st	Y, r24
		*out &= ~bit;
 a90:	ec 91       	ld	r30, X
 a92:	2e 23       	and	r18, r30
 a94:	0b c0       	rjmp	.+22     	; 0xaac <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a96:	62 30       	cpi	r22, 0x02	; 2
 a98:	61 f4       	brne	.+24     	; 0xab2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 a9a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a9c:	f8 94       	cli
		*reg &= ~bit;
 a9e:	88 81       	ld	r24, Y
 aa0:	32 2f       	mov	r19, r18
 aa2:	30 95       	com	r19
 aa4:	83 23       	and	r24, r19
 aa6:	88 83       	st	Y, r24
		*out |= bit;
 aa8:	ec 91       	ld	r30, X
 aaa:	2e 2b       	or	r18, r30
 aac:	2c 93       	st	X, r18
		SREG = oldSREG;
 aae:	9f bf       	out	0x3f, r25	; 63
 ab0:	06 c0       	rjmp	.+12     	; 0xabe <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 ab2:	8f b7       	in	r24, 0x3f	; 63
                cli();
 ab4:	f8 94       	cli
		*reg |= bit;
 ab6:	e8 81       	ld	r30, Y
 ab8:	2e 2b       	or	r18, r30
 aba:	28 83       	st	Y, r18
		SREG = oldSREG;
 abc:	8f bf       	out	0x3f, r24	; 63
	}
}
 abe:	df 91       	pop	r29
 ac0:	cf 91       	pop	r28
 ac2:	08 95       	ret

00000ac4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 ac4:	1f 93       	push	r17
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 aca:	28 2f       	mov	r18, r24
 acc:	30 e0       	ldi	r19, 0x00	; 0
 ace:	f9 01       	movw	r30, r18
 ad0:	e8 59       	subi	r30, 0x98	; 152
 ad2:	ff 4f       	sbci	r31, 0xFF	; 255
 ad4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 ad6:	f9 01       	movw	r30, r18
 ad8:	e4 58       	subi	r30, 0x84	; 132
 ada:	ff 4f       	sbci	r31, 0xFF	; 255
 adc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 ade:	f9 01       	movw	r30, r18
 ae0:	e0 57       	subi	r30, 0x70	; 112
 ae2:	ff 4f       	sbci	r31, 0xFF	; 255
 ae4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 ae6:	cc 23       	and	r28, r28
 ae8:	c1 f0       	breq	.+48     	; 0xb1a <digitalWrite+0x56>
 aea:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 aec:	81 11       	cpse	r24, r1
 aee:	0e 94 fd 04 	call	0x9fa	; 0x9fa <turnOffPWM>

	out = portOutputRegister(port);
 af2:	ec 2f       	mov	r30, r28
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	ee 0f       	add	r30, r30
 af8:	ff 1f       	adc	r31, r31
 afa:	e2 55       	subi	r30, 0x52	; 82
 afc:	ff 4f       	sbci	r31, 0xFF	; 255
 afe:	a5 91       	lpm	r26, Z+
 b00:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 b02:	9f b7       	in	r25, 0x3f	; 63
	cli();
 b04:	f8 94       	cli

	if (val == LOW) {
 b06:	11 11       	cpse	r17, r1
 b08:	04 c0       	rjmp	.+8      	; 0xb12 <digitalWrite+0x4e>
		*out &= ~bit;
 b0a:	8c 91       	ld	r24, X
 b0c:	d0 95       	com	r29
 b0e:	d8 23       	and	r29, r24
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <digitalWrite+0x52>
	} else {
		*out |= bit;
 b12:	ec 91       	ld	r30, X
 b14:	de 2b       	or	r29, r30
 b16:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 b18:	9f bf       	out	0x3f, r25	; 63
}
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	1f 91       	pop	r17
 b20:	08 95       	ret

00000b22 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 b22:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 b24:	91 8d       	ldd	r25, Z+25	; 0x19
 b26:	22 8d       	ldd	r18, Z+26	; 0x1a
 b28:	89 2f       	mov	r24, r25
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	80 5c       	subi	r24, 0xC0	; 192
 b2e:	9f 4f       	sbci	r25, 0xFF	; 255
 b30:	82 1b       	sub	r24, r18
 b32:	91 09       	sbc	r25, r1
}
 b34:	8f 73       	andi	r24, 0x3F	; 63
 b36:	99 27       	eor	r25, r25
 b38:	08 95       	ret

00000b3a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 b3a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 b3c:	91 8d       	ldd	r25, Z+25	; 0x19
 b3e:	82 8d       	ldd	r24, Z+26	; 0x1a
 b40:	98 17       	cp	r25, r24
 b42:	31 f0       	breq	.+12     	; 0xb50 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 b44:	82 8d       	ldd	r24, Z+26	; 0x1a
 b46:	e8 0f       	add	r30, r24
 b48:	f1 1d       	adc	r31, r1
 b4a:	85 8d       	ldd	r24, Z+29	; 0x1d
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 b50:	8f ef       	ldi	r24, 0xFF	; 255
 b52:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 b54:	08 95       	ret

00000b56 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 b56:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 b58:	91 8d       	ldd	r25, Z+25	; 0x19
 b5a:	82 8d       	ldd	r24, Z+26	; 0x1a
 b5c:	98 17       	cp	r25, r24
 b5e:	61 f0       	breq	.+24     	; 0xb78 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 b60:	82 8d       	ldd	r24, Z+26	; 0x1a
 b62:	df 01       	movw	r26, r30
 b64:	a8 0f       	add	r26, r24
 b66:	b1 1d       	adc	r27, r1
 b68:	5d 96       	adiw	r26, 0x1d	; 29
 b6a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 b6c:	92 8d       	ldd	r25, Z+26	; 0x1a
 b6e:	9f 5f       	subi	r25, 0xFF	; 255
 b70:	9f 73       	andi	r25, 0x3F	; 63
 b72:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 b78:	8f ef       	ldi	r24, 0xFF	; 255
 b7a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 b7c:	08 95       	ret

00000b7e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 b7e:	fc 01       	movw	r30, r24
 b80:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 b82:	44 8d       	ldd	r20, Z+28	; 0x1c
 b84:	25 2f       	mov	r18, r21
 b86:	30 e0       	ldi	r19, 0x00	; 0
 b88:	84 2f       	mov	r24, r20
 b8a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 b8c:	82 1b       	sub	r24, r18
 b8e:	93 0b       	sbc	r25, r19
 b90:	54 17       	cp	r21, r20
 b92:	10 f0       	brcs	.+4      	; 0xb98 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 b94:	cf 96       	adiw	r24, 0x3f	; 63
 b96:	08 95       	ret
  return tail - head - 1;
 b98:	01 97       	sbiw	r24, 0x01	; 1
}
 b9a:	08 95       	ret

00000b9c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 b9c:	86 ea       	ldi	r24, 0xA6	; 166
 b9e:	93 e0       	ldi	r25, 0x03	; 3
 ba0:	89 2b       	or	r24, r25
 ba2:	49 f0       	breq	.+18     	; 0xbb6 <_Z14serialEventRunv+0x1a>
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	89 2b       	or	r24, r25
 baa:	29 f0       	breq	.+10     	; 0xbb6 <_Z14serialEventRunv+0x1a>
 bac:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z17Serial0_availablev>
 bb0:	81 11       	cpse	r24, r1
 bb2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 bb6:	08 95       	ret

00000bb8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 bb8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 bba:	84 8d       	ldd	r24, Z+28	; 0x1c
 bbc:	df 01       	movw	r26, r30
 bbe:	a8 0f       	add	r26, r24
 bc0:	b1 1d       	adc	r27, r1
 bc2:	a3 5a       	subi	r26, 0xA3	; 163
 bc4:	bf 4f       	sbci	r27, 0xFF	; 255
 bc6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 bc8:	84 8d       	ldd	r24, Z+28	; 0x1c
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	01 96       	adiw	r24, 0x01	; 1
 bce:	8f 73       	andi	r24, 0x3F	; 63
 bd0:	99 27       	eor	r25, r25
 bd2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 bd4:	a6 89       	ldd	r26, Z+22	; 0x16
 bd6:	b7 89       	ldd	r27, Z+23	; 0x17
 bd8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 bda:	a0 89       	ldd	r26, Z+16	; 0x10
 bdc:	b1 89       	ldd	r27, Z+17	; 0x11
 bde:	8c 91       	ld	r24, X
 be0:	80 64       	ori	r24, 0x40	; 64
 be2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 be4:	93 8d       	ldd	r25, Z+27	; 0x1b
 be6:	84 8d       	ldd	r24, Z+28	; 0x1c
 be8:	98 13       	cpse	r25, r24
 bea:	06 c0       	rjmp	.+12     	; 0xbf8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 bec:	02 88       	ldd	r0, Z+18	; 0x12
 bee:	f3 89       	ldd	r31, Z+19	; 0x13
 bf0:	e0 2d       	mov	r30, r0
 bf2:	80 81       	ld	r24, Z
 bf4:	8f 7d       	andi	r24, 0xDF	; 223
 bf6:	80 83       	st	Z, r24
 bf8:	08 95       	ret

00000bfa <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 bfa:	ef 92       	push	r14
 bfc:	ff 92       	push	r15
 bfe:	0f 93       	push	r16
 c00:	1f 93       	push	r17
 c02:	cf 93       	push	r28
 c04:	df 93       	push	r29
 c06:	ec 01       	movw	r28, r24
  _written = true;
 c08:	81 e0       	ldi	r24, 0x01	; 1
 c0a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 c0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 c0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 c10:	98 13       	cpse	r25, r24
 c12:	05 c0       	rjmp	.+10     	; 0xc1e <_ZN14HardwareSerial5writeEh+0x24>
 c14:	e8 89       	ldd	r30, Y+16	; 0x10
 c16:	f9 89       	ldd	r31, Y+17	; 0x11
 c18:	80 81       	ld	r24, Z
 c1a:	85 fd       	sbrc	r24, 5
 c1c:	24 c0       	rjmp	.+72     	; 0xc66 <_ZN14HardwareSerial5writeEh+0x6c>
 c1e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 c20:	0b 8d       	ldd	r16, Y+27	; 0x1b
 c22:	10 e0       	ldi	r17, 0x00	; 0
 c24:	0f 5f       	subi	r16, 0xFF	; 255
 c26:	1f 4f       	sbci	r17, 0xFF	; 255
 c28:	0f 73       	andi	r16, 0x3F	; 63
 c2a:	11 27       	eor	r17, r17
 c2c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 c2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 c30:	e8 12       	cpse	r14, r24
 c32:	0c c0       	rjmp	.+24     	; 0xc4c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 c34:	0f b6       	in	r0, 0x3f	; 63
 c36:	07 fc       	sbrc	r0, 7
 c38:	fa cf       	rjmp	.-12     	; 0xc2e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 c3a:	e8 89       	ldd	r30, Y+16	; 0x10
 c3c:	f9 89       	ldd	r31, Y+17	; 0x11
 c3e:	80 81       	ld	r24, Z
 c40:	85 ff       	sbrs	r24, 5
 c42:	f5 cf       	rjmp	.-22     	; 0xc2e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 c44:	ce 01       	movw	r24, r28
 c46:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 c4a:	f1 cf       	rjmp	.-30     	; 0xc2e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 c4e:	fe 01       	movw	r30, r28
 c50:	e8 0f       	add	r30, r24
 c52:	f1 1d       	adc	r31, r1
 c54:	e3 5a       	subi	r30, 0xA3	; 163
 c56:	ff 4f       	sbci	r31, 0xFF	; 255
 c58:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 c5a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 c5c:	ea 89       	ldd	r30, Y+18	; 0x12
 c5e:	fb 89       	ldd	r31, Y+19	; 0x13
 c60:	80 81       	ld	r24, Z
 c62:	80 62       	ori	r24, 0x20	; 32
 c64:	07 c0       	rjmp	.+14     	; 0xc74 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 c66:	ee 89       	ldd	r30, Y+22	; 0x16
 c68:	ff 89       	ldd	r31, Y+23	; 0x17
 c6a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 c6c:	e8 89       	ldd	r30, Y+16	; 0x10
 c6e:	f9 89       	ldd	r31, Y+17	; 0x11
 c70:	80 81       	ld	r24, Z
 c72:	80 64       	ori	r24, 0x40	; 64
 c74:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	df 91       	pop	r29
 c7c:	cf 91       	pop	r28
 c7e:	1f 91       	pop	r17
 c80:	0f 91       	pop	r16
 c82:	ff 90       	pop	r15
 c84:	ef 90       	pop	r14
 c86:	08 95       	ret

00000c88 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 c88:	cf 93       	push	r28
 c8a:	df 93       	push	r29
 c8c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 c8e:	88 8d       	ldd	r24, Y+24	; 0x18
 c90:	88 23       	and	r24, r24
 c92:	c9 f0       	breq	.+50     	; 0xcc6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 c94:	ea 89       	ldd	r30, Y+18	; 0x12
 c96:	fb 89       	ldd	r31, Y+19	; 0x13
 c98:	80 81       	ld	r24, Z
 c9a:	85 fd       	sbrc	r24, 5
 c9c:	05 c0       	rjmp	.+10     	; 0xca8 <_ZN14HardwareSerial5flushEv+0x20>
 c9e:	a8 89       	ldd	r26, Y+16	; 0x10
 ca0:	b9 89       	ldd	r27, Y+17	; 0x11
 ca2:	8c 91       	ld	r24, X
 ca4:	86 fd       	sbrc	r24, 6
 ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 ca8:	0f b6       	in	r0, 0x3f	; 63
 caa:	07 fc       	sbrc	r0, 7
 cac:	f5 cf       	rjmp	.-22     	; 0xc98 <_ZN14HardwareSerial5flushEv+0x10>
 cae:	80 81       	ld	r24, Z
 cb0:	85 ff       	sbrs	r24, 5
 cb2:	f2 cf       	rjmp	.-28     	; 0xc98 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 cb4:	a8 89       	ldd	r26, Y+16	; 0x10
 cb6:	b9 89       	ldd	r27, Y+17	; 0x11
 cb8:	8c 91       	ld	r24, X
 cba:	85 ff       	sbrs	r24, 5
 cbc:	ed cf       	rjmp	.-38     	; 0xc98 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 cbe:	ce 01       	movw	r24, r28
 cc0:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 cc4:	e7 cf       	rjmp	.-50     	; 0xc94 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
 cca:	08 95       	ret

00000ccc <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 ccc:	08 95       	ret

00000cce <__divmodhi4>:
 cce:	97 fb       	bst	r25, 7
 cd0:	07 2e       	mov	r0, r23
 cd2:	16 f4       	brtc	.+4      	; 0xcd8 <__divmodhi4+0xa>
 cd4:	00 94       	com	r0
 cd6:	07 d0       	rcall	.+14     	; 0xce6 <__divmodhi4_neg1>
 cd8:	77 fd       	sbrc	r23, 7
 cda:	09 d0       	rcall	.+18     	; 0xcee <__divmodhi4_neg2>
 cdc:	0e 94 bc 06 	call	0xd78	; 0xd78 <__udivmodhi4>
 ce0:	07 fc       	sbrc	r0, 7
 ce2:	05 d0       	rcall	.+10     	; 0xcee <__divmodhi4_neg2>
 ce4:	3e f4       	brtc	.+14     	; 0xcf4 <__divmodhi4_exit>

00000ce6 <__divmodhi4_neg1>:
 ce6:	90 95       	com	r25
 ce8:	81 95       	neg	r24
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	08 95       	ret

00000cee <__divmodhi4_neg2>:
 cee:	70 95       	com	r23
 cf0:	61 95       	neg	r22
 cf2:	7f 4f       	sbci	r23, 0xFF	; 255

00000cf4 <__divmodhi4_exit>:
 cf4:	08 95       	ret

00000cf6 <__udivmodsi4>:
 cf6:	a1 e2       	ldi	r26, 0x21	; 33
 cf8:	1a 2e       	mov	r1, r26
 cfa:	aa 1b       	sub	r26, r26
 cfc:	bb 1b       	sub	r27, r27
 cfe:	fd 01       	movw	r30, r26
 d00:	0d c0       	rjmp	.+26     	; 0xd1c <__udivmodsi4_ep>

00000d02 <__udivmodsi4_loop>:
 d02:	aa 1f       	adc	r26, r26
 d04:	bb 1f       	adc	r27, r27
 d06:	ee 1f       	adc	r30, r30
 d08:	ff 1f       	adc	r31, r31
 d0a:	a2 17       	cp	r26, r18
 d0c:	b3 07       	cpc	r27, r19
 d0e:	e4 07       	cpc	r30, r20
 d10:	f5 07       	cpc	r31, r21
 d12:	20 f0       	brcs	.+8      	; 0xd1c <__udivmodsi4_ep>
 d14:	a2 1b       	sub	r26, r18
 d16:	b3 0b       	sbc	r27, r19
 d18:	e4 0b       	sbc	r30, r20
 d1a:	f5 0b       	sbc	r31, r21

00000d1c <__udivmodsi4_ep>:
 d1c:	66 1f       	adc	r22, r22
 d1e:	77 1f       	adc	r23, r23
 d20:	88 1f       	adc	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	1a 94       	dec	r1
 d26:	69 f7       	brne	.-38     	; 0xd02 <__udivmodsi4_loop>
 d28:	60 95       	com	r22
 d2a:	70 95       	com	r23
 d2c:	80 95       	com	r24
 d2e:	90 95       	com	r25
 d30:	9b 01       	movw	r18, r22
 d32:	ac 01       	movw	r20, r24
 d34:	bd 01       	movw	r22, r26
 d36:	cf 01       	movw	r24, r30
 d38:	08 95       	ret

00000d3a <__divmodsi4>:
 d3a:	05 2e       	mov	r0, r21
 d3c:	97 fb       	bst	r25, 7
 d3e:	1e f4       	brtc	.+6      	; 0xd46 <__divmodsi4+0xc>
 d40:	00 94       	com	r0
 d42:	0e 94 b4 06 	call	0xd68	; 0xd68 <__negsi2>
 d46:	57 fd       	sbrc	r21, 7
 d48:	07 d0       	rcall	.+14     	; 0xd58 <__divmodsi4_neg2>
 d4a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__udivmodsi4>
 d4e:	07 fc       	sbrc	r0, 7
 d50:	03 d0       	rcall	.+6      	; 0xd58 <__divmodsi4_neg2>
 d52:	4e f4       	brtc	.+18     	; 0xd66 <__divmodsi4_exit>
 d54:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__negsi2>

00000d58 <__divmodsi4_neg2>:
 d58:	50 95       	com	r21
 d5a:	40 95       	com	r20
 d5c:	30 95       	com	r19
 d5e:	21 95       	neg	r18
 d60:	3f 4f       	sbci	r19, 0xFF	; 255
 d62:	4f 4f       	sbci	r20, 0xFF	; 255
 d64:	5f 4f       	sbci	r21, 0xFF	; 255

00000d66 <__divmodsi4_exit>:
 d66:	08 95       	ret

00000d68 <__negsi2>:
 d68:	90 95       	com	r25
 d6a:	80 95       	com	r24
 d6c:	70 95       	com	r23
 d6e:	61 95       	neg	r22
 d70:	7f 4f       	sbci	r23, 0xFF	; 255
 d72:	8f 4f       	sbci	r24, 0xFF	; 255
 d74:	9f 4f       	sbci	r25, 0xFF	; 255
 d76:	08 95       	ret

00000d78 <__udivmodhi4>:
 d78:	aa 1b       	sub	r26, r26
 d7a:	bb 1b       	sub	r27, r27
 d7c:	51 e1       	ldi	r21, 0x11	; 17
 d7e:	07 c0       	rjmp	.+14     	; 0xd8e <__udivmodhi4_ep>

00000d80 <__udivmodhi4_loop>:
 d80:	aa 1f       	adc	r26, r26
 d82:	bb 1f       	adc	r27, r27
 d84:	a6 17       	cp	r26, r22
 d86:	b7 07       	cpc	r27, r23
 d88:	10 f0       	brcs	.+4      	; 0xd8e <__udivmodhi4_ep>
 d8a:	a6 1b       	sub	r26, r22
 d8c:	b7 0b       	sbc	r27, r23

00000d8e <__udivmodhi4_ep>:
 d8e:	88 1f       	adc	r24, r24
 d90:	99 1f       	adc	r25, r25
 d92:	5a 95       	dec	r21
 d94:	a9 f7       	brne	.-22     	; 0xd80 <__udivmodhi4_loop>
 d96:	80 95       	com	r24
 d98:	90 95       	com	r25
 d9a:	bc 01       	movw	r22, r24
 d9c:	cd 01       	movw	r24, r26
 d9e:	08 95       	ret

00000da0 <__tablejump2__>:
 da0:	ee 0f       	add	r30, r30
 da2:	ff 1f       	adc	r31, r31
 da4:	05 90       	lpm	r0, Z+
 da6:	f4 91       	lpm	r31, Z
 da8:	e0 2d       	mov	r30, r0
 daa:	09 94       	ijmp

00000dac <__do_global_dtors>:
 dac:	10 e0       	ldi	r17, 0x00	; 0
 dae:	c3 e6       	ldi	r28, 0x63	; 99
 db0:	d0 e0       	ldi	r29, 0x00	; 0
 db2:	04 c0       	rjmp	.+8      	; 0xdbc <__do_global_dtors+0x10>
 db4:	fe 01       	movw	r30, r28
 db6:	0e 94 d0 06 	call	0xda0	; 0xda0 <__tablejump2__>
 dba:	21 96       	adiw	r28, 0x01	; 1
 dbc:	c4 36       	cpi	r28, 0x64	; 100
 dbe:	d1 07       	cpc	r29, r17
 dc0:	c9 f7       	brne	.-14     	; 0xdb4 <__do_global_dtors+0x8>
 dc2:	f8 94       	cli

00000dc4 <__stop_program>:
 dc4:	ff cf       	rjmp	.-2      	; 0xdc4 <__stop_program>
