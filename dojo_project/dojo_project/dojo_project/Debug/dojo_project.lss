
dojo_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000e5a  00000eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000128  0080015c  0080015c  00000f4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a9af  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002061  00000000  00000000  0000bd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002271  00000000  00000000  0000dd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000afc  00000000  00000000  00010010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000285d  00000000  00000000  00010b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003d7e  00000000  00000000  00013369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  000170e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_3>
  10:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_3>
  14:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_3>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_16>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_18>
  4c:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_19>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	a2 00       	.word	0x00a2	; ????
  c4:	cf 03       	fmulsu	r20, r23

000000c6 <__ctors_end>:
  c6:	b0 00       	.word	0x00b0	; ????

000000c8 <__dtors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ea e5       	ldi	r30, 0x5A	; 90
  dc:	fe e0       	ldi	r31, 0x0E	; 14
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	ac 35       	cpi	r26, 0x5C	; 92
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	ac e5       	ldi	r26, 0x5C	; 92
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a4 38       	cpi	r26, 0x84	; 132
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c3 e6       	ldi	r28, 0x63	; 99
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	fe 01       	movw	r30, r28
 106:	0e 94 1a 07 	call	0xe34	; 0xe34 <__tablejump2__>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	d1 07       	cpc	r29, r17
 10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
 110:	0e 94 fd 03 	call	0x7fa	; 0x7fa <main>
 114:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__do_global_dtors>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <setup>:
		break;
		default:
		//do nothing
		break;
	}
}
 11c:	40 e8       	ldi	r20, 0x80	; 128
 11e:	55 e2       	ldi	r21, 0x25	; 37
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	8b e7       	ldi	r24, 0x7B	; 123
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN14SoftwareSerial5beginEl>
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	55 e2       	ldi	r21, 0x25	; 37
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	8c e5       	ldi	r24, 0x5C	; 92
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN14SoftwareSerial5beginEl>
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	87 b9       	out	0x07, r24	; 7
 140:	8a b9       	out	0x0a, r24	; 10
 142:	08 95       	ret

00000144 <_GLOBAL__sub_I_mySerial>:
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8b e7       	ldi	r24, 0x7B	; 123
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN14SoftwareSerialC1Ehhb>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	43 e0       	ldi	r20, 0x03	; 3
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	8c e5       	ldi	r24, 0x5C	; 92
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0c 94 b4 02 	jmp	0x568	; 0x568 <_ZN14SoftwareSerialC1Ehhb>

00000160 <_GLOBAL__sub_D_mySerial>:
 160:	8c e5       	ldi	r24, 0x5C	; 92
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_ZN14SoftwareSerialD1Ev>
 168:	8b e7       	ldi	r24, 0x7B	; 123
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <_ZN14SoftwareSerialD1Ev>

00000170 <_Z11sendCommandi.part.3>:
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d1 e0       	ldi	r29, 0x01	; 1
 178:	68 81       	ld	r22, Y
 17a:	8c e5       	ldi	r24, 0x5C	; 92
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 21 01 	call	0x242	; 0x242 <_ZN14SoftwareSerial5writeEh>
 182:	69 81       	ldd	r22, Y+1	; 0x01
 184:	8c e5       	ldi	r24, 0x5C	; 92
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	0c 94 21 01 	jmp	0x242	; 0x242 <_ZN14SoftwareSerial5writeEh>

00000190 <_Z10readAnswerv>:

int readAnswer()
{
	int incomingByte;
	
	while(!BTSerial.available())
 190:	8c e5       	ldi	r24, 0x5C	; 92
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN14SoftwareSerial9availableEv>
 198:	89 2b       	or	r24, r25
 19a:	d1 f3       	breq	.-12     	; 0x190 <_Z10readAnswerv>
	{/*wait until datas are available to read*/}
	
	incomingByte = BTSerial.read();
 19c:	8c e5       	ldi	r24, 0x5C	; 92
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0c 94 00 01 	jmp	0x200	; 0x200 <_ZN14SoftwareSerial4readEv>

000001a4 <_Z13firstResponsev>:
	//firstResponse();
}

void firstResponse()
{
	while(!BTSerial.available())
 1a4:	8c e5       	ldi	r24, 0x5C	; 92
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN14SoftwareSerial9availableEv>
 1ac:	89 2b       	or	r24, r25
 1ae:	b1 f4       	brne	.+44     	; 0x1dc <_Z13firstResponsev+0x38>
	{
		mySerial.println("do");
 1b0:	66 e2       	ldi	r22, 0x26	; 38
 1b2:	71 e0       	ldi	r23, 0x01	; 1
 1b4:	8b e7       	ldi	r24, 0x7B	; 123
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN5Print7printlnEPKc>
 1bc:	0e 94 b8 00 	call	0x170	; 0x170 <_Z11sendCommandi.part.3>
		sendCommand(1);
		delay(2500);
 1c0:	64 ec       	ldi	r22, 0xC4	; 196
 1c2:	79 e0       	ldi	r23, 0x09	; 9
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <delay>
	//firstResponse();
}

void firstResponse()
{
	while(!BTSerial.available())
 1cc:	eb cf       	rjmp	.-42     	; 0x1a4 <_Z13firstResponsev>
	
	while (1)
	{
		if (readAnswer() == 'O')
		{
			if (readAnswer() == 'K')
 1ce:	0e 94 c8 00 	call	0x190	; 0x190 <_Z10readAnswerv>
 1d2:	8b 34       	cpi	r24, 0x4B	; 75
 1d4:	91 05       	cpc	r25, r1
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <_Z13firstResponsev+0x44>
			{
				break;
			}
			else
			{
				firstResponse();
 1d8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z13firstResponsev>
		delay(2500);
	}
	
	while (1)
	{
		if (readAnswer() == 'O')
 1dc:	0e 94 c8 00 	call	0x190	; 0x190 <_Z10readAnswerv>
 1e0:	8f 34       	cpi	r24, 0x4F	; 79
 1e2:	91 05       	cpc	r25, r1
 1e4:	c9 f7       	brne	.-14     	; 0x1d8 <_Z13firstResponsev+0x34>
 1e6:	f3 cf       	rjmp	.-26     	; 0x1ce <_Z13firstResponsev+0x2a>
 1e8:	08 95       	ret

000001ea <loop>:
{
// 	scan();
// 	delay(2000);
// 	mySerial.println("works!");
// 	delay(1000);
	firstResponse();
 1ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z13firstResponsev>
// 	BTSerial.print("U");
	delay(1000);
 1ee:	68 ee       	ldi	r22, 0xE8	; 232
 1f0:	73 e0       	ldi	r23, 0x03	; 3
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <delay>

000001fa <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 95       	ret

00000200 <_ZN14SoftwareSerial4readEv>:
 200:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <_ZN14SoftwareSerial13active_objectE>
 204:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <_ZN14SoftwareSerial13active_objectE+0x1>
 208:	28 17       	cp	r18, r24
 20a:	39 07       	cpc	r19, r25
 20c:	b9 f4       	brne	.+46     	; 0x23c <_ZN14SoftwareSerial4readEv+0x3c>
 20e:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 212:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_ZN14SoftwareSerial20_receive_buffer_tailE>
 216:	98 17       	cp	r25, r24
 218:	89 f0       	breq	.+34     	; 0x23c <_ZN14SoftwareSerial4readEv+0x3c>
 21a:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	e4 56       	subi	r30, 0x64	; 100
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	80 81       	ld	r24, Z
 226:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	2f 5f       	subi	r18, 0xFF	; 255
 22e:	3f 4f       	sbci	r19, 0xFF	; 255
 230:	2f 73       	andi	r18, 0x3F	; 63
 232:	33 27       	eor	r19, r19
 234:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 95       	ret
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	9f ef       	ldi	r25, 0xFF	; 255
 240:	08 95       	ret

00000242 <_ZN14SoftwareSerial5writeEh>:
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	dc 01       	movw	r26, r24
 24a:	5c 96       	adiw	r26, 0x1c	; 28
 24c:	8d 91       	ld	r24, X+
 24e:	9c 91       	ld	r25, X
 250:	5d 97       	sbiw	r26, 0x1d	; 29
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	39 f4       	brne	.+14     	; 0x264 <_ZN14SoftwareSerial5writeEh+0x22>
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	13 96       	adiw	r26, 0x03	; 3
 25c:	3c 93       	st	X, r19
 25e:	2e 93       	st	-X, r18
 260:	12 97       	sbiw	r26, 0x02	; 2
 262:	3b c0       	rjmp	.+118    	; 0x2da <_ZN14SoftwareSerial5writeEh+0x98>
 264:	51 96       	adiw	r26, 0x11	; 17
 266:	ed 91       	ld	r30, X+
 268:	fc 91       	ld	r31, X
 26a:	52 97       	sbiw	r26, 0x12	; 18
 26c:	50 96       	adiw	r26, 0x10	; 16
 26e:	2c 91       	ld	r18, X
 270:	50 97       	sbiw	r26, 0x10	; 16
 272:	32 2f       	mov	r19, r18
 274:	30 95       	com	r19
 276:	1f b7       	in	r17, 0x3f	; 63
 278:	5e 96       	adiw	r26, 0x1e	; 30
 27a:	4c 91       	ld	r20, X
 27c:	5e 97       	sbiw	r26, 0x1e	; 30
 27e:	74 2f       	mov	r23, r20
 280:	72 70       	andi	r23, 0x02	; 2
 282:	41 fd       	sbrc	r20, 1
 284:	60 95       	com	r22
 286:	f8 94       	cli
 288:	40 81       	ld	r20, Z
 28a:	77 23       	and	r23, r23
 28c:	11 f0       	breq	.+4      	; 0x292 <_ZN14SoftwareSerial5writeEh+0x50>
 28e:	42 2b       	or	r20, r18
 290:	01 c0       	rjmp	.+2      	; 0x294 <_ZN14SoftwareSerial5writeEh+0x52>
 292:	43 23       	and	r20, r19
 294:	40 83       	st	Z, r20
 296:	ec 01       	movw	r28, r24
 298:	21 97       	sbiw	r28, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <_ZN14SoftwareSerial5writeEh+0x56>
 29c:	48 e0       	ldi	r20, 0x08	; 8
 29e:	50 81       	ld	r21, Z
 2a0:	60 ff       	sbrs	r22, 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <_ZN14SoftwareSerial5writeEh+0x66>
 2a4:	52 2b       	or	r21, r18
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <_ZN14SoftwareSerial5writeEh+0x68>
 2a8:	53 23       	and	r21, r19
 2aa:	50 83       	st	Z, r21
 2ac:	ec 01       	movw	r28, r24
 2ae:	21 97       	sbiw	r28, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <_ZN14SoftwareSerial5writeEh+0x6c>
 2b2:	66 95       	lsr	r22
 2b4:	41 50       	subi	r20, 0x01	; 1
 2b6:	99 f7       	brne	.-26     	; 0x29e <_ZN14SoftwareSerial5writeEh+0x5c>
 2b8:	80 81       	ld	r24, Z
 2ba:	77 23       	and	r23, r23
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <_ZN14SoftwareSerial5writeEh+0x82>
 2be:	83 23       	and	r24, r19
 2c0:	80 83       	st	Z, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <_ZN14SoftwareSerial5writeEh+0x86>
 2c4:	28 2b       	or	r18, r24
 2c6:	20 83       	st	Z, r18
 2c8:	1f bf       	out	0x3f, r17	; 63
 2ca:	5c 96       	adiw	r26, 0x1c	; 28
 2cc:	8d 91       	ld	r24, X+
 2ce:	9c 91       	ld	r25, X
 2d0:	5d 97       	sbiw	r26, 0x1d	; 29
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <_ZN14SoftwareSerial5writeEh+0x90>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	08 95       	ret

000002e2 <_ZN14SoftwareSerial5flushEv>:
 2e2:	08 95       	ret

000002e4 <_ZN14SoftwareSerial4peekEv>:
 2e4:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <_ZN14SoftwareSerial13active_objectE>
 2e8:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <_ZN14SoftwareSerial13active_objectE+0x1>
 2ec:	28 17       	cp	r18, r24
 2ee:	39 07       	cpc	r19, r25
 2f0:	71 f4       	brne	.+28     	; 0x30e <_ZN14SoftwareSerial4peekEv+0x2a>
 2f2:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 2f6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_ZN14SoftwareSerial20_receive_buffer_tailE>
 2fa:	98 17       	cp	r25, r24
 2fc:	41 f0       	breq	.+16     	; 0x30e <_ZN14SoftwareSerial4peekEv+0x2a>
 2fe:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	e4 56       	subi	r30, 0x64	; 100
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	80 81       	ld	r24, Z
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	08 95       	ret
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	9f ef       	ldi	r25, 0xFF	; 255
 312:	08 95       	ret

00000314 <_ZN14SoftwareSerial9availableEv>:
 314:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <_ZN14SoftwareSerial13active_objectE>
 318:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <_ZN14SoftwareSerial13active_objectE+0x1>
 31c:	28 17       	cp	r18, r24
 31e:	39 07       	cpc	r19, r25
 320:	71 f4       	brne	.+28     	; 0x33e <_ZN14SoftwareSerial9availableEv+0x2a>
 322:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_ZN14SoftwareSerial20_receive_buffer_tailE>
 326:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	80 5c       	subi	r24, 0xC0	; 192
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	82 1b       	sub	r24, r18
 332:	91 09       	sbc	r25, r1
 334:	60 e4       	ldi	r22, 0x40	; 64
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divmodhi4>
 33c:	08 95       	ret
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret

00000344 <_ZN14SoftwareSerial13stopListeningEv>:
 344:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <_ZN14SoftwareSerial13active_objectE>
 348:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <_ZN14SoftwareSerial13active_objectE+0x1>
 34c:	e8 17       	cp	r30, r24
 34e:	f9 07       	cpc	r31, r25
 350:	69 f4       	brne	.+26     	; 0x36c <_ZN14SoftwareSerial13stopListeningEv+0x28>
 352:	a3 89       	ldd	r26, Z+19	; 0x13
 354:	b4 89       	ldd	r27, Z+20	; 0x14
 356:	9c 91       	ld	r25, X
 358:	85 89       	ldd	r24, Z+21	; 0x15
 35a:	80 95       	com	r24
 35c:	89 23       	and	r24, r25
 35e:	8c 93       	st	X, r24
 360:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <_ZN14SoftwareSerial13active_objectE+0x1>
 364:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <_ZN14SoftwareSerial13active_objectE>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret

00000370 <_ZN14SoftwareSerial6listenEv>:
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	ec 01       	movw	r28, r24
 376:	8a 8d       	ldd	r24, Y+26	; 0x1a
 378:	9b 8d       	ldd	r25, Y+27	; 0x1b
 37a:	89 2b       	or	r24, r25
 37c:	f1 f0       	breq	.+60     	; 0x3ba <_ZN14SoftwareSerial6listenEv+0x4a>
 37e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_ZN14SoftwareSerial13active_objectE>
 382:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <_ZN14SoftwareSerial13active_objectE+0x1>
 386:	c8 17       	cp	r28, r24
 388:	d9 07       	cpc	r29, r25
 38a:	b9 f0       	breq	.+46     	; 0x3ba <_ZN14SoftwareSerial6listenEv+0x4a>
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	11 f0       	breq	.+4      	; 0x394 <_ZN14SoftwareSerial6listenEv+0x24>
 390:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN14SoftwareSerial13stopListeningEv>
 394:	8e 8d       	ldd	r24, Y+30	; 0x1e
 396:	8e 7f       	andi	r24, 0xFE	; 254
 398:	8e 8f       	std	Y+30, r24	; 0x1e
 39a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <_ZN14SoftwareSerial20_receive_buffer_tailE>
 39e:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 3a2:	d0 93 dd 01 	sts	0x01DD, r29	; 0x8001dd <_ZN14SoftwareSerial13active_objectE+0x1>
 3a6:	c0 93 dc 01 	sts	0x01DC, r28	; 0x8001dc <_ZN14SoftwareSerial13active_objectE>
 3aa:	eb 89       	ldd	r30, Y+19	; 0x13
 3ac:	fc 89       	ldd	r31, Y+20	; 0x14
 3ae:	90 81       	ld	r25, Z
 3b0:	8d 89       	ldd	r24, Y+21	; 0x15
 3b2:	89 2b       	or	r24, r25
 3b4:	80 83       	st	Z, r24
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <_ZN14SoftwareSerial6listenEv+0x4c>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <__vector_3>:
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	4f 93       	push	r20
 3d2:	5f 93       	push	r21
 3d4:	6f 93       	push	r22
 3d6:	7f 93       	push	r23
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
 3e4:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <_ZN14SoftwareSerial13active_objectE>
 3e8:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <_ZN14SoftwareSerial13active_objectE+0x1>
 3ec:	30 97       	sbiw	r30, 0x00	; 0
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <__vector_3+0x30>
 3f0:	51 c0       	rjmp	.+162    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 3f2:	96 8d       	ldd	r25, Z+30	; 0x1e
 3f4:	a6 85       	ldd	r26, Z+14	; 0x0e
 3f6:	b7 85       	ldd	r27, Z+15	; 0x0f
 3f8:	85 85       	ldd	r24, Z+13	; 0x0d
 3fa:	91 ff       	sbrs	r25, 1
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	9c 91       	ld	r25, X
 400:	89 23       	and	r24, r25
 402:	29 f4       	brne	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	47 c0       	rjmp	.+142    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 406:	9c 91       	ld	r25, X
 408:	89 23       	and	r24, r25
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	43 c0       	rjmp	.+134    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 40e:	a3 89       	ldd	r26, Z+19	; 0x13
 410:	b4 89       	ldd	r27, Z+20	; 0x14
 412:	9c 91       	ld	r25, X
 414:	85 89       	ldd	r24, Z+21	; 0x15
 416:	80 95       	com	r24
 418:	89 23       	and	r24, r25
 41a:	8c 93       	st	X, r24
 41c:	86 89       	ldd	r24, Z+22	; 0x16
 41e:	97 89       	ldd	r25, Z+23	; 0x17
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	60 8d       	ldd	r22, Z+24	; 0x18
 426:	71 8d       	ldd	r23, Z+25	; 0x19
 428:	a6 85       	ldd	r26, Z+14	; 0x0e
 42a:	b7 85       	ldd	r27, Z+15	; 0x0f
 42c:	55 85       	ldd	r21, Z+13	; 0x0d
 42e:	38 e0       	ldi	r19, 0x08	; 8
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	cb 01       	movw	r24, r22
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 438:	82 2f       	mov	r24, r18
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	95 95       	asr	r25
 43e:	87 95       	ror	r24
 440:	28 2f       	mov	r18, r24
 442:	4c 91       	ld	r20, X
 444:	45 23       	and	r20, r21
 446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	20 68       	ori	r18, 0x80	; 128
 44a:	31 50       	subi	r19, 0x01	; 1
 44c:	91 f7       	brne	.-28     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 44e:	86 8d       	ldd	r24, Z+30	; 0x1e
 450:	81 fd       	sbrc	r24, 1
 452:	20 95       	com	r18
 454:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_ZN14SoftwareSerial20_receive_buffer_tailE>
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	8f 73       	andi	r24, 0x3F	; 63
 45e:	99 27       	eor	r25, r25
 460:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <_ZN14SoftwareSerial20_receive_buffer_headE>
 464:	38 17       	cp	r19, r24
 466:	49 f0       	breq	.+18     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 468:	a0 91 9b 01 	lds	r26, 0x019B	; 0x80019b <_ZN14SoftwareSerial20_receive_buffer_tailE>
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	a4 56       	subi	r26, 0x64	; 100
 470:	be 4f       	sbci	r27, 0xFE	; 254
 472:	2c 93       	st	X, r18
 474:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <_ZN14SoftwareSerial20_receive_buffer_tailE>
 478:	03 c0       	rjmp	.+6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47a:	86 8d       	ldd	r24, Z+30	; 0x1e
 47c:	81 60       	ori	r24, 0x01	; 1
 47e:	86 8f       	std	Z+30, r24	; 0x1e
 480:	82 8d       	ldd	r24, Z+26	; 0x1a
 482:	93 8d       	ldd	r25, Z+27	; 0x1b
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 488:	a3 89       	ldd	r26, Z+19	; 0x13
 48a:	b4 89       	ldd	r27, Z+20	; 0x14
 48c:	9c 91       	ld	r25, X
 48e:	85 89       	ldd	r24, Z+21	; 0x15
 490:	89 2b       	or	r24, r25
 492:	8c 93       	st	X, r24
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <_ZN14SoftwareSerialD1Ev>:
 4b6:	2d e2       	ldi	r18, 0x2D	; 45
 4b8:	31 e0       	ldi	r19, 0x01	; 1
 4ba:	fc 01       	movw	r30, r24
 4bc:	31 83       	std	Z+1, r19	; 0x01
 4be:	20 83       	st	Z, r18
 4c0:	0c 94 a2 01 	jmp	0x344	; 0x344 <_ZN14SoftwareSerial13stopListeningEv>

000004c4 <_ZN14SoftwareSerial5setTXEh>:
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	ec 01       	movw	r28, r24
 4cc:	16 2f       	mov	r17, r22
 4ce:	6e 8d       	ldd	r22, Y+30	; 0x1e
 4d0:	66 95       	lsr	r22
 4d2:	61 70       	andi	r22, 0x01	; 1
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	68 27       	eor	r22, r24
 4d8:	81 2f       	mov	r24, r17
 4da:	0e 94 ac 05 	call	0xb58	; 0xb58 <digitalWrite>
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	81 2f       	mov	r24, r17
 4e2:	0e 94 70 05 	call	0xae0	; 0xae0 <pinMode>
 4e6:	81 2f       	mov	r24, r17
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	fc 01       	movw	r30, r24
 4ec:	e4 58       	subi	r30, 0x84	; 132
 4ee:	ff 4f       	sbci	r31, 0xFF	; 255
 4f0:	e4 91       	lpm	r30, Z
 4f2:	e8 8b       	std	Y+16, r30	; 0x10
 4f4:	fc 01       	movw	r30, r24
 4f6:	e0 57       	subi	r30, 0x70	; 112
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	e4 91       	lpm	r30, Z
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	e2 55       	subi	r30, 0x52	; 82
 504:	ff 4f       	sbci	r31, 0xFF	; 255
 506:	85 91       	lpm	r24, Z+
 508:	94 91       	lpm	r25, Z
 50a:	9a 8b       	std	Y+18, r25	; 0x12
 50c:	89 8b       	std	Y+17, r24	; 0x11
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	08 95       	ret

00000516 <_ZN14SoftwareSerial5setRXEh>:
 516:	1f 93       	push	r17
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
 51e:	16 2f       	mov	r17, r22
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	81 2f       	mov	r24, r17
 524:	0e 94 70 05 	call	0xae0	; 0xae0 <pinMode>
 528:	8e 8d       	ldd	r24, Y+30	; 0x1e
 52a:	81 fd       	sbrc	r24, 1
 52c:	04 c0       	rjmp	.+8      	; 0x536 <_ZN14SoftwareSerial5setRXEh+0x20>
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	81 2f       	mov	r24, r17
 532:	0e 94 ac 05 	call	0xb58	; 0xb58 <digitalWrite>
 536:	1c 87       	std	Y+12, r17	; 0x0c
 538:	81 2f       	mov	r24, r17
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	fc 01       	movw	r30, r24
 53e:	e4 58       	subi	r30, 0x84	; 132
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	e4 91       	lpm	r30, Z
 544:	ed 87       	std	Y+13, r30	; 0x0d
 546:	fc 01       	movw	r30, r24
 548:	e0 57       	subi	r30, 0x70	; 112
 54a:	ff 4f       	sbci	r31, 0xFF	; 255
 54c:	e4 91       	lpm	r30, Z
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	ec 55       	subi	r30, 0x5C	; 92
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	85 91       	lpm	r24, Z+
 55a:	94 91       	lpm	r25, Z
 55c:	9f 87       	std	Y+15, r25	; 0x0f
 55e:	8e 87       	std	Y+14, r24	; 0x0e
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	08 95       	ret

00000568 <_ZN14SoftwareSerialC1Ehhb>:
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	ec 01       	movw	r28, r24
 570:	16 2f       	mov	r17, r22
 572:	1b 82       	std	Y+3, r1	; 0x03
 574:	1a 82       	std	Y+2, r1	; 0x02
 576:	88 ee       	ldi	r24, 0xE8	; 232
 578:	93 e0       	ldi	r25, 0x03	; 3
 57a:	a0 e0       	ldi	r26, 0x00	; 0
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	8c 83       	std	Y+4, r24	; 0x04
 580:	9d 83       	std	Y+5, r25	; 0x05
 582:	ae 83       	std	Y+6, r26	; 0x06
 584:	bf 83       	std	Y+7, r27	; 0x07
 586:	8d e2       	ldi	r24, 0x2D	; 45
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	99 83       	std	Y+1, r25	; 0x01
 58c:	88 83       	st	Y, r24
 58e:	1f 8a       	std	Y+23, r1	; 0x17
 590:	1e 8a       	std	Y+22, r1	; 0x16
 592:	19 8e       	std	Y+25, r1	; 0x19
 594:	18 8e       	std	Y+24, r1	; 0x18
 596:	1b 8e       	std	Y+27, r1	; 0x1b
 598:	1a 8e       	std	Y+26, r1	; 0x1a
 59a:	1d 8e       	std	Y+29, r1	; 0x1d
 59c:	1c 8e       	std	Y+28, r1	; 0x1c
 59e:	8e 8d       	ldd	r24, Y+30	; 0x1e
 5a0:	8e 7f       	andi	r24, 0xFE	; 254
 5a2:	20 fb       	bst	r18, 0
 5a4:	81 f9       	bld	r24, 1
 5a6:	8e 8f       	std	Y+30, r24	; 0x1e
 5a8:	64 2f       	mov	r22, r20
 5aa:	ce 01       	movw	r24, r28
 5ac:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN14SoftwareSerial5setTXEh>
 5b0:	61 2f       	mov	r22, r17
 5b2:	ce 01       	movw	r24, r28
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0c 94 8b 02 	jmp	0x516	; 0x516 <_ZN14SoftwareSerial5setRXEh>

000005be <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	ec 01       	movw	r28, r24
 5c4:	9a 01       	movw	r18, r20
 5c6:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
 5c8:	1b 8e       	std	Y+27, r1	; 0x1b
 5ca:	1a 8e       	std	Y+26, r1	; 0x1a
 5cc:	19 8e       	std	Y+25, r1	; 0x19
 5ce:	18 8e       	std	Y+24, r1	; 0x18
 5d0:	1f 8a       	std	Y+23, r1	; 0x17
 5d2:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
 5d4:	60 e8       	ldi	r22, 0x80	; 128
 5d6:	74 e8       	ldi	r23, 0x84	; 132
 5d8:	8e e1       	ldi	r24, 0x1E	; 30
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 e7 06 	call	0xdce	; 0xdce <__divmodsi4>
 5e0:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5e2:	24 30       	cpi	r18, 0x04	; 4
 5e4:	31 05       	cpc	r19, r1
 5e6:	18 f0       	brcs	.+6      	; 0x5ee <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
 5e8:	c9 01       	movw	r24, r18
 5ea:	03 97       	sbiw	r24, 0x03	; 3
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
 5f2:	9d 8f       	std	Y+29, r25	; 0x1d
 5f4:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
 5f6:	6c 85       	ldd	r22, Y+12	; 0x0c
 5f8:	66 31       	cpi	r22, 0x16	; 22
 5fa:	08 f0       	brcs	.+2      	; 0x5fe <_ZN14SoftwareSerial5beginEl+0x40>
 5fc:	69 c0       	rjmp	.+210    	; 0x6d0 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 5fe:	c9 01       	movw	r24, r18
 600:	96 95       	lsr	r25
 602:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 604:	84 31       	cpi	r24, 0x14	; 20
 606:	91 05       	cpc	r25, r1
 608:	10 f0       	brcs	.+4      	; 0x60e <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
 60a:	43 97       	sbiw	r24, 0x13	; 19
 60c:	02 c0       	rjmp	.+4      	; 0x612 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 612:	9f 8b       	std	Y+23, r25	; 0x17
 614:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 616:	36 97       	sbiw	r30, 0x06	; 6
 618:	18 f0       	brcs	.+6      	; 0x620 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
 61a:	c9 01       	movw	r24, r18
 61c:	05 97       	sbiw	r24, 0x05	; 5
 61e:	02 c0       	rjmp	.+4      	; 0x624 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
 624:	99 8f       	std	Y+25, r25	; 0x19
 626:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 628:	c9 01       	movw	r24, r18
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	28 0f       	add	r18, r24
 630:	39 1f       	adc	r19, r25
 632:	36 95       	lsr	r19
 634:	27 95       	ror	r18
 636:	36 95       	lsr	r19
 638:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 63a:	2d 30       	cpi	r18, 0x0D	; 13
 63c:	31 05       	cpc	r19, r1
 63e:	18 f0       	brcs	.+6      	; 0x646 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
 640:	2c 50       	subi	r18, 0x0C	; 12
 642:	31 09       	sbc	r19, r1
 644:	02 c0       	rjmp	.+4      	; 0x64a <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
 646:	21 e0       	ldi	r18, 0x01	; 1
 648:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 64a:	3b 8f       	std	Y+27, r19	; 0x1b
 64c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
 64e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 652:	68 30       	cpi	r22, 0x08	; 8
 654:	50 f0       	brcs	.+20     	; 0x66a <_ZN14SoftwareSerial5beginEl+0xac>
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	6e 30       	cpi	r22, 0x0E	; 14
 65a:	08 f4       	brcc	.+2      	; 0x65e <_ZN14SoftwareSerial5beginEl+0xa0>
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	01 c0       	rjmp	.+2      	; 0x664 <_ZN14SoftwareSerial5beginEl+0xa6>
 662:	88 0f       	add	r24, r24
 664:	2a 95       	dec	r18
 666:	ea f7       	brpl	.-6      	; 0x662 <_ZN14SoftwareSerial5beginEl+0xa4>
 668:	01 c0       	rjmp	.+2      	; 0x66c <_ZN14SoftwareSerial5beginEl+0xae>
 66a:	84 e0       	ldi	r24, 0x04	; 4
 66c:	89 2b       	or	r24, r25
 66e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
 672:	9c 85       	ldd	r25, Y+12	; 0x0c
 674:	98 30       	cpi	r25, 0x08	; 8
 676:	38 f0       	brcs	.+14     	; 0x686 <_ZN14SoftwareSerial5beginEl+0xc8>
 678:	9e 30       	cpi	r25, 0x0E	; 14
 67a:	40 f0       	brcs	.+16     	; 0x68c <_ZN14SoftwareSerial5beginEl+0xce>
 67c:	96 31       	cpi	r25, 0x16	; 22
 67e:	48 f0       	brcs	.+18     	; 0x692 <_ZN14SoftwareSerial5beginEl+0xd4>
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	08 c0       	rjmp	.+16     	; 0x696 <_ZN14SoftwareSerial5beginEl+0xd8>
 686:	2d e6       	ldi	r18, 0x6D	; 109
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	05 c0       	rjmp	.+10     	; 0x696 <_ZN14SoftwareSerial5beginEl+0xd8>
 68c:	2b e6       	ldi	r18, 0x6B	; 107
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <_ZN14SoftwareSerial5beginEl+0xd8>
 692:	2c e6       	ldi	r18, 0x6C	; 108
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	3c 8b       	std	Y+20, r19	; 0x14
 698:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
 69a:	98 30       	cpi	r25, 0x08	; 8
 69c:	30 f4       	brcc	.+12     	; 0x6aa <_ZN14SoftwareSerial5beginEl+0xec>
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <_ZN14SoftwareSerial5beginEl+0xe6>
 6a2:	88 0f       	add	r24, r24
 6a4:	9a 95       	dec	r25
 6a6:	ea f7       	brpl	.-6      	; 0x6a2 <_ZN14SoftwareSerial5beginEl+0xe4>
 6a8:	0e c0       	rjmp	.+28     	; 0x6c6 <_ZN14SoftwareSerial5beginEl+0x108>
 6aa:	29 2f       	mov	r18, r25
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	9e 30       	cpi	r25, 0x0E	; 14
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <_ZN14SoftwareSerial5beginEl+0xfa>
 6b2:	28 50       	subi	r18, 0x08	; 8
 6b4:	31 09       	sbc	r19, r1
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <_ZN14SoftwareSerial5beginEl+0xfe>
 6b8:	2e 50       	subi	r18, 0x0E	; 14
 6ba:	31 09       	sbc	r19, r1
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <_ZN14SoftwareSerial5beginEl+0x104>
 6c0:	88 0f       	add	r24, r24
 6c2:	2a 95       	dec	r18
 6c4:	ea f7       	brpl	.-6      	; 0x6c0 <_ZN14SoftwareSerial5beginEl+0x102>
 6c6:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 6c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
 6cc:	01 97       	sbiw	r24, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 6d0:	ce 01       	movw	r24, r28
}
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 6d6:	0c 94 b8 01 	jmp	0x370	; 0x370 <_ZN14SoftwareSerial6listenEv>

000006da <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
 6e4:	2f 93       	push	r18
 6e6:	8f 93       	push	r24
 6e8:	9f 93       	push	r25
 6ea:	ef 93       	push	r30
 6ec:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 6ee:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <Serial+0x10>
 6f2:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <Serial+0x11>
 6f6:	80 81       	ld	r24, Z
 6f8:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <Serial+0x16>
 6fc:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <Serial+0x17>
 700:	82 fd       	sbrc	r24, 2
 702:	12 c0       	rjmp	.+36     	; 0x728 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 704:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 706:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Serial+0x19>
 70a:	8f 5f       	subi	r24, 0xFF	; 255
 70c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 70e:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <Serial+0x1a>
 712:	82 17       	cp	r24, r18
 714:	51 f0       	breq	.+20     	; 0x72a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 716:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <Serial+0x19>
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	e2 52       	subi	r30, 0x22	; 34
 71e:	fe 4f       	sbci	r31, 0xFE	; 254
 720:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 722:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Serial+0x19>
 726:	01 c0       	rjmp	.+2      	; 0x72a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 728:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 72a:	ff 91       	pop	r31
 72c:	ef 91       	pop	r30
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 760:	8e ed       	ldi	r24, 0xDE	; 222
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	7f 91       	pop	r23
 776:	6f 91       	pop	r22
 778:	5f 91       	pop	r21
 77a:	4f 91       	pop	r20
 77c:	3f 91       	pop	r19
 77e:	2f 91       	pop	r18
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 78a:	8e ed       	ldi	r24, 0xDE	; 222
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN14HardwareSerial9availableEv>
 792:	21 e0       	ldi	r18, 0x01	; 1
 794:	89 2b       	or	r24, r25
 796:	09 f4       	brne	.+2      	; 0x79a <_Z17Serial0_availablev+0x10>
 798:	20 e0       	ldi	r18, 0x00	; 0
}
 79a:	82 2f       	mov	r24, r18
 79c:	08 95       	ret

0000079e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 79e:	ee ed       	ldi	r30, 0xDE	; 222
 7a0:	f1 e0       	ldi	r31, 0x01	; 1
 7a2:	13 82       	std	Z+3, r1	; 0x03
 7a4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 7a6:	88 ee       	ldi	r24, 0xE8	; 232
 7a8:	93 e0       	ldi	r25, 0x03	; 3
 7aa:	a0 e0       	ldi	r26, 0x00	; 0
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	84 83       	std	Z+4, r24	; 0x04
 7b0:	95 83       	std	Z+5, r25	; 0x05
 7b2:	a6 83       	std	Z+6, r26	; 0x06
 7b4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 7b6:	8e e4       	ldi	r24, 0x4E	; 78
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	91 83       	std	Z+1, r25	; 0x01
 7bc:	80 83       	st	Z, r24
 7be:	85 ec       	ldi	r24, 0xC5	; 197
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	95 87       	std	Z+13, r25	; 0x0d
 7c4:	84 87       	std	Z+12, r24	; 0x0c
 7c6:	84 ec       	ldi	r24, 0xC4	; 196
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	97 87       	std	Z+15, r25	; 0x0f
 7cc:	86 87       	std	Z+14, r24	; 0x0e
 7ce:	80 ec       	ldi	r24, 0xC0	; 192
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	91 8b       	std	Z+17, r25	; 0x11
 7d4:	80 8b       	std	Z+16, r24	; 0x10
 7d6:	81 ec       	ldi	r24, 0xC1	; 193
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	93 8b       	std	Z+19, r25	; 0x13
 7dc:	82 8b       	std	Z+18, r24	; 0x12
 7de:	82 ec       	ldi	r24, 0xC2	; 194
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	95 8b       	std	Z+21, r25	; 0x15
 7e4:	84 8b       	std	Z+20, r24	; 0x14
 7e6:	86 ec       	ldi	r24, 0xC6	; 198
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	97 8b       	std	Z+23, r25	; 0x17
 7ec:	86 8b       	std	Z+22, r24	; 0x16
 7ee:	11 8e       	std	Z+25, r1	; 0x19
 7f0:	12 8e       	std	Z+26, r1	; 0x1a
 7f2:	13 8e       	std	Z+27, r1	; 0x1b
 7f4:	14 8e       	std	Z+28, r1	; 0x1c
 7f6:	08 95       	ret

000007f8 <initVariant>:
 7f8:	08 95       	ret

000007fa <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 7fa:	0e 94 0c 05 	call	0xa18	; 0xa18 <init>

	initVariant();
 7fe:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 802:	0e 94 8e 00 	call	0x11c	; 0x11c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 806:	c8 e1       	ldi	r28, 0x18	; 24
 808:	d6 e0       	ldi	r29, 0x06	; 6
#endif
	
	setup();
    
	for (;;) {
		loop();
 80a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <loop>
		if (serialEventRun) serialEventRun();
 80e:	20 97       	sbiw	r28, 0x00	; 0
 810:	e1 f3       	breq	.-8      	; 0x80a <main+0x10>
 812:	0e 94 18 06 	call	0xc30	; 0xc30 <_Z14serialEventRunv>
 816:	f9 cf       	rjmp	.-14     	; 0x80a <main+0x10>

00000818 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 818:	cf 92       	push	r12
 81a:	df 92       	push	r13
 81c:	ef 92       	push	r14
 81e:	ff 92       	push	r15
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	6c 01       	movw	r12, r24
 82a:	7a 01       	movw	r14, r20
 82c:	8b 01       	movw	r16, r22
 82e:	c0 e0       	ldi	r28, 0x00	; 0
 830:	d0 e0       	ldi	r29, 0x00	; 0
 832:	ce 15       	cp	r28, r14
 834:	df 05       	cpc	r29, r15
 836:	81 f0       	breq	.+32     	; 0x858 <_ZN5Print5writeEPKhj+0x40>
 838:	d8 01       	movw	r26, r16
 83a:	6d 91       	ld	r22, X+
 83c:	8d 01       	movw	r16, r26
 83e:	d6 01       	movw	r26, r12
 840:	ed 91       	ld	r30, X+
 842:	fc 91       	ld	r31, X
 844:	01 90       	ld	r0, Z+
 846:	f0 81       	ld	r31, Z
 848:	e0 2d       	mov	r30, r0
 84a:	c6 01       	movw	r24, r12
 84c:	09 95       	icall
 84e:	89 2b       	or	r24, r25
 850:	11 f0       	breq	.+4      	; 0x856 <_ZN5Print5writeEPKhj+0x3e>
 852:	21 96       	adiw	r28, 0x01	; 1
 854:	ee cf       	rjmp	.-36     	; 0x832 <_ZN5Print5writeEPKhj+0x1a>
 856:	7e 01       	movw	r14, r28
 858:	c7 01       	movw	r24, r14
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	1f 91       	pop	r17
 860:	0f 91       	pop	r16
 862:	ff 90       	pop	r15
 864:	ef 90       	pop	r14
 866:	df 90       	pop	r13
 868:	cf 90       	pop	r12
 86a:	08 95       	ret

0000086c <_ZN5Print5writeEPKc>:
 86c:	61 15       	cp	r22, r1
 86e:	71 05       	cpc	r23, r1
 870:	79 f0       	breq	.+30     	; 0x890 <_ZN5Print5writeEPKc+0x24>
 872:	fb 01       	movw	r30, r22
 874:	01 90       	ld	r0, Z+
 876:	00 20       	and	r0, r0
 878:	e9 f7       	brne	.-6      	; 0x874 <_ZN5Print5writeEPKc+0x8>
 87a:	31 97       	sbiw	r30, 0x01	; 1
 87c:	af 01       	movw	r20, r30
 87e:	46 1b       	sub	r20, r22
 880:	57 0b       	sbc	r21, r23
 882:	dc 01       	movw	r26, r24
 884:	ed 91       	ld	r30, X+
 886:	fc 91       	ld	r31, X
 888:	02 80       	ldd	r0, Z+2	; 0x02
 88a:	f3 81       	ldd	r31, Z+3	; 0x03
 88c:	e0 2d       	mov	r30, r0
 88e:	09 94       	ijmp
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	08 95       	ret

00000896 <_ZN5Print7printlnEv>:
 896:	6b e3       	ldi	r22, 0x3B	; 59
 898:	71 e0       	ldi	r23, 0x01	; 1
 89a:	0c 94 36 04 	jmp	0x86c	; 0x86c <_ZN5Print5writeEPKc>

0000089e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 8a8:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN5Print5writeEPKc>
 8ac:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8ae:	ce 01       	movw	r24, r28
 8b0:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN5Print7printlnEv>
  return n;
}
 8b4:	80 0f       	add	r24, r16
 8b6:	91 1f       	adc	r25, r17
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	1f 91       	pop	r17
 8be:	0f 91       	pop	r16
 8c0:	08 95       	ret

000008c2 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 8c2:	1f 92       	push	r1
 8c4:	0f 92       	push	r0
 8c6:	0f b6       	in	r0, 0x3f	; 63
 8c8:	0f 92       	push	r0
 8ca:	11 24       	eor	r1, r1
 8cc:	2f 93       	push	r18
 8ce:	3f 93       	push	r19
 8d0:	8f 93       	push	r24
 8d2:	9f 93       	push	r25
 8d4:	af 93       	push	r26
 8d6:	bf 93       	push	r27
 8d8:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <timer0_millis>
 8dc:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <timer0_millis+0x1>
 8e0:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <timer0_millis+0x2>
 8e4:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <timer0_millis+0x3>
 8e8:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <timer0_fract>
 8ec:	23 e0       	ldi	r18, 0x03	; 3
 8ee:	23 0f       	add	r18, r19
 8f0:	2d 37       	cpi	r18, 0x7D	; 125
 8f2:	20 f4       	brcc	.+8      	; 0x8fc <__vector_16+0x3a>
 8f4:	01 96       	adiw	r24, 0x01	; 1
 8f6:	a1 1d       	adc	r26, r1
 8f8:	b1 1d       	adc	r27, r1
 8fa:	05 c0       	rjmp	.+10     	; 0x906 <__stack+0x7>
 8fc:	26 e8       	ldi	r18, 0x86	; 134
 8fe:	23 0f       	add	r18, r19
 900:	02 96       	adiw	r24, 0x02	; 2
 902:	a1 1d       	adc	r26, r1
 904:	b1 1d       	adc	r27, r1
 906:	20 93 7b 02 	sts	0x027B, r18	; 0x80027b <timer0_fract>
 90a:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <timer0_millis>
 90e:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <timer0_millis+0x1>
 912:	a0 93 7e 02 	sts	0x027E, r26	; 0x80027e <timer0_millis+0x2>
 916:	b0 93 7f 02 	sts	0x027F, r27	; 0x80027f <timer0_millis+0x3>
 91a:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <timer0_overflow_count>
 91e:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <timer0_overflow_count+0x1>
 922:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <timer0_overflow_count+0x2>
 926:	b0 91 83 02 	lds	r27, 0x0283	; 0x800283 <timer0_overflow_count+0x3>
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	a1 1d       	adc	r26, r1
 92e:	b1 1d       	adc	r27, r1
 930:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <timer0_overflow_count>
 934:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <timer0_overflow_count+0x1>
 938:	a0 93 82 02 	sts	0x0282, r26	; 0x800282 <timer0_overflow_count+0x2>
 93c:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <timer0_overflow_count+0x3>
 940:	bf 91       	pop	r27
 942:	af 91       	pop	r26
 944:	9f 91       	pop	r25
 946:	8f 91       	pop	r24
 948:	3f 91       	pop	r19
 94a:	2f 91       	pop	r18
 94c:	0f 90       	pop	r0
 94e:	0f be       	out	0x3f, r0	; 63
 950:	0f 90       	pop	r0
 952:	1f 90       	pop	r1
 954:	18 95       	reti

00000956 <micros>:
 956:	3f b7       	in	r19, 0x3f	; 63
 958:	f8 94       	cli
 95a:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <timer0_overflow_count>
 95e:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <timer0_overflow_count+0x1>
 962:	a0 91 82 02 	lds	r26, 0x0282	; 0x800282 <timer0_overflow_count+0x2>
 966:	b0 91 83 02 	lds	r27, 0x0283	; 0x800283 <timer0_overflow_count+0x3>
 96a:	26 b5       	in	r18, 0x26	; 38
 96c:	a8 9b       	sbis	0x15, 0	; 21
 96e:	05 c0       	rjmp	.+10     	; 0x97a <micros+0x24>
 970:	2f 3f       	cpi	r18, 0xFF	; 255
 972:	19 f0       	breq	.+6      	; 0x97a <micros+0x24>
 974:	01 96       	adiw	r24, 0x01	; 1
 976:	a1 1d       	adc	r26, r1
 978:	b1 1d       	adc	r27, r1
 97a:	3f bf       	out	0x3f, r19	; 63
 97c:	ba 2f       	mov	r27, r26
 97e:	a9 2f       	mov	r26, r25
 980:	98 2f       	mov	r25, r24
 982:	88 27       	eor	r24, r24
 984:	82 0f       	add	r24, r18
 986:	91 1d       	adc	r25, r1
 988:	a1 1d       	adc	r26, r1
 98a:	b1 1d       	adc	r27, r1
 98c:	bc 01       	movw	r22, r24
 98e:	cd 01       	movw	r24, r26
 990:	42 e0       	ldi	r20, 0x02	; 2
 992:	66 0f       	add	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	88 1f       	adc	r24, r24
 998:	99 1f       	adc	r25, r25
 99a:	4a 95       	dec	r20
 99c:	d1 f7       	brne	.-12     	; 0x992 <micros+0x3c>
 99e:	08 95       	ret

000009a0 <delay>:
 9a0:	8f 92       	push	r8
 9a2:	9f 92       	push	r9
 9a4:	af 92       	push	r10
 9a6:	bf 92       	push	r11
 9a8:	cf 92       	push	r12
 9aa:	df 92       	push	r13
 9ac:	ef 92       	push	r14
 9ae:	ff 92       	push	r15
 9b0:	6b 01       	movw	r12, r22
 9b2:	7c 01       	movw	r14, r24
 9b4:	0e 94 ab 04 	call	0x956	; 0x956 <micros>
 9b8:	4b 01       	movw	r8, r22
 9ba:	5c 01       	movw	r10, r24
 9bc:	c1 14       	cp	r12, r1
 9be:	d1 04       	cpc	r13, r1
 9c0:	e1 04       	cpc	r14, r1
 9c2:	f1 04       	cpc	r15, r1
 9c4:	01 f1       	breq	.+64     	; 0xa06 <delay+0x66>
 9c6:	0e 94 b0 06 	call	0xd60	; 0xd60 <yield>
 9ca:	0e 94 ab 04 	call	0x956	; 0x956 <micros>
 9ce:	dc 01       	movw	r26, r24
 9d0:	cb 01       	movw	r24, r22
 9d2:	88 19       	sub	r24, r8
 9d4:	99 09       	sbc	r25, r9
 9d6:	aa 09       	sbc	r26, r10
 9d8:	bb 09       	sbc	r27, r11
 9da:	88 3e       	cpi	r24, 0xE8	; 232
 9dc:	93 40       	sbci	r25, 0x03	; 3
 9de:	a1 05       	cpc	r26, r1
 9e0:	b1 05       	cpc	r27, r1
 9e2:	60 f3       	brcs	.-40     	; 0x9bc <delay+0x1c>
 9e4:	21 e0       	ldi	r18, 0x01	; 1
 9e6:	c2 1a       	sub	r12, r18
 9e8:	d1 08       	sbc	r13, r1
 9ea:	e1 08       	sbc	r14, r1
 9ec:	f1 08       	sbc	r15, r1
 9ee:	88 ee       	ldi	r24, 0xE8	; 232
 9f0:	88 0e       	add	r8, r24
 9f2:	83 e0       	ldi	r24, 0x03	; 3
 9f4:	98 1e       	adc	r9, r24
 9f6:	a1 1c       	adc	r10, r1
 9f8:	b1 1c       	adc	r11, r1
 9fa:	c1 14       	cp	r12, r1
 9fc:	d1 04       	cpc	r13, r1
 9fe:	e1 04       	cpc	r14, r1
 a00:	f1 04       	cpc	r15, r1
 a02:	19 f7       	brne	.-58     	; 0x9ca <delay+0x2a>
 a04:	db cf       	rjmp	.-74     	; 0x9bc <delay+0x1c>
 a06:	ff 90       	pop	r15
 a08:	ef 90       	pop	r14
 a0a:	df 90       	pop	r13
 a0c:	cf 90       	pop	r12
 a0e:	bf 90       	pop	r11
 a10:	af 90       	pop	r10
 a12:	9f 90       	pop	r9
 a14:	8f 90       	pop	r8
 a16:	08 95       	ret

00000a18 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 a18:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 a1a:	84 b5       	in	r24, 0x24	; 36
 a1c:	82 60       	ori	r24, 0x02	; 2
 a1e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 a20:	84 b5       	in	r24, 0x24	; 36
 a22:	81 60       	ori	r24, 0x01	; 1
 a24:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 a26:	85 b5       	in	r24, 0x25	; 37
 a28:	82 60       	ori	r24, 0x02	; 2
 a2a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 a2c:	85 b5       	in	r24, 0x25	; 37
 a2e:	81 60       	ori	r24, 0x01	; 1
 a30:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 a32:	ee e6       	ldi	r30, 0x6E	; 110
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	81 60       	ori	r24, 0x01	; 1
 a3a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 a3c:	e1 e8       	ldi	r30, 0x81	; 129
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 a42:	80 81       	ld	r24, Z
 a44:	82 60       	ori	r24, 0x02	; 2
 a46:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 a48:	80 81       	ld	r24, Z
 a4a:	81 60       	ori	r24, 0x01	; 1
 a4c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 a4e:	e0 e8       	ldi	r30, 0x80	; 128
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	81 60       	ori	r24, 0x01	; 1
 a56:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 a58:	e1 eb       	ldi	r30, 0xB1	; 177
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	80 81       	ld	r24, Z
 a5e:	84 60       	ori	r24, 0x04	; 4
 a60:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 a62:	e0 eb       	ldi	r30, 0xB0	; 176
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	81 60       	ori	r24, 0x01	; 1
 a6a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 a6c:	ea e7       	ldi	r30, 0x7A	; 122
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	80 81       	ld	r24, Z
 a72:	84 60       	ori	r24, 0x04	; 4
 a74:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 a76:	80 81       	ld	r24, Z
 a78:	82 60       	ori	r24, 0x02	; 2
 a7a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 a7c:	80 81       	ld	r24, Z
 a7e:	81 60       	ori	r24, 0x01	; 1
 a80:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a82:	80 81       	ld	r24, Z
 a84:	80 68       	ori	r24, 0x80	; 128
 a86:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a88:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a8c:	08 95       	ret

00000a8e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a8e:	83 30       	cpi	r24, 0x03	; 3
 a90:	81 f0       	breq	.+32     	; 0xab2 <turnOffPWM+0x24>
 a92:	28 f4       	brcc	.+10     	; 0xa9e <turnOffPWM+0x10>
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	99 f0       	breq	.+38     	; 0xabe <turnOffPWM+0x30>
 a98:	82 30       	cpi	r24, 0x02	; 2
 a9a:	a1 f0       	breq	.+40     	; 0xac4 <turnOffPWM+0x36>
 a9c:	08 95       	ret
 a9e:	87 30       	cpi	r24, 0x07	; 7
 aa0:	a9 f0       	breq	.+42     	; 0xacc <turnOffPWM+0x3e>
 aa2:	88 30       	cpi	r24, 0x08	; 8
 aa4:	b9 f0       	breq	.+46     	; 0xad4 <turnOffPWM+0x46>
 aa6:	84 30       	cpi	r24, 0x04	; 4
 aa8:	d1 f4       	brne	.+52     	; 0xade <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 aaa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 aae:	8f 7d       	andi	r24, 0xDF	; 223
 ab0:	03 c0       	rjmp	.+6      	; 0xab8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 ab2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 ab6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 ab8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 abc:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 abe:	84 b5       	in	r24, 0x24	; 36
 ac0:	8f 77       	andi	r24, 0x7F	; 127
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 ac4:	84 b5       	in	r24, 0x24	; 36
 ac6:	8f 7d       	andi	r24, 0xDF	; 223
 ac8:	84 bd       	out	0x24, r24	; 36
 aca:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 acc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 ad0:	8f 77       	andi	r24, 0x7F	; 127
 ad2:	03 c0       	rjmp	.+6      	; 0xada <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 ad4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 ad8:	8f 7d       	andi	r24, 0xDF	; 223
 ada:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 ade:	08 95       	ret

00000ae0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	fc 01       	movw	r30, r24
 ae8:	e4 58       	subi	r30, 0x84	; 132
 aea:	ff 4f       	sbci	r31, 0xFF	; 255
 aec:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 aee:	fc 01       	movw	r30, r24
 af0:	e0 57       	subi	r30, 0x70	; 112
 af2:	ff 4f       	sbci	r31, 0xFF	; 255
 af4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 af6:	88 23       	and	r24, r24
 af8:	61 f1       	breq	.+88     	; 0xb52 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	fc 01       	movw	r30, r24
 b02:	e8 54       	subi	r30, 0x48	; 72
 b04:	ff 4f       	sbci	r31, 0xFF	; 255
 b06:	c5 91       	lpm	r28, Z+
 b08:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 b0a:	fc 01       	movw	r30, r24
 b0c:	e2 55       	subi	r30, 0x52	; 82
 b0e:	ff 4f       	sbci	r31, 0xFF	; 255
 b10:	a5 91       	lpm	r26, Z+
 b12:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 b14:	61 11       	cpse	r22, r1
 b16:	09 c0       	rjmp	.+18     	; 0xb2a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 b18:	9f b7       	in	r25, 0x3f	; 63
                cli();
 b1a:	f8 94       	cli
		*reg &= ~bit;
 b1c:	88 81       	ld	r24, Y
 b1e:	20 95       	com	r18
 b20:	82 23       	and	r24, r18
 b22:	88 83       	st	Y, r24
		*out &= ~bit;
 b24:	ec 91       	ld	r30, X
 b26:	2e 23       	and	r18, r30
 b28:	0b c0       	rjmp	.+22     	; 0xb40 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 b2a:	62 30       	cpi	r22, 0x02	; 2
 b2c:	61 f4       	brne	.+24     	; 0xb46 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 b2e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 b30:	f8 94       	cli
		*reg &= ~bit;
 b32:	88 81       	ld	r24, Y
 b34:	32 2f       	mov	r19, r18
 b36:	30 95       	com	r19
 b38:	83 23       	and	r24, r19
 b3a:	88 83       	st	Y, r24
		*out |= bit;
 b3c:	ec 91       	ld	r30, X
 b3e:	2e 2b       	or	r18, r30
 b40:	2c 93       	st	X, r18
		SREG = oldSREG;
 b42:	9f bf       	out	0x3f, r25	; 63
 b44:	06 c0       	rjmp	.+12     	; 0xb52 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 b46:	8f b7       	in	r24, 0x3f	; 63
                cli();
 b48:	f8 94       	cli
		*reg |= bit;
 b4a:	e8 81       	ld	r30, Y
 b4c:	2e 2b       	or	r18, r30
 b4e:	28 83       	st	Y, r18
		SREG = oldSREG;
 b50:	8f bf       	out	0x3f, r24	; 63
	}
}
 b52:	df 91       	pop	r29
 b54:	cf 91       	pop	r28
 b56:	08 95       	ret

00000b58 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 b58:	1f 93       	push	r17
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 b5e:	28 2f       	mov	r18, r24
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	f9 01       	movw	r30, r18
 b64:	e8 59       	subi	r30, 0x98	; 152
 b66:	ff 4f       	sbci	r31, 0xFF	; 255
 b68:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 b6a:	f9 01       	movw	r30, r18
 b6c:	e4 58       	subi	r30, 0x84	; 132
 b6e:	ff 4f       	sbci	r31, 0xFF	; 255
 b70:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 b72:	f9 01       	movw	r30, r18
 b74:	e0 57       	subi	r30, 0x70	; 112
 b76:	ff 4f       	sbci	r31, 0xFF	; 255
 b78:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 b7a:	cc 23       	and	r28, r28
 b7c:	c1 f0       	breq	.+48     	; 0xbae <digitalWrite+0x56>
 b7e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b80:	81 11       	cpse	r24, r1
 b82:	0e 94 47 05 	call	0xa8e	; 0xa8e <turnOffPWM>

	out = portOutputRegister(port);
 b86:	ec 2f       	mov	r30, r28
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	ee 0f       	add	r30, r30
 b8c:	ff 1f       	adc	r31, r31
 b8e:	e2 55       	subi	r30, 0x52	; 82
 b90:	ff 4f       	sbci	r31, 0xFF	; 255
 b92:	a5 91       	lpm	r26, Z+
 b94:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 b96:	9f b7       	in	r25, 0x3f	; 63
	cli();
 b98:	f8 94       	cli

	if (val == LOW) {
 b9a:	11 11       	cpse	r17, r1
 b9c:	04 c0       	rjmp	.+8      	; 0xba6 <digitalWrite+0x4e>
		*out &= ~bit;
 b9e:	8c 91       	ld	r24, X
 ba0:	d0 95       	com	r29
 ba2:	d8 23       	and	r29, r24
 ba4:	02 c0       	rjmp	.+4      	; 0xbaa <digitalWrite+0x52>
	} else {
		*out |= bit;
 ba6:	ec 91       	ld	r30, X
 ba8:	de 2b       	or	r29, r30
 baa:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 bac:	9f bf       	out	0x3f, r25	; 63
}
 bae:	df 91       	pop	r29
 bb0:	cf 91       	pop	r28
 bb2:	1f 91       	pop	r17
 bb4:	08 95       	ret

00000bb6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 bb6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 bb8:	91 8d       	ldd	r25, Z+25	; 0x19
 bba:	22 8d       	ldd	r18, Z+26	; 0x1a
 bbc:	89 2f       	mov	r24, r25
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	80 5c       	subi	r24, 0xC0	; 192
 bc2:	9f 4f       	sbci	r25, 0xFF	; 255
 bc4:	82 1b       	sub	r24, r18
 bc6:	91 09       	sbc	r25, r1
}
 bc8:	8f 73       	andi	r24, 0x3F	; 63
 bca:	99 27       	eor	r25, r25
 bcc:	08 95       	ret

00000bce <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 bce:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 bd0:	91 8d       	ldd	r25, Z+25	; 0x19
 bd2:	82 8d       	ldd	r24, Z+26	; 0x1a
 bd4:	98 17       	cp	r25, r24
 bd6:	31 f0       	breq	.+12     	; 0xbe4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 bd8:	82 8d       	ldd	r24, Z+26	; 0x1a
 bda:	e8 0f       	add	r30, r24
 bdc:	f1 1d       	adc	r31, r1
 bde:	85 8d       	ldd	r24, Z+29	; 0x1d
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 be4:	8f ef       	ldi	r24, 0xFF	; 255
 be6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 be8:	08 95       	ret

00000bea <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 bea:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 bec:	91 8d       	ldd	r25, Z+25	; 0x19
 bee:	82 8d       	ldd	r24, Z+26	; 0x1a
 bf0:	98 17       	cp	r25, r24
 bf2:	61 f0       	breq	.+24     	; 0xc0c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 bf4:	82 8d       	ldd	r24, Z+26	; 0x1a
 bf6:	df 01       	movw	r26, r30
 bf8:	a8 0f       	add	r26, r24
 bfa:	b1 1d       	adc	r27, r1
 bfc:	5d 96       	adiw	r26, 0x1d	; 29
 bfe:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 c00:	92 8d       	ldd	r25, Z+26	; 0x1a
 c02:	9f 5f       	subi	r25, 0xFF	; 255
 c04:	9f 73       	andi	r25, 0x3F	; 63
 c06:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 c0c:	8f ef       	ldi	r24, 0xFF	; 255
 c0e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 c10:	08 95       	ret

00000c12 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 c12:	fc 01       	movw	r30, r24
 c14:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 c16:	44 8d       	ldd	r20, Z+28	; 0x1c
 c18:	25 2f       	mov	r18, r21
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	84 2f       	mov	r24, r20
 c1e:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 c20:	82 1b       	sub	r24, r18
 c22:	93 0b       	sbc	r25, r19
 c24:	54 17       	cp	r21, r20
 c26:	10 f0       	brcs	.+4      	; 0xc2c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 c28:	cf 96       	adiw	r24, 0x3f	; 63
 c2a:	08 95       	ret
  return tail - head - 1;
 c2c:	01 97       	sbiw	r24, 0x01	; 1
}
 c2e:	08 95       	ret

00000c30 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 c30:	85 ec       	ldi	r24, 0xC5	; 197
 c32:	93 e0       	ldi	r25, 0x03	; 3
 c34:	89 2b       	or	r24, r25
 c36:	49 f0       	breq	.+18     	; 0xc4a <_Z14serialEventRunv+0x1a>
 c38:	80 e0       	ldi	r24, 0x00	; 0
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	89 2b       	or	r24, r25
 c3e:	29 f0       	breq	.+10     	; 0xc4a <_Z14serialEventRunv+0x1a>
 c40:	0e 94 c5 03 	call	0x78a	; 0x78a <_Z17Serial0_availablev>
 c44:	81 11       	cpse	r24, r1
 c46:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 c4a:	08 95       	ret

00000c4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 c4c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 c4e:	84 8d       	ldd	r24, Z+28	; 0x1c
 c50:	df 01       	movw	r26, r30
 c52:	a8 0f       	add	r26, r24
 c54:	b1 1d       	adc	r27, r1
 c56:	a3 5a       	subi	r26, 0xA3	; 163
 c58:	bf 4f       	sbci	r27, 0xFF	; 255
 c5a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 c5c:	84 8d       	ldd	r24, Z+28	; 0x1c
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	01 96       	adiw	r24, 0x01	; 1
 c62:	8f 73       	andi	r24, 0x3F	; 63
 c64:	99 27       	eor	r25, r25
 c66:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 c68:	a6 89       	ldd	r26, Z+22	; 0x16
 c6a:	b7 89       	ldd	r27, Z+23	; 0x17
 c6c:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 c6e:	a0 89       	ldd	r26, Z+16	; 0x10
 c70:	b1 89       	ldd	r27, Z+17	; 0x11
 c72:	8c 91       	ld	r24, X
 c74:	80 64       	ori	r24, 0x40	; 64
 c76:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 c78:	93 8d       	ldd	r25, Z+27	; 0x1b
 c7a:	84 8d       	ldd	r24, Z+28	; 0x1c
 c7c:	98 13       	cpse	r25, r24
 c7e:	06 c0       	rjmp	.+12     	; 0xc8c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 c80:	02 88       	ldd	r0, Z+18	; 0x12
 c82:	f3 89       	ldd	r31, Z+19	; 0x13
 c84:	e0 2d       	mov	r30, r0
 c86:	80 81       	ld	r24, Z
 c88:	8f 7d       	andi	r24, 0xDF	; 223
 c8a:	80 83       	st	Z, r24
 c8c:	08 95       	ret

00000c8e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 c8e:	ef 92       	push	r14
 c90:	ff 92       	push	r15
 c92:	0f 93       	push	r16
 c94:	1f 93       	push	r17
 c96:	cf 93       	push	r28
 c98:	df 93       	push	r29
 c9a:	ec 01       	movw	r28, r24
  _written = true;
 c9c:	81 e0       	ldi	r24, 0x01	; 1
 c9e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 ca0:	9b 8d       	ldd	r25, Y+27	; 0x1b
 ca2:	8c 8d       	ldd	r24, Y+28	; 0x1c
 ca4:	98 13       	cpse	r25, r24
 ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <_ZN14HardwareSerial5writeEh+0x24>
 ca8:	e8 89       	ldd	r30, Y+16	; 0x10
 caa:	f9 89       	ldd	r31, Y+17	; 0x11
 cac:	80 81       	ld	r24, Z
 cae:	85 fd       	sbrc	r24, 5
 cb0:	24 c0       	rjmp	.+72     	; 0xcfa <_ZN14HardwareSerial5writeEh+0x6c>
 cb2:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 cb4:	0b 8d       	ldd	r16, Y+27	; 0x1b
 cb6:	10 e0       	ldi	r17, 0x00	; 0
 cb8:	0f 5f       	subi	r16, 0xFF	; 255
 cba:	1f 4f       	sbci	r17, 0xFF	; 255
 cbc:	0f 73       	andi	r16, 0x3F	; 63
 cbe:	11 27       	eor	r17, r17
 cc0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 cc2:	8c 8d       	ldd	r24, Y+28	; 0x1c
 cc4:	e8 12       	cpse	r14, r24
 cc6:	0c c0       	rjmp	.+24     	; 0xce0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 cc8:	0f b6       	in	r0, 0x3f	; 63
 cca:	07 fc       	sbrc	r0, 7
 ccc:	fa cf       	rjmp	.-12     	; 0xcc2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 cce:	e8 89       	ldd	r30, Y+16	; 0x10
 cd0:	f9 89       	ldd	r31, Y+17	; 0x11
 cd2:	80 81       	ld	r24, Z
 cd4:	85 ff       	sbrs	r24, 5
 cd6:	f5 cf       	rjmp	.-22     	; 0xcc2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 cd8:	ce 01       	movw	r24, r28
 cda:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 cde:	f1 cf       	rjmp	.-30     	; 0xcc2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 ce2:	fe 01       	movw	r30, r28
 ce4:	e8 0f       	add	r30, r24
 ce6:	f1 1d       	adc	r31, r1
 ce8:	e3 5a       	subi	r30, 0xA3	; 163
 cea:	ff 4f       	sbci	r31, 0xFF	; 255
 cec:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 cee:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 cf0:	ea 89       	ldd	r30, Y+18	; 0x12
 cf2:	fb 89       	ldd	r31, Y+19	; 0x13
 cf4:	80 81       	ld	r24, Z
 cf6:	80 62       	ori	r24, 0x20	; 32
 cf8:	07 c0       	rjmp	.+14     	; 0xd08 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 cfa:	ee 89       	ldd	r30, Y+22	; 0x16
 cfc:	ff 89       	ldd	r31, Y+23	; 0x17
 cfe:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 d00:	e8 89       	ldd	r30, Y+16	; 0x10
 d02:	f9 89       	ldd	r31, Y+17	; 0x11
 d04:	80 81       	ld	r24, Z
 d06:	80 64       	ori	r24, 0x40	; 64
 d08:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 d0a:	81 e0       	ldi	r24, 0x01	; 1
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	df 91       	pop	r29
 d10:	cf 91       	pop	r28
 d12:	1f 91       	pop	r17
 d14:	0f 91       	pop	r16
 d16:	ff 90       	pop	r15
 d18:	ef 90       	pop	r14
 d1a:	08 95       	ret

00000d1c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 d1c:	cf 93       	push	r28
 d1e:	df 93       	push	r29
 d20:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 d22:	88 8d       	ldd	r24, Y+24	; 0x18
 d24:	88 23       	and	r24, r24
 d26:	c9 f0       	breq	.+50     	; 0xd5a <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 d28:	ea 89       	ldd	r30, Y+18	; 0x12
 d2a:	fb 89       	ldd	r31, Y+19	; 0x13
 d2c:	80 81       	ld	r24, Z
 d2e:	85 fd       	sbrc	r24, 5
 d30:	05 c0       	rjmp	.+10     	; 0xd3c <_ZN14HardwareSerial5flushEv+0x20>
 d32:	a8 89       	ldd	r26, Y+16	; 0x10
 d34:	b9 89       	ldd	r27, Y+17	; 0x11
 d36:	8c 91       	ld	r24, X
 d38:	86 fd       	sbrc	r24, 6
 d3a:	0f c0       	rjmp	.+30     	; 0xd5a <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 d3c:	0f b6       	in	r0, 0x3f	; 63
 d3e:	07 fc       	sbrc	r0, 7
 d40:	f5 cf       	rjmp	.-22     	; 0xd2c <_ZN14HardwareSerial5flushEv+0x10>
 d42:	80 81       	ld	r24, Z
 d44:	85 ff       	sbrs	r24, 5
 d46:	f2 cf       	rjmp	.-28     	; 0xd2c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 d48:	a8 89       	ldd	r26, Y+16	; 0x10
 d4a:	b9 89       	ldd	r27, Y+17	; 0x11
 d4c:	8c 91       	ld	r24, X
 d4e:	85 ff       	sbrs	r24, 5
 d50:	ed cf       	rjmp	.-38     	; 0xd2c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 d52:	ce 01       	movw	r24, r28
 d54:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 d58:	e7 cf       	rjmp	.-50     	; 0xd28 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 d5a:	df 91       	pop	r29
 d5c:	cf 91       	pop	r28
 d5e:	08 95       	ret

00000d60 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 d60:	08 95       	ret

00000d62 <__divmodhi4>:
 d62:	97 fb       	bst	r25, 7
 d64:	07 2e       	mov	r0, r23
 d66:	16 f4       	brtc	.+4      	; 0xd6c <__divmodhi4+0xa>
 d68:	00 94       	com	r0
 d6a:	07 d0       	rcall	.+14     	; 0xd7a <__divmodhi4_neg1>
 d6c:	77 fd       	sbrc	r23, 7
 d6e:	09 d0       	rcall	.+18     	; 0xd82 <__divmodhi4_neg2>
 d70:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodhi4>
 d74:	07 fc       	sbrc	r0, 7
 d76:	05 d0       	rcall	.+10     	; 0xd82 <__divmodhi4_neg2>
 d78:	3e f4       	brtc	.+14     	; 0xd88 <__divmodhi4_exit>

00000d7a <__divmodhi4_neg1>:
 d7a:	90 95       	com	r25
 d7c:	81 95       	neg	r24
 d7e:	9f 4f       	sbci	r25, 0xFF	; 255
 d80:	08 95       	ret

00000d82 <__divmodhi4_neg2>:
 d82:	70 95       	com	r23
 d84:	61 95       	neg	r22
 d86:	7f 4f       	sbci	r23, 0xFF	; 255

00000d88 <__divmodhi4_exit>:
 d88:	08 95       	ret

00000d8a <__udivmodsi4>:
 d8a:	a1 e2       	ldi	r26, 0x21	; 33
 d8c:	1a 2e       	mov	r1, r26
 d8e:	aa 1b       	sub	r26, r26
 d90:	bb 1b       	sub	r27, r27
 d92:	fd 01       	movw	r30, r26
 d94:	0d c0       	rjmp	.+26     	; 0xdb0 <__udivmodsi4_ep>

00000d96 <__udivmodsi4_loop>:
 d96:	aa 1f       	adc	r26, r26
 d98:	bb 1f       	adc	r27, r27
 d9a:	ee 1f       	adc	r30, r30
 d9c:	ff 1f       	adc	r31, r31
 d9e:	a2 17       	cp	r26, r18
 da0:	b3 07       	cpc	r27, r19
 da2:	e4 07       	cpc	r30, r20
 da4:	f5 07       	cpc	r31, r21
 da6:	20 f0       	brcs	.+8      	; 0xdb0 <__udivmodsi4_ep>
 da8:	a2 1b       	sub	r26, r18
 daa:	b3 0b       	sbc	r27, r19
 dac:	e4 0b       	sbc	r30, r20
 dae:	f5 0b       	sbc	r31, r21

00000db0 <__udivmodsi4_ep>:
 db0:	66 1f       	adc	r22, r22
 db2:	77 1f       	adc	r23, r23
 db4:	88 1f       	adc	r24, r24
 db6:	99 1f       	adc	r25, r25
 db8:	1a 94       	dec	r1
 dba:	69 f7       	brne	.-38     	; 0xd96 <__udivmodsi4_loop>
 dbc:	60 95       	com	r22
 dbe:	70 95       	com	r23
 dc0:	80 95       	com	r24
 dc2:	90 95       	com	r25
 dc4:	9b 01       	movw	r18, r22
 dc6:	ac 01       	movw	r20, r24
 dc8:	bd 01       	movw	r22, r26
 dca:	cf 01       	movw	r24, r30
 dcc:	08 95       	ret

00000dce <__divmodsi4>:
 dce:	05 2e       	mov	r0, r21
 dd0:	97 fb       	bst	r25, 7
 dd2:	1e f4       	brtc	.+6      	; 0xdda <__divmodsi4+0xc>
 dd4:	00 94       	com	r0
 dd6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__negsi2>
 dda:	57 fd       	sbrc	r21, 7
 ddc:	07 d0       	rcall	.+14     	; 0xdec <__divmodsi4_neg2>
 dde:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodsi4>
 de2:	07 fc       	sbrc	r0, 7
 de4:	03 d0       	rcall	.+6      	; 0xdec <__divmodsi4_neg2>
 de6:	4e f4       	brtc	.+18     	; 0xdfa <__divmodsi4_exit>
 de8:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__negsi2>

00000dec <__divmodsi4_neg2>:
 dec:	50 95       	com	r21
 dee:	40 95       	com	r20
 df0:	30 95       	com	r19
 df2:	21 95       	neg	r18
 df4:	3f 4f       	sbci	r19, 0xFF	; 255
 df6:	4f 4f       	sbci	r20, 0xFF	; 255
 df8:	5f 4f       	sbci	r21, 0xFF	; 255

00000dfa <__divmodsi4_exit>:
 dfa:	08 95       	ret

00000dfc <__negsi2>:
 dfc:	90 95       	com	r25
 dfe:	80 95       	com	r24
 e00:	70 95       	com	r23
 e02:	61 95       	neg	r22
 e04:	7f 4f       	sbci	r23, 0xFF	; 255
 e06:	8f 4f       	sbci	r24, 0xFF	; 255
 e08:	9f 4f       	sbci	r25, 0xFF	; 255
 e0a:	08 95       	ret

00000e0c <__udivmodhi4>:
 e0c:	aa 1b       	sub	r26, r26
 e0e:	bb 1b       	sub	r27, r27
 e10:	51 e1       	ldi	r21, 0x11	; 17
 e12:	07 c0       	rjmp	.+14     	; 0xe22 <__udivmodhi4_ep>

00000e14 <__udivmodhi4_loop>:
 e14:	aa 1f       	adc	r26, r26
 e16:	bb 1f       	adc	r27, r27
 e18:	a6 17       	cp	r26, r22
 e1a:	b7 07       	cpc	r27, r23
 e1c:	10 f0       	brcs	.+4      	; 0xe22 <__udivmodhi4_ep>
 e1e:	a6 1b       	sub	r26, r22
 e20:	b7 0b       	sbc	r27, r23

00000e22 <__udivmodhi4_ep>:
 e22:	88 1f       	adc	r24, r24
 e24:	99 1f       	adc	r25, r25
 e26:	5a 95       	dec	r21
 e28:	a9 f7       	brne	.-22     	; 0xe14 <__udivmodhi4_loop>
 e2a:	80 95       	com	r24
 e2c:	90 95       	com	r25
 e2e:	bc 01       	movw	r22, r24
 e30:	cd 01       	movw	r24, r26
 e32:	08 95       	ret

00000e34 <__tablejump2__>:
 e34:	ee 0f       	add	r30, r30
 e36:	ff 1f       	adc	r31, r31
 e38:	05 90       	lpm	r0, Z+
 e3a:	f4 91       	lpm	r31, Z
 e3c:	e0 2d       	mov	r30, r0
 e3e:	09 94       	ijmp

00000e40 <__do_global_dtors>:
 e40:	10 e0       	ldi	r17, 0x00	; 0
 e42:	c3 e6       	ldi	r28, 0x63	; 99
 e44:	d0 e0       	ldi	r29, 0x00	; 0
 e46:	04 c0       	rjmp	.+8      	; 0xe50 <__do_global_dtors+0x10>
 e48:	fe 01       	movw	r30, r28
 e4a:	0e 94 1a 07 	call	0xe34	; 0xe34 <__tablejump2__>
 e4e:	21 96       	adiw	r28, 0x01	; 1
 e50:	c4 36       	cpi	r28, 0x64	; 100
 e52:	d1 07       	cpc	r29, r17
 e54:	c9 f7       	brne	.-14     	; 0xe48 <__do_global_dtors+0x8>
 e56:	f8 94       	cli

00000e58 <__stop_program>:
 e58:	ff cf       	rjmp	.-2      	; 0xe58 <__stop_program>
