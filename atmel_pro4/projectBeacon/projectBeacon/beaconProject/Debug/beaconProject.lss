
beaconProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00000ffa  0000108e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000130  0080019a  0080019a  00001128  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a59b  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f67  00000000  00000000  0000bacb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002096  00000000  00000000  0000da32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  0000fac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000262f  00000000  00000000  000104dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000039e8  00000000  00000000  00012b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  000164f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_3>
  10:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_3>
  14:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_3>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_16>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_18>
  4c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_19>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	c1 00       	.word	0x00c1	; ????
  c4:	05 03       	mulsu	r16, r21

000000c6 <__ctors_end>:
  c6:	c8 00       	.word	0x00c8	; ????

000000c8 <__dtors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ea ef       	ldi	r30, 0xFA	; 250
  dc:	ff e0       	ldi	r31, 0x0F	; 15
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	aa 39       	cpi	r26, 0x9A	; 154
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	aa e9       	ldi	r26, 0x9A	; 154
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	aa 3c       	cpi	r26, 0xCA	; 202
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c3 e6       	ldi	r28, 0x63	; 99
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
 102:	21 97       	sbiw	r28, 0x01	; 1
 104:	fe 01       	movw	r30, r28
 106:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__tablejump2__>
 10a:	c1 36       	cpi	r28, 0x61	; 97
 10c:	d1 07       	cpc	r29, r17
 10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
 110:	0e 94 33 03 	call	0x666	; 0x666 <main>
 114:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__do_global_dtors>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_Z10sendStringv>:
  }
  UUID_RSSI = true;
}

void rssiCompare()
{
 11c:	6a e0       	ldi	r22, 0x0A	; 10
 11e:	71 e0       	ldi	r23, 0x01	; 1
 120:	80 ee       	ldi	r24, 0xE0	; 224
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	0c 94 87 03 	jmp	0x70e	; 0x70e <_ZN5Print7printlnEPKc>

00000128 <setup>:
 128:	26 e0       	ldi	r18, 0x06	; 6
 12a:	40 e8       	ldi	r20, 0x80	; 128
 12c:	55 e2       	ldi	r21, 0x25	; 37
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	80 ee       	ldi	r24, 0xE0	; 224
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN14HardwareSerial5beginEmh>
 13a:	6a e1       	ldi	r22, 0x1A	; 26
 13c:	71 e0       	ldi	r23, 0x01	; 1
 13e:	80 ee       	ldi	r24, 0xE0	; 224
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5Print7printlnEPKc>
 146:	6c e1       	ldi	r22, 0x1C	; 28
 148:	71 e0       	ldi	r23, 0x01	; 1
 14a:	80 ee       	ldi	r24, 0xE0	; 224
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5Print7printlnEPKc>
 152:	40 e8       	ldi	r20, 0x80	; 128
 154:	55 e2       	ldi	r21, 0x25	; 37
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	81 ec       	ldi	r24, 0xC1	; 193
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN14SoftwareSerial5beginEl>
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	87 b9       	out	0x07, r24	; 7
 166:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z10sendStringv>
 16a:	63 e2       	ldi	r22, 0x23	; 35
 16c:	71 e0       	ldi	r23, 0x01	; 1
 16e:	81 ec       	ldi	r24, 0xC1	; 193
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 81 03 	call	0x702	; 0x702 <_ZN5Print5printEPKc>
 176:	68 ee       	ldi	r22, 0xE8	; 232
 178:	73 e0       	ldi	r23, 0x03	; 3
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0c 94 08 04 	jmp	0x810	; 0x810 <delay>

00000182 <_GLOBAL__sub_I_BTSerial>:
void filtID(int answerByte);
void getUUID_RSSI();
void rssiCompare();
void sendString();

SoftwareSerial BTSerial(2,3); //(RX | TX) - PINS
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	43 e0       	ldi	r20, 0x03	; 3
 186:	62 e0       	ldi	r22, 0x02	; 2
 188:	81 ec       	ldi	r24, 0xC1	; 193
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0c 94 33 06 	jmp	0xc66	; 0xc66 <_ZN14SoftwareSerialC1Ehhb>

00000190 <_GLOBAL__sub_D_BTSerial>:
 190:	81 ec       	ldi	r24, 0xC1	; 193
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_ZN14SoftwareSerialD1Ev>

00000198 <_Z11sendCommandi>:
		}
	}
}

void sendCommand(int com)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
  switch(com)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	91 05       	cpc	r25, r1
 1a0:	29 f0       	breq	.+10     	; 0x1ac <_Z11sendCommandi+0x14>
 1a2:	02 97       	sbiw	r24, 0x02	; 2
 1a4:	d1 f4       	brne	.+52     	; 0x1da <_Z11sendCommandi+0x42>
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d1 e0       	ldi	r29, 0x01	; 1
 1aa:	0e c0       	rjmp	.+28     	; 0x1c8 <_Z11sendCommandi+0x30>
  {
    case 1:
      for(int i = 0; i < 2; i++)
      {
        BTSerial.write(command_AT[i]);
 1ac:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <command_AT>
 1b0:	81 ec       	ldi	r24, 0xC1	; 193
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN14SoftwareSerial5writeEh>
 1b8:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <command_AT+0x1>
 1bc:	81 ec       	ldi	r24, 0xC1	; 193
 1be:	91 e0       	ldi	r25, 0x01	; 1
      break;
    default:
      //do nothing
      break;
  }
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
  switch(com)
  {
    case 1:
      for(int i = 0; i < 2; i++)
      {
        BTSerial.write(command_AT[i]);
 1c4:	0c 94 a0 04 	jmp	0x940	; 0x940 <_ZN14SoftwareSerial5writeEh>
      }
      break;
    case 2:
      for(int i = 0; i < 8; i++)
      {
        BTSerial.write(command_ATDISI[i]);
 1c8:	69 91       	ld	r22, Y+
 1ca:	81 ec       	ldi	r24, 0xC1	; 193
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN14SoftwareSerial5writeEh>
      {
        BTSerial.write(command_AT[i]);
      }
      break;
    case 2:
      for(int i = 0; i < 8; i++)
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	c8 30       	cpi	r28, 0x08	; 8
 1d6:	d8 07       	cpc	r29, r24
 1d8:	b9 f7       	brne	.-18     	; 0x1c8 <_Z11sendCommandi+0x30>
      break;
    default:
      //do nothing
      break;
  }
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <_Z10readAnswerv>:

int readAnswer()
{
  while(!BTSerial.available())
 1e0:	81 ec       	ldi	r24, 0xC1	; 193
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 09 05 	call	0xa12	; 0xa12 <_ZN14SoftwareSerial9availableEv>
 1e8:	89 2b       	or	r24, r25
 1ea:	d1 f3       	breq	.-12     	; 0x1e0 <_Z10readAnswerv>
  {/*wait until datas are available to read*/}  
  incomingByte = BTSerial.read();
 1ec:	81 ec       	ldi	r24, 0xC1	; 193
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN14SoftwareSerial4readEv>
 1f4:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <incomingByte+0x1>
 1f8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <incomingByte>
  
  return incomingByte;
}
 1fc:	08 95       	ret

000001fe <_Z12getUUID_RSSIv>:
{
  
}

void getUUID_RSSI()
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
  while(readAnswer() != 58)
 202:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 206:	ca 97       	sbiw	r24, 0x3a	; 58
 208:	e1 f7       	brne	.-8      	; 0x202 <_Z12getUUID_RSSIv+0x4>
 20a:	cf e9       	ldi	r28, 0x9F	; 159
 20c:	d1 e0       	ldi	r29, 0x01	; 1
  {/*wait until ':' is recived*/}
  for(int i = 0; i < 32; i++)
  {
    UUID[i] = readAnswer();
 20e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 212:	89 93       	st	Y+, r24

void getUUID_RSSI()
{
  while(readAnswer() != 58)
  {/*wait until ':' is recived*/}
  for(int i = 0; i < 32; i++)
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	cf 3b       	cpi	r28, 0xBF	; 191
 218:	d8 07       	cpc	r29, r24
 21a:	c9 f7       	brne	.-14     	; 0x20e <_Z12getUUID_RSSIv+0x10>
  {
    UUID[i] = readAnswer();
  }
  while(readAnswer() != 45)
 21c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 220:	8d 97       	sbiw	r24, 0x2d	; 45
 222:	e1 f7       	brne	.-8      	; 0x21c <_Z12getUUID_RSSIv+0x1e>
  {/*wait until '-' is recived*/}
  for(int i = 0; i < 3; i++)
  {
    value_RSSI[i] = readAnswer();
 224:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 228:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <value_RSSI>
 22c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 230:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <value_RSSI+0x1>
 234:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 238:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <value_RSSI+0x2>
  }
  UUID_RSSI = true;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <_Z4scanv>:
{
	Serial.println("Funktioniert!!!");
}

void scan()
{	
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
	sendCommand(2);
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 cc 00 	call	0x198	; 0x198 <_Z11sendCommandi>
	while(1)
	{
		//Serial.write(readAnswer());
		if(readAnswer() == 58)
 256:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 25a:	ca 97       	sbiw	r24, 0x3a	; 58
 25c:	c1 f4       	brne	.+48     	; 0x28e <_Z4scanv+0x46>
 25e:	c8 e0       	ldi	r28, 0x08	; 8
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	11 e0       	ldi	r17, 0x01	; 1
		{
			boolean state_zero = true;
       
			for(int i = 0; i < 8; i++)
			{         
				if(readAnswer() != 48)
 264:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 268:	c0 97       	sbiw	r24, 0x30	; 48
 26a:	09 f0       	breq	.+2      	; 0x26e <_Z4scanv+0x26>
				{
					state_zero = false;
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	21 97       	sbiw	r28, 0x01	; 1
		//Serial.write(readAnswer());
		if(readAnswer() == 58)
		{
			boolean state_zero = true;
       
			for(int i = 0; i < 8; i++)
 270:	c9 f7       	brne	.-14     	; 0x264 <_Z4scanv+0x1c>
				if(readAnswer() != 48)
				{
					state_zero = false;
				}
			}
			if(state_zero == false)                             
 272:	11 11       	cpse	r17, r1
 274:	03 c0       	rjmp	.+6      	; 0x27c <_Z4scanv+0x34>
			{
				//Serial.println("ok");
				state_zero = true;
				getUUID_RSSI();
 276:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_Z12getUUID_RSSIv>
 27a:	09 c0       	rjmp	.+18     	; 0x28e <_Z4scanv+0x46>
 27c:	c4 e0       	ldi	r28, 0x04	; 4
 27e:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else
			{
				for(int i = 0; i < 4; i++)
				{
					while(readAnswer() != 58)
 280:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <_Z10readAnswerv>
 284:	ca 97       	sbiw	r24, 0x3a	; 58
 286:	e1 f7       	brne	.-8      	; 0x280 <_Z4scanv+0x38>
 288:	21 97       	sbiw	r28, 0x01	; 1
				state_zero = true;
				getUUID_RSSI();
			}
			else
			{
				for(int i = 0; i < 4; i++)
 28a:	d1 f7       	brne	.-12     	; 0x280 <_Z4scanv+0x38>
 28c:	e4 cf       	rjmp	.-56     	; 0x256 <_Z4scanv+0xe>
					{/*wait until ':' is recived*/}           
				}
				continue;
			}
		}
		if(UUID_RSSI == true)
 28e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <_Z4scanv+0x54>
		{
			UUID_RSSI = false;
 296:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <__data_end>
			
			continue;		
 29a:	dd cf       	rjmp	.-70     	; 0x256 <_Z4scanv+0xe>
			{
				Serial.write(value_RSSI[i]);			//end write values to emulator
			}								
			while(1){}								//catch
		}
		if(scanned == true)
 29c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <scanned>
 2a0:	88 23       	and	r24, r24
 2a2:	c9 f2       	breq	.-78     	; 0x256 <_Z4scanv+0xe>
		{
			scanned = false;
 2a4:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <scanned>
			break;
		}
	}
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	08 95       	ret

000002b0 <loop>:
  
}

void loop()
{
  scan();
 2b0:	0e 94 24 01 	call	0x248	; 0x248 <_Z4scanv>
  Serial.println("CHECK");
 2b4:	60 e6       	ldi	r22, 0x60	; 96
 2b6:	71 e0       	ldi	r23, 0x01	; 1
 2b8:	80 ee       	ldi	r24, 0xE0	; 224
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5Print7printlnEPKc>
  delay(10000);
 2c0:	60 e1       	ldi	r22, 0x10	; 16
 2c2:	77 e2       	ldi	r23, 0x27	; 39
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0c 94 08 04 	jmp	0x810	; 0x810 <delay>

000002cc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2cc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2ce:	91 8d       	ldd	r25, Z+25	; 0x19
 2d0:	22 8d       	ldd	r18, Z+26	; 0x1a
 2d2:	89 2f       	mov	r24, r25
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	80 5c       	subi	r24, 0xC0	; 192
 2d8:	9f 4f       	sbci	r25, 0xFF	; 255
 2da:	82 1b       	sub	r24, r18
 2dc:	91 09       	sbc	r25, r1
}
 2de:	8f 73       	andi	r24, 0x3F	; 63
 2e0:	99 27       	eor	r25, r25
 2e2:	08 95       	ret

000002e4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2e4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2e6:	91 8d       	ldd	r25, Z+25	; 0x19
 2e8:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ea:	98 17       	cp	r25, r24
 2ec:	31 f0       	breq	.+12     	; 0x2fa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2ee:	82 8d       	ldd	r24, Z+26	; 0x1a
 2f0:	e8 0f       	add	r30, r24
 2f2:	f1 1d       	adc	r31, r1
 2f4:	85 8d       	ldd	r24, Z+29	; 0x1d
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2fe:	08 95       	ret

00000300 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 300:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 302:	91 8d       	ldd	r25, Z+25	; 0x19
 304:	82 8d       	ldd	r24, Z+26	; 0x1a
 306:	98 17       	cp	r25, r24
 308:	61 f0       	breq	.+24     	; 0x322 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 30a:	82 8d       	ldd	r24, Z+26	; 0x1a
 30c:	df 01       	movw	r26, r30
 30e:	a8 0f       	add	r26, r24
 310:	b1 1d       	adc	r27, r1
 312:	5d 96       	adiw	r26, 0x1d	; 29
 314:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 316:	92 8d       	ldd	r25, Z+26	; 0x1a
 318:	9f 5f       	subi	r25, 0xFF	; 255
 31a:	9f 73       	andi	r25, 0x3F	; 63
 31c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 326:	08 95       	ret

00000328 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 328:	fc 01       	movw	r30, r24
 32a:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 32c:	44 8d       	ldd	r20, Z+28	; 0x1c
 32e:	25 2f       	mov	r18, r21
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	84 2f       	mov	r24, r20
 334:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 336:	82 1b       	sub	r24, r18
 338:	93 0b       	sbc	r25, r19
 33a:	54 17       	cp	r21, r20
 33c:	10 f0       	brcs	.+4      	; 0x342 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
 33e:	cf 96       	adiw	r24, 0x3f	; 63
 340:	08 95       	ret
  return tail - head - 1;
 342:	01 97       	sbiw	r24, 0x01	; 1
}
 344:	08 95       	ret

00000346 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 346:	8b ef       	ldi	r24, 0xFB	; 251
 348:	92 e0       	ldi	r25, 0x02	; 2
 34a:	89 2b       	or	r24, r25
 34c:	49 f0       	breq	.+18     	; 0x360 <_Z14serialEventRunv+0x1a>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	89 2b       	or	r24, r25
 354:	29 f0       	breq	.+10     	; 0x360 <_Z14serialEventRunv+0x1a>
 356:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <_Z17Serial0_availablev>
 35a:	81 11       	cpse	r24, r1
 35c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 360:	08 95       	ret

00000362 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 362:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 364:	84 8d       	ldd	r24, Z+28	; 0x1c
 366:	df 01       	movw	r26, r30
 368:	a8 0f       	add	r26, r24
 36a:	b1 1d       	adc	r27, r1
 36c:	a3 5a       	subi	r26, 0xA3	; 163
 36e:	bf 4f       	sbci	r27, 0xFF	; 255
 370:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 372:	84 8d       	ldd	r24, Z+28	; 0x1c
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	8f 73       	andi	r24, 0x3F	; 63
 37a:	99 27       	eor	r25, r25
 37c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 37e:	a6 89       	ldd	r26, Z+22	; 0x16
 380:	b7 89       	ldd	r27, Z+23	; 0x17
 382:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 384:	a0 89       	ldd	r26, Z+16	; 0x10
 386:	b1 89       	ldd	r27, Z+17	; 0x11
 388:	8c 91       	ld	r24, X
 38a:	80 64       	ori	r24, 0x40	; 64
 38c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 38e:	93 8d       	ldd	r25, Z+27	; 0x1b
 390:	84 8d       	ldd	r24, Z+28	; 0x1c
 392:	98 13       	cpse	r25, r24
 394:	06 c0       	rjmp	.+12     	; 0x3a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 396:	02 88       	ldd	r0, Z+18	; 0x12
 398:	f3 89       	ldd	r31, Z+19	; 0x13
 39a:	e0 2d       	mov	r30, r0
 39c:	80 81       	ld	r24, Z
 39e:	8f 7d       	andi	r24, 0xDF	; 223
 3a0:	80 83       	st	Z, r24
 3a2:	08 95       	ret

000003a4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
  _written = true;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 3b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
 3b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3ba:	98 13       	cpse	r25, r24
 3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <_ZN14HardwareSerial5writeEh+0x24>
 3be:	e8 89       	ldd	r30, Y+16	; 0x10
 3c0:	f9 89       	ldd	r31, Y+17	; 0x11
 3c2:	80 81       	ld	r24, Z
 3c4:	85 fd       	sbrc	r24, 5
 3c6:	24 c0       	rjmp	.+72     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3c8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 3ca:	0b 8d       	ldd	r16, Y+27	; 0x1b
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	0f 5f       	subi	r16, 0xFF	; 255
 3d0:	1f 4f       	sbci	r17, 0xFF	; 255
 3d2:	0f 73       	andi	r16, 0x3F	; 63
 3d4:	11 27       	eor	r17, r17
 3d6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 3d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3da:	e8 12       	cpse	r14, r24
 3dc:	0c c0       	rjmp	.+24     	; 0x3f6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	07 fc       	sbrc	r0, 7
 3e2:	fa cf       	rjmp	.-12     	; 0x3d8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3e4:	e8 89       	ldd	r30, Y+16	; 0x10
 3e6:	f9 89       	ldd	r31, Y+17	; 0x11
 3e8:	80 81       	ld	r24, Z
 3ea:	85 ff       	sbrs	r24, 5
 3ec:	f5 cf       	rjmp	.-22     	; 0x3d8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 3ee:	ce 01       	movw	r24, r28
 3f0:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 3f4:	f1 cf       	rjmp	.-30     	; 0x3d8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3f8:	fe 01       	movw	r30, r28
 3fa:	e8 0f       	add	r30, r24
 3fc:	f1 1d       	adc	r31, r1
 3fe:	e3 5a       	subi	r30, 0xA3	; 163
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 404:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 406:	ea 89       	ldd	r30, Y+18	; 0x12
 408:	fb 89       	ldd	r31, Y+19	; 0x13
 40a:	80 81       	ld	r24, Z
 40c:	80 62       	ori	r24, 0x20	; 32
 40e:	07 c0       	rjmp	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 410:	ee 89       	ldd	r30, Y+22	; 0x16
 412:	ff 89       	ldd	r31, Y+23	; 0x17
 414:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 416:	e8 89       	ldd	r30, Y+16	; 0x10
 418:	f9 89       	ldd	r31, Y+17	; 0x11
 41a:	80 81       	ld	r24, Z
 41c:	80 64       	ori	r24, 0x40	; 64
 41e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	08 95       	ret

00000432 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 438:	88 8d       	ldd	r24, Y+24	; 0x18
 43a:	88 23       	and	r24, r24
 43c:	c9 f0       	breq	.+50     	; 0x470 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 43e:	ea 89       	ldd	r30, Y+18	; 0x12
 440:	fb 89       	ldd	r31, Y+19	; 0x13
 442:	80 81       	ld	r24, Z
 444:	85 fd       	sbrc	r24, 5
 446:	05 c0       	rjmp	.+10     	; 0x452 <_ZN14HardwareSerial5flushEv+0x20>
 448:	a8 89       	ldd	r26, Y+16	; 0x10
 44a:	b9 89       	ldd	r27, Y+17	; 0x11
 44c:	8c 91       	ld	r24, X
 44e:	86 fd       	sbrc	r24, 6
 450:	0f c0       	rjmp	.+30     	; 0x470 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	07 fc       	sbrc	r0, 7
 456:	f5 cf       	rjmp	.-22     	; 0x442 <_ZN14HardwareSerial5flushEv+0x10>
 458:	80 81       	ld	r24, Z
 45a:	85 ff       	sbrs	r24, 5
 45c:	f2 cf       	rjmp	.-28     	; 0x442 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 45e:	a8 89       	ldd	r26, Y+16	; 0x10
 460:	b9 89       	ldd	r27, Y+17	; 0x11
 462:	8c 91       	ld	r24, X
 464:	85 ff       	sbrs	r24, 5
 466:	ed cf       	rjmp	.-38     	; 0x442 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 46e:	e7 cf       	rjmp	.-50     	; 0x43e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 476:	cf 92       	push	r12
 478:	df 92       	push	r13
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
 486:	6a 01       	movw	r12, r20
 488:	7b 01       	movw	r14, r22
 48a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 48c:	e8 89       	ldd	r30, Y+16	; 0x10
 48e:	f9 89       	ldd	r31, Y+17	; 0x11
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 494:	41 15       	cp	r20, r1
 496:	51 4e       	sbci	r21, 0xE1	; 225
 498:	61 05       	cpc	r22, r1
 49a:	71 05       	cpc	r23, r1
 49c:	b1 f0       	breq	.+44     	; 0x4ca <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	79 e0       	ldi	r23, 0x09	; 9
 4a2:	8d e3       	ldi	r24, 0x3D	; 61
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	a7 01       	movw	r20, r14
 4a8:	96 01       	movw	r18, r12
 4aa:	0e 94 95 07 	call	0xf2a	; 0xf2a <__udivmodsi4>
 4ae:	da 01       	movw	r26, r20
 4b0:	c9 01       	movw	r24, r18
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	a1 09       	sbc	r26, r1
 4b6:	b1 09       	sbc	r27, r1
 4b8:	b6 95       	lsr	r27
 4ba:	a7 95       	ror	r26
 4bc:	97 95       	ror	r25
 4be:	87 95       	ror	r24
 4c0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4c2:	21 15       	cp	r18, r1
 4c4:	80 e1       	ldi	r24, 0x10	; 16
 4c6:	38 07       	cpc	r19, r24
 4c8:	a8 f0       	brcs	.+42     	; 0x4f4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 4ca:	e8 89       	ldd	r30, Y+16	; 0x10
 4cc:	f9 89       	ldd	r31, Y+17	; 0x11
 4ce:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4d0:	60 e8       	ldi	r22, 0x80	; 128
 4d2:	74 e8       	ldi	r23, 0x84	; 132
 4d4:	8e e1       	ldi	r24, 0x1E	; 30
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	a7 01       	movw	r20, r14
 4da:	96 01       	movw	r18, r12
 4dc:	0e 94 95 07 	call	0xf2a	; 0xf2a <__udivmodsi4>
 4e0:	da 01       	movw	r26, r20
 4e2:	c9 01       	movw	r24, r18
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	a1 09       	sbc	r26, r1
 4e8:	b1 09       	sbc	r27, r1
 4ea:	b6 95       	lsr	r27
 4ec:	a7 95       	ror	r26
 4ee:	97 95       	ror	r25
 4f0:	87 95       	ror	r24
 4f2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4f4:	ec 85       	ldd	r30, Y+12	; 0x0c
 4f6:	fd 85       	ldd	r31, Y+13	; 0x0d
 4f8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 4fa:	ee 85       	ldd	r30, Y+14	; 0x0e
 4fc:	ff 85       	ldd	r31, Y+15	; 0x0f
 4fe:	20 83       	st	Z, r18

  _written = false;
 500:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 502:	ec 89       	ldd	r30, Y+20	; 0x14
 504:	fd 89       	ldd	r31, Y+21	; 0x15
 506:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 508:	ea 89       	ldd	r30, Y+18	; 0x12
 50a:	fb 89       	ldd	r31, Y+19	; 0x13
 50c:	80 81       	ld	r24, Z
 50e:	80 61       	ori	r24, 0x10	; 16
 510:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 512:	ea 89       	ldd	r30, Y+18	; 0x12
 514:	fb 89       	ldd	r31, Y+19	; 0x13
 516:	80 81       	ld	r24, Z
 518:	88 60       	ori	r24, 0x08	; 8
 51a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 51c:	ea 89       	ldd	r30, Y+18	; 0x12
 51e:	fb 89       	ldd	r31, Y+19	; 0x13
 520:	80 81       	ld	r24, Z
 522:	80 68       	ori	r24, 0x80	; 128
 524:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 526:	ea 89       	ldd	r30, Y+18	; 0x12
 528:	fb 89       	ldd	r31, Y+19	; 0x13
 52a:	80 81       	ld	r24, Z
 52c:	8f 7d       	andi	r24, 0xDF	; 223
 52e:	80 83       	st	Z, r24
}
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	1f 91       	pop	r17
 536:	ff 90       	pop	r15
 538:	ef 90       	pop	r14
 53a:	df 90       	pop	r13
 53c:	cf 90       	pop	r12
 53e:	08 95       	ret

00000540 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	08 95       	ret

00000546 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	2f 93       	push	r18
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 55a:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <Serial+0x10>
 55e:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <Serial+0x11>
 562:	80 81       	ld	r24, Z
 564:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <Serial+0x16>
 568:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <Serial+0x17>
 56c:	82 fd       	sbrc	r24, 2
 56e:	12 c0       	rjmp	.+36     	; 0x594 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 570:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 572:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <Serial+0x19>
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 57a:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <Serial+0x1a>
 57e:	82 17       	cp	r24, r18
 580:	51 f0       	breq	.+20     	; 0x596 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 582:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <Serial+0x19>
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	e0 52       	subi	r30, 0x20	; 32
 58a:	fe 4f       	sbci	r31, 0xFE	; 254
 58c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 58e:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <Serial+0x19>
 592:	01 c0       	rjmp	.+2      	; 0x596 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 594:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	9f 91       	pop	r25
 59c:	8f 91       	pop	r24
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	2f 93       	push	r18
 5b6:	3f 93       	push	r19
 5b8:	4f 93       	push	r20
 5ba:	5f 93       	push	r21
 5bc:	6f 93       	push	r22
 5be:	7f 93       	push	r23
 5c0:	8f 93       	push	r24
 5c2:	9f 93       	push	r25
 5c4:	af 93       	push	r26
 5c6:	bf 93       	push	r27
 5c8:	ef 93       	push	r30
 5ca:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5cc:	80 ee       	ldi	r24, 0xE0	; 224
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5f6:	80 ee       	ldi	r24, 0xE0	; 224
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN14HardwareSerial9availableEv>
 5fe:	21 e0       	ldi	r18, 0x01	; 1
 600:	89 2b       	or	r24, r25
 602:	09 f4       	brne	.+2      	; 0x606 <_Z17Serial0_availablev+0x10>
 604:	20 e0       	ldi	r18, 0x00	; 0
}
 606:	82 2f       	mov	r24, r18
 608:	08 95       	ret

0000060a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 60a:	e0 ee       	ldi	r30, 0xE0	; 224
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	13 82       	std	Z+3, r1	; 0x03
 610:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 612:	88 ee       	ldi	r24, 0xE8	; 232
 614:	93 e0       	ldi	r25, 0x03	; 3
 616:	a0 e0       	ldi	r26, 0x00	; 0
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	84 83       	std	Z+4, r24	; 0x04
 61c:	95 83       	std	Z+5, r25	; 0x05
 61e:	a6 83       	std	Z+6, r26	; 0x06
 620:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 622:	8a e6       	ldi	r24, 0x6A	; 106
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	91 83       	std	Z+1, r25	; 0x01
 628:	80 83       	st	Z, r24
 62a:	85 ec       	ldi	r24, 0xC5	; 197
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	95 87       	std	Z+13, r25	; 0x0d
 630:	84 87       	std	Z+12, r24	; 0x0c
 632:	84 ec       	ldi	r24, 0xC4	; 196
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	97 87       	std	Z+15, r25	; 0x0f
 638:	86 87       	std	Z+14, r24	; 0x0e
 63a:	80 ec       	ldi	r24, 0xC0	; 192
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	91 8b       	std	Z+17, r25	; 0x11
 640:	80 8b       	std	Z+16, r24	; 0x10
 642:	81 ec       	ldi	r24, 0xC1	; 193
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	93 8b       	std	Z+19, r25	; 0x13
 648:	82 8b       	std	Z+18, r24	; 0x12
 64a:	82 ec       	ldi	r24, 0xC2	; 194
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	95 8b       	std	Z+21, r25	; 0x15
 650:	84 8b       	std	Z+20, r24	; 0x14
 652:	86 ec       	ldi	r24, 0xC6	; 198
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	97 8b       	std	Z+23, r25	; 0x17
 658:	86 8b       	std	Z+22, r24	; 0x16
 65a:	11 8e       	std	Z+25, r1	; 0x19
 65c:	12 8e       	std	Z+26, r1	; 0x1a
 65e:	13 8e       	std	Z+27, r1	; 0x1b
 660:	14 8e       	std	Z+28, r1	; 0x1c
 662:	08 95       	ret

00000664 <initVariant>:
 664:	08 95       	ret

00000666 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 666:	0e 94 44 04 	call	0x888	; 0x888 <init>

	initVariant();
 66a:	0e 94 32 03 	call	0x664	; 0x664 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 66e:	0e 94 94 00 	call	0x128	; 0x128 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 672:	c3 ea       	ldi	r28, 0xA3	; 163
 674:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 676:	0e 94 58 01 	call	0x2b0	; 0x2b0 <loop>
		if (serialEventRun) serialEventRun();
 67a:	20 97       	sbiw	r28, 0x00	; 0
 67c:	e1 f3       	breq	.-8      	; 0x676 <main+0x10>
 67e:	0e 94 a3 01 	call	0x346	; 0x346 <_Z14serialEventRunv>
 682:	f9 cf       	rjmp	.-14     	; 0x676 <main+0x10>

00000684 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	6c 01       	movw	r12, r24
 696:	7a 01       	movw	r14, r20
 698:	8b 01       	movw	r16, r22
 69a:	c0 e0       	ldi	r28, 0x00	; 0
 69c:	d0 e0       	ldi	r29, 0x00	; 0
 69e:	ce 15       	cp	r28, r14
 6a0:	df 05       	cpc	r29, r15
 6a2:	81 f0       	breq	.+32     	; 0x6c4 <_ZN5Print5writeEPKhj+0x40>
 6a4:	d8 01       	movw	r26, r16
 6a6:	6d 91       	ld	r22, X+
 6a8:	8d 01       	movw	r16, r26
 6aa:	d6 01       	movw	r26, r12
 6ac:	ed 91       	ld	r30, X+
 6ae:	fc 91       	ld	r31, X
 6b0:	01 90       	ld	r0, Z+
 6b2:	f0 81       	ld	r31, Z
 6b4:	e0 2d       	mov	r30, r0
 6b6:	c6 01       	movw	r24, r12
 6b8:	09 95       	icall
 6ba:	89 2b       	or	r24, r25
 6bc:	11 f0       	breq	.+4      	; 0x6c2 <_ZN5Print5writeEPKhj+0x3e>
 6be:	21 96       	adiw	r28, 0x01	; 1
 6c0:	ee cf       	rjmp	.-36     	; 0x69e <_ZN5Print5writeEPKhj+0x1a>
 6c2:	7e 01       	movw	r14, r28
 6c4:	c7 01       	movw	r24, r14
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	df 90       	pop	r13
 6d4:	cf 90       	pop	r12
 6d6:	08 95       	ret

000006d8 <_ZN5Print5writeEPKc>:
 6d8:	61 15       	cp	r22, r1
 6da:	71 05       	cpc	r23, r1
 6dc:	79 f0       	breq	.+30     	; 0x6fc <_ZN5Print5writeEPKc+0x24>
 6de:	fb 01       	movw	r30, r22
 6e0:	01 90       	ld	r0, Z+
 6e2:	00 20       	and	r0, r0
 6e4:	e9 f7       	brne	.-6      	; 0x6e0 <_ZN5Print5writeEPKc+0x8>
 6e6:	31 97       	sbiw	r30, 0x01	; 1
 6e8:	af 01       	movw	r20, r30
 6ea:	46 1b       	sub	r20, r22
 6ec:	57 0b       	sbc	r21, r23
 6ee:	dc 01       	movw	r26, r24
 6f0:	ed 91       	ld	r30, X+
 6f2:	fc 91       	ld	r31, X
 6f4:	02 80       	ldd	r0, Z+2	; 0x02
 6f6:	f3 81       	ldd	r31, Z+3	; 0x03
 6f8:	e0 2d       	mov	r30, r0
 6fa:	09 94       	ijmp
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	08 95       	ret

00000702 <_ZN5Print5printEPKc>:
 702:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_ZN5Print5writeEPKc>

00000706 <_ZN5Print7printlnEv>:
 706:	68 e7       	ldi	r22, 0x78	; 120
 708:	71 e0       	ldi	r23, 0x01	; 1
 70a:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <_ZN5Print5writeEPKc>

0000070e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 70e:	0f 93       	push	r16
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 718:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN5Print5writeEPKc>
 71c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 71e:	ce 01       	movw	r24, r28
 720:	0e 94 83 03 	call	0x706	; 0x706 <_ZN5Print7printlnEv>
  return n;
}
 724:	80 0f       	add	r24, r16
 726:	91 1f       	adc	r25, r17
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	08 95       	ret

00000732 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 732:	1f 92       	push	r1
 734:	0f 92       	push	r0
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	0f 92       	push	r0
 73a:	11 24       	eor	r1, r1
 73c:	2f 93       	push	r18
 73e:	3f 93       	push	r19
 740:	8f 93       	push	r24
 742:	9f 93       	push	r25
 744:	af 93       	push	r26
 746:	bf 93       	push	r27
 748:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <timer0_millis>
 74c:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <timer0_millis+0x1>
 750:	a0 91 80 02 	lds	r26, 0x0280	; 0x800280 <timer0_millis+0x2>
 754:	b0 91 81 02 	lds	r27, 0x0281	; 0x800281 <timer0_millis+0x3>
 758:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <timer0_fract>
 75c:	23 e0       	ldi	r18, 0x03	; 3
 75e:	23 0f       	add	r18, r19
 760:	2d 37       	cpi	r18, 0x7D	; 125
 762:	20 f4       	brcc	.+8      	; 0x76c <__vector_16+0x3a>
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	a1 1d       	adc	r26, r1
 768:	b1 1d       	adc	r27, r1
 76a:	05 c0       	rjmp	.+10     	; 0x776 <__vector_16+0x44>
 76c:	26 e8       	ldi	r18, 0x86	; 134
 76e:	23 0f       	add	r18, r19
 770:	02 96       	adiw	r24, 0x02	; 2
 772:	a1 1d       	adc	r26, r1
 774:	b1 1d       	adc	r27, r1
 776:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <timer0_fract>
 77a:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <timer0_millis>
 77e:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <timer0_millis+0x1>
 782:	a0 93 80 02 	sts	0x0280, r26	; 0x800280 <timer0_millis+0x2>
 786:	b0 93 81 02 	sts	0x0281, r27	; 0x800281 <timer0_millis+0x3>
 78a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <timer0_overflow_count>
 78e:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <timer0_overflow_count+0x1>
 792:	a0 91 84 02 	lds	r26, 0x0284	; 0x800284 <timer0_overflow_count+0x2>
 796:	b0 91 85 02 	lds	r27, 0x0285	; 0x800285 <timer0_overflow_count+0x3>
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	a1 1d       	adc	r26, r1
 79e:	b1 1d       	adc	r27, r1
 7a0:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <timer0_overflow_count>
 7a4:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <timer0_overflow_count+0x1>
 7a8:	a0 93 84 02 	sts	0x0284, r26	; 0x800284 <timer0_overflow_count+0x2>
 7ac:	b0 93 85 02 	sts	0x0285, r27	; 0x800285 <timer0_overflow_count+0x3>
 7b0:	bf 91       	pop	r27
 7b2:	af 91       	pop	r26
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	3f 91       	pop	r19
 7ba:	2f 91       	pop	r18
 7bc:	0f 90       	pop	r0
 7be:	0f be       	out	0x3f, r0	; 63
 7c0:	0f 90       	pop	r0
 7c2:	1f 90       	pop	r1
 7c4:	18 95       	reti

000007c6 <micros>:
 7c6:	3f b7       	in	r19, 0x3f	; 63
 7c8:	f8 94       	cli
 7ca:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <timer0_overflow_count>
 7ce:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <timer0_overflow_count+0x1>
 7d2:	a0 91 84 02 	lds	r26, 0x0284	; 0x800284 <timer0_overflow_count+0x2>
 7d6:	b0 91 85 02 	lds	r27, 0x0285	; 0x800285 <timer0_overflow_count+0x3>
 7da:	26 b5       	in	r18, 0x26	; 38
 7dc:	a8 9b       	sbis	0x15, 0	; 21
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <micros+0x24>
 7e0:	2f 3f       	cpi	r18, 0xFF	; 255
 7e2:	19 f0       	breq	.+6      	; 0x7ea <micros+0x24>
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	a1 1d       	adc	r26, r1
 7e8:	b1 1d       	adc	r27, r1
 7ea:	3f bf       	out	0x3f, r19	; 63
 7ec:	ba 2f       	mov	r27, r26
 7ee:	a9 2f       	mov	r26, r25
 7f0:	98 2f       	mov	r25, r24
 7f2:	88 27       	eor	r24, r24
 7f4:	82 0f       	add	r24, r18
 7f6:	91 1d       	adc	r25, r1
 7f8:	a1 1d       	adc	r26, r1
 7fa:	b1 1d       	adc	r27, r1
 7fc:	bc 01       	movw	r22, r24
 7fe:	cd 01       	movw	r24, r26
 800:	42 e0       	ldi	r20, 0x02	; 2
 802:	66 0f       	add	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	4a 95       	dec	r20
 80c:	d1 f7       	brne	.-12     	; 0x802 <micros+0x3c>
 80e:	08 95       	ret

00000810 <delay>:
 810:	8f 92       	push	r8
 812:	9f 92       	push	r9
 814:	af 92       	push	r10
 816:	bf 92       	push	r11
 818:	cf 92       	push	r12
 81a:	df 92       	push	r13
 81c:	ef 92       	push	r14
 81e:	ff 92       	push	r15
 820:	6b 01       	movw	r12, r22
 822:	7c 01       	movw	r14, r24
 824:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <micros>
 828:	4b 01       	movw	r8, r22
 82a:	5c 01       	movw	r10, r24
 82c:	c1 14       	cp	r12, r1
 82e:	d1 04       	cpc	r13, r1
 830:	e1 04       	cpc	r14, r1
 832:	f1 04       	cpc	r15, r1
 834:	01 f1       	breq	.+64     	; 0x876 <delay+0x66>
 836:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <yield>
 83a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <micros>
 83e:	dc 01       	movw	r26, r24
 840:	cb 01       	movw	r24, r22
 842:	88 19       	sub	r24, r8
 844:	99 09       	sbc	r25, r9
 846:	aa 09       	sbc	r26, r10
 848:	bb 09       	sbc	r27, r11
 84a:	88 3e       	cpi	r24, 0xE8	; 232
 84c:	93 40       	sbci	r25, 0x03	; 3
 84e:	a1 05       	cpc	r26, r1
 850:	b1 05       	cpc	r27, r1
 852:	60 f3       	brcs	.-40     	; 0x82c <delay+0x1c>
 854:	21 e0       	ldi	r18, 0x01	; 1
 856:	c2 1a       	sub	r12, r18
 858:	d1 08       	sbc	r13, r1
 85a:	e1 08       	sbc	r14, r1
 85c:	f1 08       	sbc	r15, r1
 85e:	88 ee       	ldi	r24, 0xE8	; 232
 860:	88 0e       	add	r8, r24
 862:	83 e0       	ldi	r24, 0x03	; 3
 864:	98 1e       	adc	r9, r24
 866:	a1 1c       	adc	r10, r1
 868:	b1 1c       	adc	r11, r1
 86a:	c1 14       	cp	r12, r1
 86c:	d1 04       	cpc	r13, r1
 86e:	e1 04       	cpc	r14, r1
 870:	f1 04       	cpc	r15, r1
 872:	19 f7       	brne	.-58     	; 0x83a <delay+0x2a>
 874:	db cf       	rjmp	.-74     	; 0x82c <delay+0x1c>
 876:	ff 90       	pop	r15
 878:	ef 90       	pop	r14
 87a:	df 90       	pop	r13
 87c:	cf 90       	pop	r12
 87e:	bf 90       	pop	r11
 880:	af 90       	pop	r10
 882:	9f 90       	pop	r9
 884:	8f 90       	pop	r8
 886:	08 95       	ret

00000888 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 888:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 88a:	84 b5       	in	r24, 0x24	; 36
 88c:	82 60       	ori	r24, 0x02	; 2
 88e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 890:	84 b5       	in	r24, 0x24	; 36
 892:	81 60       	ori	r24, 0x01	; 1
 894:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 896:	85 b5       	in	r24, 0x25	; 37
 898:	82 60       	ori	r24, 0x02	; 2
 89a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 89c:	85 b5       	in	r24, 0x25	; 37
 89e:	81 60       	ori	r24, 0x01	; 1
 8a0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8a2:	ee e6       	ldi	r30, 0x6E	; 110
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8ac:	e1 e8       	ldi	r30, 0x81	; 129
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8b2:	80 81       	ld	r24, Z
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8b8:	80 81       	ld	r24, Z
 8ba:	81 60       	ori	r24, 0x01	; 1
 8bc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8be:	e0 e8       	ldi	r30, 0x80	; 128
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	81 60       	ori	r24, 0x01	; 1
 8c6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8c8:	e1 eb       	ldi	r30, 0xB1	; 177
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	84 60       	ori	r24, 0x04	; 4
 8d0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8d2:	e0 eb       	ldi	r30, 0xB0	; 176
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	81 60       	ori	r24, 0x01	; 1
 8da:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 8dc:	ea e7       	ldi	r30, 0x7A	; 122
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	80 81       	ld	r24, Z
 8e2:	84 60       	ori	r24, 0x04	; 4
 8e4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8e6:	80 81       	ld	r24, Z
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8ec:	80 81       	ld	r24, Z
 8ee:	81 60       	ori	r24, 0x01	; 1
 8f0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8f2:	80 81       	ld	r24, Z
 8f4:	80 68       	ori	r24, 0x80	; 128
 8f6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8f8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 8fc:	08 95       	ret

000008fe <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
 8fe:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <_ZN14SoftwareSerial13active_objectE>
 902:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <_ZN14SoftwareSerial13active_objectE+0x1>
 906:	28 17       	cp	r18, r24
 908:	39 07       	cpc	r19, r25
 90a:	b9 f4       	brne	.+46     	; 0x93a <__stack+0x3b>
 90c:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 910:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 914:	98 17       	cp	r25, r24
 916:	89 f0       	breq	.+34     	; 0x93a <__stack+0x3b>
 918:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	e8 57       	subi	r30, 0x78	; 120
 920:	fd 4f       	sbci	r31, 0xFD	; 253
 922:	80 81       	ld	r24, Z
 924:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	2f 5f       	subi	r18, 0xFF	; 255
 92c:	3f 4f       	sbci	r19, 0xFF	; 255
 92e:	2f 73       	andi	r18, 0x3F	; 63
 930:	33 27       	eor	r19, r19
 932:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	08 95       	ret
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	9f ef       	ldi	r25, 0xFF	; 255
 93e:	08 95       	ret

00000940 <_ZN14SoftwareSerial5writeEh>:
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	dc 01       	movw	r26, r24
 948:	5c 96       	adiw	r26, 0x1c	; 28
 94a:	8d 91       	ld	r24, X+
 94c:	9c 91       	ld	r25, X
 94e:	5d 97       	sbiw	r26, 0x1d	; 29
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	39 f4       	brne	.+14     	; 0x962 <_ZN14SoftwareSerial5writeEh+0x22>
 954:	21 e0       	ldi	r18, 0x01	; 1
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	13 96       	adiw	r26, 0x03	; 3
 95a:	3c 93       	st	X, r19
 95c:	2e 93       	st	-X, r18
 95e:	12 97       	sbiw	r26, 0x02	; 2
 960:	3b c0       	rjmp	.+118    	; 0x9d8 <_ZN14SoftwareSerial5writeEh+0x98>
 962:	51 96       	adiw	r26, 0x11	; 17
 964:	ed 91       	ld	r30, X+
 966:	fc 91       	ld	r31, X
 968:	52 97       	sbiw	r26, 0x12	; 18
 96a:	50 96       	adiw	r26, 0x10	; 16
 96c:	2c 91       	ld	r18, X
 96e:	50 97       	sbiw	r26, 0x10	; 16
 970:	32 2f       	mov	r19, r18
 972:	30 95       	com	r19
 974:	1f b7       	in	r17, 0x3f	; 63
 976:	5e 96       	adiw	r26, 0x1e	; 30
 978:	4c 91       	ld	r20, X
 97a:	5e 97       	sbiw	r26, 0x1e	; 30
 97c:	74 2f       	mov	r23, r20
 97e:	72 70       	andi	r23, 0x02	; 2
 980:	41 fd       	sbrc	r20, 1
 982:	60 95       	com	r22
 984:	f8 94       	cli
 986:	40 81       	ld	r20, Z
 988:	77 23       	and	r23, r23
 98a:	11 f0       	breq	.+4      	; 0x990 <_ZN14SoftwareSerial5writeEh+0x50>
 98c:	42 2b       	or	r20, r18
 98e:	01 c0       	rjmp	.+2      	; 0x992 <_ZN14SoftwareSerial5writeEh+0x52>
 990:	43 23       	and	r20, r19
 992:	40 83       	st	Z, r20
 994:	ec 01       	movw	r28, r24
 996:	21 97       	sbiw	r28, 0x01	; 1
 998:	f1 f7       	brne	.-4      	; 0x996 <_ZN14SoftwareSerial5writeEh+0x56>
 99a:	48 e0       	ldi	r20, 0x08	; 8
 99c:	50 81       	ld	r21, Z
 99e:	60 ff       	sbrs	r22, 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <_ZN14SoftwareSerial5writeEh+0x66>
 9a2:	52 2b       	or	r21, r18
 9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <_ZN14SoftwareSerial5writeEh+0x68>
 9a6:	53 23       	and	r21, r19
 9a8:	50 83       	st	Z, r21
 9aa:	ec 01       	movw	r28, r24
 9ac:	21 97       	sbiw	r28, 0x01	; 1
 9ae:	f1 f7       	brne	.-4      	; 0x9ac <_ZN14SoftwareSerial5writeEh+0x6c>
 9b0:	66 95       	lsr	r22
 9b2:	41 50       	subi	r20, 0x01	; 1
 9b4:	99 f7       	brne	.-26     	; 0x99c <_ZN14SoftwareSerial5writeEh+0x5c>
 9b6:	80 81       	ld	r24, Z
 9b8:	77 23       	and	r23, r23
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <_ZN14SoftwareSerial5writeEh+0x82>
 9bc:	83 23       	and	r24, r19
 9be:	80 83       	st	Z, r24
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <_ZN14SoftwareSerial5writeEh+0x86>
 9c2:	28 2b       	or	r18, r24
 9c4:	20 83       	st	Z, r18
 9c6:	1f bf       	out	0x3f, r17	; 63
 9c8:	5c 96       	adiw	r26, 0x1c	; 28
 9ca:	8d 91       	ld	r24, X+
 9cc:	9c 91       	ld	r25, X
 9ce:	5d 97       	sbiw	r26, 0x1d	; 29
 9d0:	01 97       	sbiw	r24, 0x01	; 1
 9d2:	f1 f7       	brne	.-4      	; 0x9d0 <_ZN14SoftwareSerial5writeEh+0x90>
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	df 91       	pop	r29
 9da:	cf 91       	pop	r28
 9dc:	1f 91       	pop	r17
 9de:	08 95       	ret

000009e0 <_ZN14SoftwareSerial5flushEv>:
 9e0:	08 95       	ret

000009e2 <_ZN14SoftwareSerial4peekEv>:
 9e2:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <_ZN14SoftwareSerial13active_objectE>
 9e6:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <_ZN14SoftwareSerial13active_objectE+0x1>
 9ea:	28 17       	cp	r18, r24
 9ec:	39 07       	cpc	r19, r25
 9ee:	71 f4       	brne	.+28     	; 0xa0c <_ZN14SoftwareSerial4peekEv+0x2a>
 9f0:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 9f4:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 9f8:	98 17       	cp	r25, r24
 9fa:	41 f0       	breq	.+16     	; 0xa0c <_ZN14SoftwareSerial4peekEv+0x2a>
 9fc:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	e8 57       	subi	r30, 0x78	; 120
 a04:	fd 4f       	sbci	r31, 0xFD	; 253
 a06:	80 81       	ld	r24, Z
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	08 95       	ret
 a0c:	8f ef       	ldi	r24, 0xFF	; 255
 a0e:	9f ef       	ldi	r25, 0xFF	; 255
 a10:	08 95       	ret

00000a12 <_ZN14SoftwareSerial9availableEv>:
 a12:	20 91 c8 02 	lds	r18, 0x02C8	; 0x8002c8 <_ZN14SoftwareSerial13active_objectE>
 a16:	30 91 c9 02 	lds	r19, 0x02C9	; 0x8002c9 <_ZN14SoftwareSerial13active_objectE+0x1>
 a1a:	28 17       	cp	r18, r24
 a1c:	39 07       	cpc	r19, r25
 a1e:	71 f4       	brne	.+28     	; 0xa3c <_ZN14SoftwareSerial9availableEv+0x2a>
 a20:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 a24:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	80 5c       	subi	r24, 0xC0	; 192
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	82 1b       	sub	r24, r18
 a30:	91 09       	sbc	r25, r1
 a32:	60 e4       	ldi	r22, 0x40	; 64
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 a3a:	08 95       	ret
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	08 95       	ret

00000a42 <_ZN14SoftwareSerial13stopListeningEv>:
 a42:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <_ZN14SoftwareSerial13active_objectE>
 a46:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <_ZN14SoftwareSerial13active_objectE+0x1>
 a4a:	e8 17       	cp	r30, r24
 a4c:	f9 07       	cpc	r31, r25
 a4e:	69 f4       	brne	.+26     	; 0xa6a <_ZN14SoftwareSerial13stopListeningEv+0x28>
 a50:	a3 89       	ldd	r26, Z+19	; 0x13
 a52:	b4 89       	ldd	r27, Z+20	; 0x14
 a54:	9c 91       	ld	r25, X
 a56:	85 89       	ldd	r24, Z+21	; 0x15
 a58:	80 95       	com	r24
 a5a:	89 23       	and	r24, r25
 a5c:	8c 93       	st	X, r24
 a5e:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <_ZN14SoftwareSerial13active_objectE+0x1>
 a62:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <_ZN14SoftwareSerial13active_objectE>
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	08 95       	ret
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	08 95       	ret

00000a6e <_ZN14SoftwareSerial6listenEv>:
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	ec 01       	movw	r28, r24
 a74:	8a 8d       	ldd	r24, Y+26	; 0x1a
 a76:	9b 8d       	ldd	r25, Y+27	; 0x1b
 a78:	89 2b       	or	r24, r25
 a7a:	f1 f0       	breq	.+60     	; 0xab8 <_ZN14SoftwareSerial6listenEv+0x4a>
 a7c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <_ZN14SoftwareSerial13active_objectE>
 a80:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <_ZN14SoftwareSerial13active_objectE+0x1>
 a84:	c8 17       	cp	r28, r24
 a86:	d9 07       	cpc	r29, r25
 a88:	b9 f0       	breq	.+46     	; 0xab8 <_ZN14SoftwareSerial6listenEv+0x4a>
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	11 f0       	breq	.+4      	; 0xa92 <_ZN14SoftwareSerial6listenEv+0x24>
 a8e:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN14SoftwareSerial13stopListeningEv>
 a92:	8e 8d       	ldd	r24, Y+30	; 0x1e
 a94:	8e 7f       	andi	r24, 0xFE	; 254
 a96:	8e 8f       	std	Y+30, r24	; 0x1e
 a98:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 a9c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 aa0:	d0 93 c9 02 	sts	0x02C9, r29	; 0x8002c9 <_ZN14SoftwareSerial13active_objectE+0x1>
 aa4:	c0 93 c8 02 	sts	0x02C8, r28	; 0x8002c8 <_ZN14SoftwareSerial13active_objectE>
 aa8:	eb 89       	ldd	r30, Y+19	; 0x13
 aaa:	fc 89       	ldd	r31, Y+20	; 0x14
 aac:	90 81       	ld	r25, Z
 aae:	8d 89       	ldd	r24, Y+21	; 0x15
 ab0:	89 2b       	or	r24, r25
 ab2:	80 83       	st	Z, r24
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	01 c0       	rjmp	.+2      	; 0xaba <_ZN14SoftwareSerial6listenEv+0x4c>
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	08 95       	ret

00000ac0 <__vector_3>:
 ac0:	1f 92       	push	r1
 ac2:	0f 92       	push	r0
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	0f 92       	push	r0
 ac8:	11 24       	eor	r1, r1
 aca:	2f 93       	push	r18
 acc:	3f 93       	push	r19
 ace:	4f 93       	push	r20
 ad0:	5f 93       	push	r21
 ad2:	6f 93       	push	r22
 ad4:	7f 93       	push	r23
 ad6:	8f 93       	push	r24
 ad8:	9f 93       	push	r25
 ada:	af 93       	push	r26
 adc:	bf 93       	push	r27
 ade:	ef 93       	push	r30
 ae0:	ff 93       	push	r31
 ae2:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <_ZN14SoftwareSerial13active_objectE>
 ae6:	f0 91 c9 02 	lds	r31, 0x02C9	; 0x8002c9 <_ZN14SoftwareSerial13active_objectE+0x1>
 aea:	30 97       	sbiw	r30, 0x00	; 0
 aec:	09 f4       	brne	.+2      	; 0xaf0 <__vector_3+0x30>
 aee:	51 c0       	rjmp	.+162    	; 0xb92 <__vector_3+0xd2>
 af0:	96 8d       	ldd	r25, Z+30	; 0x1e
 af2:	a6 85       	ldd	r26, Z+14	; 0x0e
 af4:	b7 85       	ldd	r27, Z+15	; 0x0f
 af6:	85 85       	ldd	r24, Z+13	; 0x0d
 af8:	91 ff       	sbrs	r25, 1
 afa:	04 c0       	rjmp	.+8      	; 0xb04 <__vector_3+0x44>
 afc:	9c 91       	ld	r25, X
 afe:	89 23       	and	r24, r25
 b00:	29 f4       	brne	.+10     	; 0xb0c <__vector_3+0x4c>
 b02:	47 c0       	rjmp	.+142    	; 0xb92 <__vector_3+0xd2>
 b04:	9c 91       	ld	r25, X
 b06:	89 23       	and	r24, r25
 b08:	09 f0       	breq	.+2      	; 0xb0c <__vector_3+0x4c>
 b0a:	43 c0       	rjmp	.+134    	; 0xb92 <__vector_3+0xd2>
 b0c:	a3 89       	ldd	r26, Z+19	; 0x13
 b0e:	b4 89       	ldd	r27, Z+20	; 0x14
 b10:	9c 91       	ld	r25, X
 b12:	85 89       	ldd	r24, Z+21	; 0x15
 b14:	80 95       	com	r24
 b16:	89 23       	and	r24, r25
 b18:	8c 93       	st	X, r24
 b1a:	86 89       	ldd	r24, Z+22	; 0x16
 b1c:	97 89       	ldd	r25, Z+23	; 0x17
 b1e:	01 97       	sbiw	r24, 0x01	; 1
 b20:	f1 f7       	brne	.-4      	; 0xb1e <__vector_3+0x5e>
 b22:	60 8d       	ldd	r22, Z+24	; 0x18
 b24:	71 8d       	ldd	r23, Z+25	; 0x19
 b26:	a6 85       	ldd	r26, Z+14	; 0x0e
 b28:	b7 85       	ldd	r27, Z+15	; 0x0f
 b2a:	55 85       	ldd	r21, Z+13	; 0x0d
 b2c:	38 e0       	ldi	r19, 0x08	; 8
 b2e:	20 e0       	ldi	r18, 0x00	; 0
 b30:	cb 01       	movw	r24, r22
 b32:	01 97       	sbiw	r24, 0x01	; 1
 b34:	f1 f7       	brne	.-4      	; 0xb32 <__vector_3+0x72>
 b36:	82 2f       	mov	r24, r18
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	95 95       	asr	r25
 b3c:	87 95       	ror	r24
 b3e:	28 2f       	mov	r18, r24
 b40:	4c 91       	ld	r20, X
 b42:	45 23       	and	r20, r21
 b44:	09 f0       	breq	.+2      	; 0xb48 <__vector_3+0x88>
 b46:	20 68       	ori	r18, 0x80	; 128
 b48:	31 50       	subi	r19, 0x01	; 1
 b4a:	91 f7       	brne	.-28     	; 0xb30 <__vector_3+0x70>
 b4c:	86 8d       	ldd	r24, Z+30	; 0x1e
 b4e:	81 fd       	sbrc	r24, 1
 b50:	20 95       	com	r18
 b52:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 b56:	90 e0       	ldi	r25, 0x00	; 0
 b58:	01 96       	adiw	r24, 0x01	; 1
 b5a:	8f 73       	andi	r24, 0x3F	; 63
 b5c:	99 27       	eor	r25, r25
 b5e:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <_ZN14SoftwareSerial20_receive_buffer_headE>
 b62:	38 17       	cp	r19, r24
 b64:	49 f0       	breq	.+18     	; 0xb78 <__vector_3+0xb8>
 b66:	a0 91 87 02 	lds	r26, 0x0287	; 0x800287 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 b6a:	b0 e0       	ldi	r27, 0x00	; 0
 b6c:	a8 57       	subi	r26, 0x78	; 120
 b6e:	bd 4f       	sbci	r27, 0xFD	; 253
 b70:	2c 93       	st	X, r18
 b72:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 b76:	03 c0       	rjmp	.+6      	; 0xb7e <__vector_3+0xbe>
 b78:	86 8d       	ldd	r24, Z+30	; 0x1e
 b7a:	81 60       	ori	r24, 0x01	; 1
 b7c:	86 8f       	std	Z+30, r24	; 0x1e
 b7e:	82 8d       	ldd	r24, Z+26	; 0x1a
 b80:	93 8d       	ldd	r25, Z+27	; 0x1b
 b82:	01 97       	sbiw	r24, 0x01	; 1
 b84:	f1 f7       	brne	.-4      	; 0xb82 <__vector_3+0xc2>
 b86:	a3 89       	ldd	r26, Z+19	; 0x13
 b88:	b4 89       	ldd	r27, Z+20	; 0x14
 b8a:	9c 91       	ld	r25, X
 b8c:	85 89       	ldd	r24, Z+21	; 0x15
 b8e:	89 2b       	or	r24, r25
 b90:	8c 93       	st	X, r24
 b92:	ff 91       	pop	r31
 b94:	ef 91       	pop	r30
 b96:	bf 91       	pop	r27
 b98:	af 91       	pop	r26
 b9a:	9f 91       	pop	r25
 b9c:	8f 91       	pop	r24
 b9e:	7f 91       	pop	r23
 ba0:	6f 91       	pop	r22
 ba2:	5f 91       	pop	r21
 ba4:	4f 91       	pop	r20
 ba6:	3f 91       	pop	r19
 ba8:	2f 91       	pop	r18
 baa:	0f 90       	pop	r0
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	0f 90       	pop	r0
 bb0:	1f 90       	pop	r1
 bb2:	18 95       	reti

00000bb4 <_ZN14SoftwareSerialD1Ev>:
 bb4:	2b e8       	ldi	r18, 0x8B	; 139
 bb6:	31 e0       	ldi	r19, 0x01	; 1
 bb8:	fc 01       	movw	r30, r24
 bba:	31 83       	std	Z+1, r19	; 0x01
 bbc:	20 83       	st	Z, r18
 bbe:	0c 94 21 05 	jmp	0xa42	; 0xa42 <_ZN14SoftwareSerial13stopListeningEv>

00000bc2 <_ZN14SoftwareSerial5setTXEh>:
 bc2:	1f 93       	push	r17
 bc4:	cf 93       	push	r28
 bc6:	df 93       	push	r29
 bc8:	ec 01       	movw	r28, r24
 bca:	16 2f       	mov	r17, r22
 bcc:	6e 8d       	ldd	r22, Y+30	; 0x1e
 bce:	66 95       	lsr	r22
 bd0:	61 70       	andi	r22, 0x01	; 1
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	68 27       	eor	r22, r24
 bd6:	81 2f       	mov	r24, r17
 bd8:	0e 94 52 07 	call	0xea4	; 0xea4 <digitalWrite>
 bdc:	61 e0       	ldi	r22, 0x01	; 1
 bde:	81 2f       	mov	r24, r17
 be0:	0e 94 16 07 	call	0xe2c	; 0xe2c <pinMode>
 be4:	81 2f       	mov	r24, r17
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	fc 01       	movw	r30, r24
 bea:	e4 58       	subi	r30, 0x84	; 132
 bec:	ff 4f       	sbci	r31, 0xFF	; 255
 bee:	e4 91       	lpm	r30, Z
 bf0:	e8 8b       	std	Y+16, r30	; 0x10
 bf2:	fc 01       	movw	r30, r24
 bf4:	e0 57       	subi	r30, 0x70	; 112
 bf6:	ff 4f       	sbci	r31, 0xFF	; 255
 bf8:	e4 91       	lpm	r30, Z
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	ee 0f       	add	r30, r30
 bfe:	ff 1f       	adc	r31, r31
 c00:	e2 55       	subi	r30, 0x52	; 82
 c02:	ff 4f       	sbci	r31, 0xFF	; 255
 c04:	85 91       	lpm	r24, Z+
 c06:	94 91       	lpm	r25, Z
 c08:	9a 8b       	std	Y+18, r25	; 0x12
 c0a:	89 8b       	std	Y+17, r24	; 0x11
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	1f 91       	pop	r17
 c12:	08 95       	ret

00000c14 <_ZN14SoftwareSerial5setRXEh>:
 c14:	1f 93       	push	r17
 c16:	cf 93       	push	r28
 c18:	df 93       	push	r29
 c1a:	ec 01       	movw	r28, r24
 c1c:	16 2f       	mov	r17, r22
 c1e:	60 e0       	ldi	r22, 0x00	; 0
 c20:	81 2f       	mov	r24, r17
 c22:	0e 94 16 07 	call	0xe2c	; 0xe2c <pinMode>
 c26:	8e 8d       	ldd	r24, Y+30	; 0x1e
 c28:	81 fd       	sbrc	r24, 1
 c2a:	04 c0       	rjmp	.+8      	; 0xc34 <_ZN14SoftwareSerial5setRXEh+0x20>
 c2c:	61 e0       	ldi	r22, 0x01	; 1
 c2e:	81 2f       	mov	r24, r17
 c30:	0e 94 52 07 	call	0xea4	; 0xea4 <digitalWrite>
 c34:	1c 87       	std	Y+12, r17	; 0x0c
 c36:	81 2f       	mov	r24, r17
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	fc 01       	movw	r30, r24
 c3c:	e4 58       	subi	r30, 0x84	; 132
 c3e:	ff 4f       	sbci	r31, 0xFF	; 255
 c40:	e4 91       	lpm	r30, Z
 c42:	ed 87       	std	Y+13, r30	; 0x0d
 c44:	fc 01       	movw	r30, r24
 c46:	e0 57       	subi	r30, 0x70	; 112
 c48:	ff 4f       	sbci	r31, 0xFF	; 255
 c4a:	e4 91       	lpm	r30, Z
 c4c:	f0 e0       	ldi	r31, 0x00	; 0
 c4e:	ee 0f       	add	r30, r30
 c50:	ff 1f       	adc	r31, r31
 c52:	ec 55       	subi	r30, 0x5C	; 92
 c54:	ff 4f       	sbci	r31, 0xFF	; 255
 c56:	85 91       	lpm	r24, Z+
 c58:	94 91       	lpm	r25, Z
 c5a:	9f 87       	std	Y+15, r25	; 0x0f
 c5c:	8e 87       	std	Y+14, r24	; 0x0e
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	1f 91       	pop	r17
 c64:	08 95       	ret

00000c66 <_ZN14SoftwareSerialC1Ehhb>:
 c66:	1f 93       	push	r17
 c68:	cf 93       	push	r28
 c6a:	df 93       	push	r29
 c6c:	ec 01       	movw	r28, r24
 c6e:	16 2f       	mov	r17, r22
 c70:	1b 82       	std	Y+3, r1	; 0x03
 c72:	1a 82       	std	Y+2, r1	; 0x02
 c74:	88 ee       	ldi	r24, 0xE8	; 232
 c76:	93 e0       	ldi	r25, 0x03	; 3
 c78:	a0 e0       	ldi	r26, 0x00	; 0
 c7a:	b0 e0       	ldi	r27, 0x00	; 0
 c7c:	8c 83       	std	Y+4, r24	; 0x04
 c7e:	9d 83       	std	Y+5, r25	; 0x05
 c80:	ae 83       	std	Y+6, r26	; 0x06
 c82:	bf 83       	std	Y+7, r27	; 0x07
 c84:	8b e8       	ldi	r24, 0x8B	; 139
 c86:	91 e0       	ldi	r25, 0x01	; 1
 c88:	99 83       	std	Y+1, r25	; 0x01
 c8a:	88 83       	st	Y, r24
 c8c:	1f 8a       	std	Y+23, r1	; 0x17
 c8e:	1e 8a       	std	Y+22, r1	; 0x16
 c90:	19 8e       	std	Y+25, r1	; 0x19
 c92:	18 8e       	std	Y+24, r1	; 0x18
 c94:	1b 8e       	std	Y+27, r1	; 0x1b
 c96:	1a 8e       	std	Y+26, r1	; 0x1a
 c98:	1d 8e       	std	Y+29, r1	; 0x1d
 c9a:	1c 8e       	std	Y+28, r1	; 0x1c
 c9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
 c9e:	8e 7f       	andi	r24, 0xFE	; 254
 ca0:	20 fb       	bst	r18, 0
 ca2:	81 f9       	bld	r24, 1
 ca4:	8e 8f       	std	Y+30, r24	; 0x1e
 ca6:	64 2f       	mov	r22, r20
 ca8:	ce 01       	movw	r24, r28
 caa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN14SoftwareSerial5setTXEh>
 cae:	61 2f       	mov	r22, r17
 cb0:	ce 01       	movw	r24, r28
 cb2:	df 91       	pop	r29
 cb4:	cf 91       	pop	r28
 cb6:	1f 91       	pop	r17
 cb8:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <_ZN14SoftwareSerial5setRXEh>

00000cbc <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
 cbc:	cf 93       	push	r28
 cbe:	df 93       	push	r29
 cc0:	ec 01       	movw	r28, r24
 cc2:	9a 01       	movw	r18, r20
 cc4:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
 cc6:	1b 8e       	std	Y+27, r1	; 0x1b
 cc8:	1a 8e       	std	Y+26, r1	; 0x1a
 cca:	19 8e       	std	Y+25, r1	; 0x19
 ccc:	18 8e       	std	Y+24, r1	; 0x18
 cce:	1f 8a       	std	Y+23, r1	; 0x17
 cd0:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
 cd2:	60 e0       	ldi	r22, 0x00	; 0
 cd4:	79 e0       	ldi	r23, 0x09	; 9
 cd6:	8d e3       	ldi	r24, 0x3D	; 61
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__divmodsi4>
 cde:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 ce0:	24 30       	cpi	r18, 0x04	; 4
 ce2:	31 05       	cpc	r19, r1
 ce4:	18 f0       	brcs	.+6      	; 0xcec <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
 ce6:	c9 01       	movw	r24, r18
 ce8:	03 97       	sbiw	r24, 0x03	; 3
 cea:	02 c0       	rjmp	.+4      	; 0xcf0 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
 cf0:	9d 8f       	std	Y+29, r25	; 0x1d
 cf2:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
 cf4:	6c 85       	ldd	r22, Y+12	; 0x0c
 cf6:	66 31       	cpi	r22, 0x16	; 22
 cf8:	08 f0       	brcs	.+2      	; 0xcfc <_ZN14SoftwareSerial5beginEl+0x40>
 cfa:	69 c0       	rjmp	.+210    	; 0xdce <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 cfc:	c9 01       	movw	r24, r18
 cfe:	96 95       	lsr	r25
 d00:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 d02:	84 31       	cpi	r24, 0x14	; 20
 d04:	91 05       	cpc	r25, r1
 d06:	10 f0       	brcs	.+4      	; 0xd0c <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
 d08:	43 97       	sbiw	r24, 0x13	; 19
 d0a:	02 c0       	rjmp	.+4      	; 0xd10 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 d10:	9f 8b       	std	Y+23, r25	; 0x17
 d12:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 d14:	36 97       	sbiw	r30, 0x06	; 6
 d16:	18 f0       	brcs	.+6      	; 0xd1e <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
 d18:	c9 01       	movw	r24, r18
 d1a:	05 97       	sbiw	r24, 0x05	; 5
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
 d1e:	81 e0       	ldi	r24, 0x01	; 1
 d20:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
 d22:	99 8f       	std	Y+25, r25	; 0x19
 d24:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 d26:	c9 01       	movw	r24, r18
 d28:	88 0f       	add	r24, r24
 d2a:	99 1f       	adc	r25, r25
 d2c:	28 0f       	add	r18, r24
 d2e:	39 1f       	adc	r19, r25
 d30:	36 95       	lsr	r19
 d32:	27 95       	ror	r18
 d34:	36 95       	lsr	r19
 d36:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 d38:	2d 30       	cpi	r18, 0x0D	; 13
 d3a:	31 05       	cpc	r19, r1
 d3c:	18 f0       	brcs	.+6      	; 0xd44 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
 d3e:	2c 50       	subi	r18, 0x0C	; 12
 d40:	31 09       	sbc	r19, r1
 d42:	02 c0       	rjmp	.+4      	; 0xd48 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
 d44:	21 e0       	ldi	r18, 0x01	; 1
 d46:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 d48:	3b 8f       	std	Y+27, r19	; 0x1b
 d4a:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
 d4c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
 d50:	68 30       	cpi	r22, 0x08	; 8
 d52:	50 f0       	brcs	.+20     	; 0xd68 <_ZN14SoftwareSerial5beginEl+0xac>
 d54:	21 e0       	ldi	r18, 0x01	; 1
 d56:	6e 30       	cpi	r22, 0x0E	; 14
 d58:	08 f4       	brcc	.+2      	; 0xd5c <_ZN14SoftwareSerial5beginEl+0xa0>
 d5a:	20 e0       	ldi	r18, 0x00	; 0
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	01 c0       	rjmp	.+2      	; 0xd62 <_ZN14SoftwareSerial5beginEl+0xa6>
 d60:	88 0f       	add	r24, r24
 d62:	2a 95       	dec	r18
 d64:	ea f7       	brpl	.-6      	; 0xd60 <_ZN14SoftwareSerial5beginEl+0xa4>
 d66:	01 c0       	rjmp	.+2      	; 0xd6a <_ZN14SoftwareSerial5beginEl+0xae>
 d68:	84 e0       	ldi	r24, 0x04	; 4
 d6a:	89 2b       	or	r24, r25
 d6c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
 d70:	9c 85       	ldd	r25, Y+12	; 0x0c
 d72:	98 30       	cpi	r25, 0x08	; 8
 d74:	38 f0       	brcs	.+14     	; 0xd84 <_ZN14SoftwareSerial5beginEl+0xc8>
 d76:	9e 30       	cpi	r25, 0x0E	; 14
 d78:	40 f0       	brcs	.+16     	; 0xd8a <_ZN14SoftwareSerial5beginEl+0xce>
 d7a:	96 31       	cpi	r25, 0x16	; 22
 d7c:	48 f0       	brcs	.+18     	; 0xd90 <_ZN14SoftwareSerial5beginEl+0xd4>
 d7e:	20 e0       	ldi	r18, 0x00	; 0
 d80:	30 e0       	ldi	r19, 0x00	; 0
 d82:	08 c0       	rjmp	.+16     	; 0xd94 <_ZN14SoftwareSerial5beginEl+0xd8>
 d84:	2d e6       	ldi	r18, 0x6D	; 109
 d86:	30 e0       	ldi	r19, 0x00	; 0
 d88:	05 c0       	rjmp	.+10     	; 0xd94 <_ZN14SoftwareSerial5beginEl+0xd8>
 d8a:	2b e6       	ldi	r18, 0x6B	; 107
 d8c:	30 e0       	ldi	r19, 0x00	; 0
 d8e:	02 c0       	rjmp	.+4      	; 0xd94 <_ZN14SoftwareSerial5beginEl+0xd8>
 d90:	2c e6       	ldi	r18, 0x6C	; 108
 d92:	30 e0       	ldi	r19, 0x00	; 0
 d94:	3c 8b       	std	Y+20, r19	; 0x14
 d96:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
 d98:	98 30       	cpi	r25, 0x08	; 8
 d9a:	30 f4       	brcc	.+12     	; 0xda8 <_ZN14SoftwareSerial5beginEl+0xec>
 d9c:	81 e0       	ldi	r24, 0x01	; 1
 d9e:	01 c0       	rjmp	.+2      	; 0xda2 <_ZN14SoftwareSerial5beginEl+0xe6>
 da0:	88 0f       	add	r24, r24
 da2:	9a 95       	dec	r25
 da4:	ea f7       	brpl	.-6      	; 0xda0 <_ZN14SoftwareSerial5beginEl+0xe4>
 da6:	0e c0       	rjmp	.+28     	; 0xdc4 <_ZN14SoftwareSerial5beginEl+0x108>
 da8:	29 2f       	mov	r18, r25
 daa:	30 e0       	ldi	r19, 0x00	; 0
 dac:	9e 30       	cpi	r25, 0x0E	; 14
 dae:	18 f4       	brcc	.+6      	; 0xdb6 <_ZN14SoftwareSerial5beginEl+0xfa>
 db0:	28 50       	subi	r18, 0x08	; 8
 db2:	31 09       	sbc	r19, r1
 db4:	02 c0       	rjmp	.+4      	; 0xdba <_ZN14SoftwareSerial5beginEl+0xfe>
 db6:	2e 50       	subi	r18, 0x0E	; 14
 db8:	31 09       	sbc	r19, r1
 dba:	81 e0       	ldi	r24, 0x01	; 1
 dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <_ZN14SoftwareSerial5beginEl+0x104>
 dbe:	88 0f       	add	r24, r24
 dc0:	2a 95       	dec	r18
 dc2:	ea f7       	brpl	.-6      	; 0xdbe <_ZN14SoftwareSerial5beginEl+0x102>
 dc4:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 dc6:	8c 8d       	ldd	r24, Y+28	; 0x1c
 dc8:	9d 8d       	ldd	r25, Y+29	; 0x1d
 dca:	01 97       	sbiw	r24, 0x01	; 1
 dcc:	f1 f7       	brne	.-4      	; 0xdca <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 dce:	ce 01       	movw	r24, r28
}
 dd0:	df 91       	pop	r29
 dd2:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 dd4:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <_ZN14SoftwareSerial6listenEv>

00000dd8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 dd8:	08 95       	ret

00000dda <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 dda:	83 30       	cpi	r24, 0x03	; 3
 ddc:	81 f0       	breq	.+32     	; 0xdfe <turnOffPWM+0x24>
 dde:	28 f4       	brcc	.+10     	; 0xdea <turnOffPWM+0x10>
 de0:	81 30       	cpi	r24, 0x01	; 1
 de2:	99 f0       	breq	.+38     	; 0xe0a <turnOffPWM+0x30>
 de4:	82 30       	cpi	r24, 0x02	; 2
 de6:	a1 f0       	breq	.+40     	; 0xe10 <turnOffPWM+0x36>
 de8:	08 95       	ret
 dea:	87 30       	cpi	r24, 0x07	; 7
 dec:	a9 f0       	breq	.+42     	; 0xe18 <turnOffPWM+0x3e>
 dee:	88 30       	cpi	r24, 0x08	; 8
 df0:	b9 f0       	breq	.+46     	; 0xe20 <turnOffPWM+0x46>
 df2:	84 30       	cpi	r24, 0x04	; 4
 df4:	d1 f4       	brne	.+52     	; 0xe2a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 df6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 dfa:	8f 7d       	andi	r24, 0xDF	; 223
 dfc:	03 c0       	rjmp	.+6      	; 0xe04 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 dfe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 e02:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 e04:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 e08:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 e0a:	84 b5       	in	r24, 0x24	; 36
 e0c:	8f 77       	andi	r24, 0x7F	; 127
 e0e:	02 c0       	rjmp	.+4      	; 0xe14 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 e10:	84 b5       	in	r24, 0x24	; 36
 e12:	8f 7d       	andi	r24, 0xDF	; 223
 e14:	84 bd       	out	0x24, r24	; 36
 e16:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 e18:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 e1c:	8f 77       	andi	r24, 0x7F	; 127
 e1e:	03 c0       	rjmp	.+6      	; 0xe26 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 e20:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 e24:	8f 7d       	andi	r24, 0xDF	; 223
 e26:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 e2a:	08 95       	ret

00000e2c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 e2c:	cf 93       	push	r28
 e2e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 e30:	90 e0       	ldi	r25, 0x00	; 0
 e32:	fc 01       	movw	r30, r24
 e34:	e4 58       	subi	r30, 0x84	; 132
 e36:	ff 4f       	sbci	r31, 0xFF	; 255
 e38:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 e3a:	fc 01       	movw	r30, r24
 e3c:	e0 57       	subi	r30, 0x70	; 112
 e3e:	ff 4f       	sbci	r31, 0xFF	; 255
 e40:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 e42:	88 23       	and	r24, r24
 e44:	61 f1       	breq	.+88     	; 0xe9e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 e46:	90 e0       	ldi	r25, 0x00	; 0
 e48:	88 0f       	add	r24, r24
 e4a:	99 1f       	adc	r25, r25
 e4c:	fc 01       	movw	r30, r24
 e4e:	e8 54       	subi	r30, 0x48	; 72
 e50:	ff 4f       	sbci	r31, 0xFF	; 255
 e52:	c5 91       	lpm	r28, Z+
 e54:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 e56:	fc 01       	movw	r30, r24
 e58:	e2 55       	subi	r30, 0x52	; 82
 e5a:	ff 4f       	sbci	r31, 0xFF	; 255
 e5c:	a5 91       	lpm	r26, Z+
 e5e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 e60:	61 11       	cpse	r22, r1
 e62:	09 c0       	rjmp	.+18     	; 0xe76 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 e64:	9f b7       	in	r25, 0x3f	; 63
                cli();
 e66:	f8 94       	cli
		*reg &= ~bit;
 e68:	88 81       	ld	r24, Y
 e6a:	20 95       	com	r18
 e6c:	82 23       	and	r24, r18
 e6e:	88 83       	st	Y, r24
		*out &= ~bit;
 e70:	ec 91       	ld	r30, X
 e72:	2e 23       	and	r18, r30
 e74:	0b c0       	rjmp	.+22     	; 0xe8c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 e76:	62 30       	cpi	r22, 0x02	; 2
 e78:	61 f4       	brne	.+24     	; 0xe92 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 e7a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 e7c:	f8 94       	cli
		*reg &= ~bit;
 e7e:	88 81       	ld	r24, Y
 e80:	32 2f       	mov	r19, r18
 e82:	30 95       	com	r19
 e84:	83 23       	and	r24, r19
 e86:	88 83       	st	Y, r24
		*out |= bit;
 e88:	ec 91       	ld	r30, X
 e8a:	2e 2b       	or	r18, r30
 e8c:	2c 93       	st	X, r18
		SREG = oldSREG;
 e8e:	9f bf       	out	0x3f, r25	; 63
 e90:	06 c0       	rjmp	.+12     	; 0xe9e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 e92:	8f b7       	in	r24, 0x3f	; 63
                cli();
 e94:	f8 94       	cli
		*reg |= bit;
 e96:	e8 81       	ld	r30, Y
 e98:	2e 2b       	or	r18, r30
 e9a:	28 83       	st	Y, r18
		SREG = oldSREG;
 e9c:	8f bf       	out	0x3f, r24	; 63
	}
}
 e9e:	df 91       	pop	r29
 ea0:	cf 91       	pop	r28
 ea2:	08 95       	ret

00000ea4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 ea4:	1f 93       	push	r17
 ea6:	cf 93       	push	r28
 ea8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 eaa:	28 2f       	mov	r18, r24
 eac:	30 e0       	ldi	r19, 0x00	; 0
 eae:	f9 01       	movw	r30, r18
 eb0:	e8 59       	subi	r30, 0x98	; 152
 eb2:	ff 4f       	sbci	r31, 0xFF	; 255
 eb4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 eb6:	f9 01       	movw	r30, r18
 eb8:	e4 58       	subi	r30, 0x84	; 132
 eba:	ff 4f       	sbci	r31, 0xFF	; 255
 ebc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 ebe:	f9 01       	movw	r30, r18
 ec0:	e0 57       	subi	r30, 0x70	; 112
 ec2:	ff 4f       	sbci	r31, 0xFF	; 255
 ec4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 ec6:	cc 23       	and	r28, r28
 ec8:	c1 f0       	breq	.+48     	; 0xefa <digitalWrite+0x56>
 eca:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 ecc:	81 11       	cpse	r24, r1
 ece:	0e 94 ed 06 	call	0xdda	; 0xdda <turnOffPWM>

	out = portOutputRegister(port);
 ed2:	ec 2f       	mov	r30, r28
 ed4:	f0 e0       	ldi	r31, 0x00	; 0
 ed6:	ee 0f       	add	r30, r30
 ed8:	ff 1f       	adc	r31, r31
 eda:	e2 55       	subi	r30, 0x52	; 82
 edc:	ff 4f       	sbci	r31, 0xFF	; 255
 ede:	a5 91       	lpm	r26, Z+
 ee0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 ee2:	9f b7       	in	r25, 0x3f	; 63
	cli();
 ee4:	f8 94       	cli

	if (val == LOW) {
 ee6:	11 11       	cpse	r17, r1
 ee8:	04 c0       	rjmp	.+8      	; 0xef2 <digitalWrite+0x4e>
		*out &= ~bit;
 eea:	8c 91       	ld	r24, X
 eec:	d0 95       	com	r29
 eee:	d8 23       	and	r29, r24
 ef0:	02 c0       	rjmp	.+4      	; 0xef6 <digitalWrite+0x52>
	} else {
		*out |= bit;
 ef2:	ec 91       	ld	r30, X
 ef4:	de 2b       	or	r29, r30
 ef6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 ef8:	9f bf       	out	0x3f, r25	; 63
}
 efa:	df 91       	pop	r29
 efc:	cf 91       	pop	r28
 efe:	1f 91       	pop	r17
 f00:	08 95       	ret

00000f02 <__divmodhi4>:
 f02:	97 fb       	bst	r25, 7
 f04:	07 2e       	mov	r0, r23
 f06:	16 f4       	brtc	.+4      	; 0xf0c <__divmodhi4+0xa>
 f08:	00 94       	com	r0
 f0a:	07 d0       	rcall	.+14     	; 0xf1a <__divmodhi4_neg1>
 f0c:	77 fd       	sbrc	r23, 7
 f0e:	09 d0       	rcall	.+18     	; 0xf22 <__divmodhi4_neg2>
 f10:	0e 94 d6 07 	call	0xfac	; 0xfac <__udivmodhi4>
 f14:	07 fc       	sbrc	r0, 7
 f16:	05 d0       	rcall	.+10     	; 0xf22 <__divmodhi4_neg2>
 f18:	3e f4       	brtc	.+14     	; 0xf28 <__divmodhi4_exit>

00000f1a <__divmodhi4_neg1>:
 f1a:	90 95       	com	r25
 f1c:	81 95       	neg	r24
 f1e:	9f 4f       	sbci	r25, 0xFF	; 255
 f20:	08 95       	ret

00000f22 <__divmodhi4_neg2>:
 f22:	70 95       	com	r23
 f24:	61 95       	neg	r22
 f26:	7f 4f       	sbci	r23, 0xFF	; 255

00000f28 <__divmodhi4_exit>:
 f28:	08 95       	ret

00000f2a <__udivmodsi4>:
 f2a:	a1 e2       	ldi	r26, 0x21	; 33
 f2c:	1a 2e       	mov	r1, r26
 f2e:	aa 1b       	sub	r26, r26
 f30:	bb 1b       	sub	r27, r27
 f32:	fd 01       	movw	r30, r26
 f34:	0d c0       	rjmp	.+26     	; 0xf50 <__udivmodsi4_ep>

00000f36 <__udivmodsi4_loop>:
 f36:	aa 1f       	adc	r26, r26
 f38:	bb 1f       	adc	r27, r27
 f3a:	ee 1f       	adc	r30, r30
 f3c:	ff 1f       	adc	r31, r31
 f3e:	a2 17       	cp	r26, r18
 f40:	b3 07       	cpc	r27, r19
 f42:	e4 07       	cpc	r30, r20
 f44:	f5 07       	cpc	r31, r21
 f46:	20 f0       	brcs	.+8      	; 0xf50 <__udivmodsi4_ep>
 f48:	a2 1b       	sub	r26, r18
 f4a:	b3 0b       	sbc	r27, r19
 f4c:	e4 0b       	sbc	r30, r20
 f4e:	f5 0b       	sbc	r31, r21

00000f50 <__udivmodsi4_ep>:
 f50:	66 1f       	adc	r22, r22
 f52:	77 1f       	adc	r23, r23
 f54:	88 1f       	adc	r24, r24
 f56:	99 1f       	adc	r25, r25
 f58:	1a 94       	dec	r1
 f5a:	69 f7       	brne	.-38     	; 0xf36 <__udivmodsi4_loop>
 f5c:	60 95       	com	r22
 f5e:	70 95       	com	r23
 f60:	80 95       	com	r24
 f62:	90 95       	com	r25
 f64:	9b 01       	movw	r18, r22
 f66:	ac 01       	movw	r20, r24
 f68:	bd 01       	movw	r22, r26
 f6a:	cf 01       	movw	r24, r30
 f6c:	08 95       	ret

00000f6e <__divmodsi4>:
 f6e:	05 2e       	mov	r0, r21
 f70:	97 fb       	bst	r25, 7
 f72:	1e f4       	brtc	.+6      	; 0xf7a <__divmodsi4+0xc>
 f74:	00 94       	com	r0
 f76:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__negsi2>
 f7a:	57 fd       	sbrc	r21, 7
 f7c:	07 d0       	rcall	.+14     	; 0xf8c <__divmodsi4_neg2>
 f7e:	0e 94 95 07 	call	0xf2a	; 0xf2a <__udivmodsi4>
 f82:	07 fc       	sbrc	r0, 7
 f84:	03 d0       	rcall	.+6      	; 0xf8c <__divmodsi4_neg2>
 f86:	4e f4       	brtc	.+18     	; 0xf9a <__divmodsi4_exit>
 f88:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__negsi2>

00000f8c <__divmodsi4_neg2>:
 f8c:	50 95       	com	r21
 f8e:	40 95       	com	r20
 f90:	30 95       	com	r19
 f92:	21 95       	neg	r18
 f94:	3f 4f       	sbci	r19, 0xFF	; 255
 f96:	4f 4f       	sbci	r20, 0xFF	; 255
 f98:	5f 4f       	sbci	r21, 0xFF	; 255

00000f9a <__divmodsi4_exit>:
 f9a:	08 95       	ret

00000f9c <__negsi2>:
 f9c:	90 95       	com	r25
 f9e:	80 95       	com	r24
 fa0:	70 95       	com	r23
 fa2:	61 95       	neg	r22
 fa4:	7f 4f       	sbci	r23, 0xFF	; 255
 fa6:	8f 4f       	sbci	r24, 0xFF	; 255
 fa8:	9f 4f       	sbci	r25, 0xFF	; 255
 faa:	08 95       	ret

00000fac <__udivmodhi4>:
 fac:	aa 1b       	sub	r26, r26
 fae:	bb 1b       	sub	r27, r27
 fb0:	51 e1       	ldi	r21, 0x11	; 17
 fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <__udivmodhi4_ep>

00000fb4 <__udivmodhi4_loop>:
 fb4:	aa 1f       	adc	r26, r26
 fb6:	bb 1f       	adc	r27, r27
 fb8:	a6 17       	cp	r26, r22
 fba:	b7 07       	cpc	r27, r23
 fbc:	10 f0       	brcs	.+4      	; 0xfc2 <__udivmodhi4_ep>
 fbe:	a6 1b       	sub	r26, r22
 fc0:	b7 0b       	sbc	r27, r23

00000fc2 <__udivmodhi4_ep>:
 fc2:	88 1f       	adc	r24, r24
 fc4:	99 1f       	adc	r25, r25
 fc6:	5a 95       	dec	r21
 fc8:	a9 f7       	brne	.-22     	; 0xfb4 <__udivmodhi4_loop>
 fca:	80 95       	com	r24
 fcc:	90 95       	com	r25
 fce:	bc 01       	movw	r22, r24
 fd0:	cd 01       	movw	r24, r26
 fd2:	08 95       	ret

00000fd4 <__tablejump2__>:
 fd4:	ee 0f       	add	r30, r30
 fd6:	ff 1f       	adc	r31, r31
 fd8:	05 90       	lpm	r0, Z+
 fda:	f4 91       	lpm	r31, Z
 fdc:	e0 2d       	mov	r30, r0
 fde:	09 94       	ijmp

00000fe0 <__do_global_dtors>:
 fe0:	10 e0       	ldi	r17, 0x00	; 0
 fe2:	c3 e6       	ldi	r28, 0x63	; 99
 fe4:	d0 e0       	ldi	r29, 0x00	; 0
 fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__do_global_dtors+0x10>
 fe8:	fe 01       	movw	r30, r28
 fea:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__tablejump2__>
 fee:	21 96       	adiw	r28, 0x01	; 1
 ff0:	c4 36       	cpi	r28, 0x64	; 100
 ff2:	d1 07       	cpc	r29, r17
 ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__do_global_dtors+0x8>
 ff6:	f8 94       	cli

00000ff8 <__stop_program>:
 ff8:	ff cf       	rjmp	.-2      	; 0xff8 <__stop_program>
